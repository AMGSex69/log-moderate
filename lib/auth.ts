import { getSupabaseClient } from "./supabase"

const supabase = getSupabaseClient()

export type UserProfile = {
	id: string
	full_name: string
	position: string
	is_admin: boolean
	work_schedule?: string
	work_hours?: number
	is_online?: boolean
	last_seen?: string
	created_at: string
	updated_at: string
}

export type AuthUser = {
	id: string
	email: string
	profile: UserProfile
}

// –§—É–Ω–∫—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const authService = {
	// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
	async signUp(email: string, password: string, fullName: string, workSchedule?: string) {
		const { data, error } = await supabase.auth.signUp({
			email,
			password,
			options: {
				data: {
					full_name: fullName,
					work_schedule: workSchedule || "8+1",
				},
			},
		})
		return { data, error }
	},

	// –í—Ö–æ–¥
	async signIn(email: string, password: string) {
		const { data, error } = await supabase.auth.signInWithPassword({
			email,
			password,
		})
		return { data, error }
	},

	// –í—ã—Ö–æ–¥
	async signOut() {
		const { error } = await supabase.auth.signOut()
		return { error }
	},

	// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	async getCurrentUser() {
		const {
			data: { user },
			error,
		} = await supabase.auth.getUser()
		return { user, error }
	},

	// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	async getUserProfile(userId: string): Promise<{ profile: UserProfile | null; error: any }> {
		try {
			// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ user_profiles (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
			const { data: userProfile, error: userProfileError } = await supabase
				.from("user_profiles")
				.select("*")
				.eq("id", userId)
				.single()

			if (!userProfileError && userProfile) {
				return { profile: userProfile as UserProfile, error: null }
			}

			// –ï—Å–ª–∏ user_profiles –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ employees
			console.log("üîÑ User profile not found, trying employees table...")
			const { data: employeeData, error: employeeError } = await supabase
				.from("employees")
				.select("*")
				.eq("user_id", userId)
				.single()

			if (!employeeError && employeeData) {
				// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ—Ñ–∏–ª—è
				const profile: UserProfile = {
					id: userId,
					full_name: (employeeData as any)?.full_name || "–°–æ—Ç—Ä—É–¥–Ω–∏–∫",
					position: (employeeData as any)?.position || "–°–æ—Ç—Ä—É–¥–Ω–∏–∫",
					is_admin: (employeeData as any)?.is_admin || false,
					work_schedule: (employeeData as any)?.work_schedule || "8+1",
					work_hours: (employeeData as any)?.work_hours || 8,
					is_online: (employeeData as any)?.is_online || false,
					last_seen: (employeeData as any)?.last_seen,
					created_at: (employeeData as any)?.created_at || new Date().toISOString(),
					updated_at: (employeeData as any)?.updated_at || new Date().toISOString(),
				}
				return { profile, error: null }
			}

			// –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
			console.log("üîÑ No profile found, creating default profile...")
			const { data: userData } = await supabase.auth.getUser()
			const defaultProfile: UserProfile = {
				id: userId,
				full_name: userData.user?.user_metadata?.full_name || userData.user?.email || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
				position: "–°–æ—Ç—Ä—É–¥–Ω–∏–∫",
				is_admin: false,
				work_schedule: "8+1",
				work_hours: 8,
				is_online: false,
				last_seen: undefined,
				created_at: new Date().toISOString(),
				updated_at: new Date().toISOString(),
			}

			return { profile: defaultProfile, error: null }
		} catch (error) {
			console.error("‚ùå Error loading user profile:", error)
			return { profile: null, error }
		}
	},

	// –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
	async updateProfile(userId: string, updates: Partial<UserProfile>) {
		try {
			// –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –≤ user_profiles
			const { data: userProfileData, error: userProfileError } = await supabase
				.from("user_profiles")
				.update(updates)
				.eq("id", userId)
				.select()
				.single()

			if (!userProfileError && userProfileData) {
				return { data: userProfileData, error: null }
			}

			// –ï—Å–ª–∏ user_profiles –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º employees
			console.log("üîÑ Updating employee profile...")
			const { data: employeeData, error: employeeError } = await supabase
				.from("employees")
				.update({
					full_name: updates.full_name,
					position: updates.position,
					work_schedule: updates.work_schedule,
					work_hours: updates.work_hours,
					is_online: updates.is_online,
					last_seen: updates.last_seen,
					updated_at: new Date().toISOString(),
				})
				.eq("user_id", userId)
				.select()
				.single()

			return { data: employeeData, error: employeeError }
		} catch (error) {
			console.error("‚ùå Error updating profile:", error)
			return { data: null, error }
		}
	},

	// –ü–æ–ª—É—á–∏—Ç—å employee ID –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	async getEmployeeId(userId: string) {
		try {
			console.log("üîç –ò—â–µ–º employee –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId)

			const { data, error } = await supabase
				.from("employees")
				.select("id")
				.eq("user_id", userId)
				.single()

			if (!error && data) {
				console.log("‚úÖ Employee –Ω–∞–π–¥–µ–Ω:", data.id)
				return { employeeId: data.id, error: null }
			}

			// –ï—Å–ª–∏ employee –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å
			console.log("‚ö†Ô∏è Employee –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...")

			// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
			const { data: userData } = await supabase.auth.getUser()
			const fullName = userData.user?.user_metadata?.full_name || userData.user?.email?.split('@')[0] || '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'

			const { data: newEmployee, error: createError } = await supabase
				.from("employees")
				.insert({
					user_id: userId,
					full_name: fullName,
					position: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫',
					is_admin: false,
					is_active: true,
					work_schedule: '8+1',
					work_hours: 8,
					is_online: false,
					created_at: new Date().toISOString(),
					updated_at: new Date().toISOString()
				})
				.select("id")
				.single()

			if (!createError && newEmployee) {
				console.log("‚úÖ Employee —Å–æ–∑–¥–∞–Ω:", newEmployee.id)
				return { employeeId: newEmployee.id, error: null }
			}

			console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è employee:", createError)

			// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É
			return {
				employeeId: null,
				error: new Error(`–ù–µ —É–¥–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. (–î–µ—Ç–∞–ª–∏: ${createError?.message || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'})`)
			}

		} catch (error) {
			console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ getEmployeeId:", error)
			return {
				employeeId: null,
				error: new Error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∑–∞–ø–∏—Å—å—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ${error}`)
			}
		}
	},

	// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω
	async updateOnlineStatus(userId: string, isOnline: boolean) {
		try {
			// –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –≤ user_profiles
			const { error: userProfileError } = await supabase
				.from("user_profiles")
				.update({
					is_online: isOnline,
					last_seen: new Date().toISOString(),
				})
				.eq("id", userId)

			if (!userProfileError) {
				return { error: null }
			}

			// –ï—Å–ª–∏ user_profiles –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º employees
			const { error: employeeError } = await supabase
				.from("employees")
				.update({
					is_online: isOnline,
					last_seen: new Date().toISOString(),
					updated_at: new Date().toISOString(),
				})
				.eq("user_id", userId)

			return { error: employeeError }
		} catch (error) {
			console.error("‚ùå Error updating online status:", error)
			return { error }
		}
	},
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º supabase –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { supabase }
