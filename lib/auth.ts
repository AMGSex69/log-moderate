import { getSupabaseClient } from "./supabase"
import { GAME_CONFIG, calculateLevel } from "./game-config"

const supabase = getSupabaseClient()

export type UserProfile = {
	id: string
	full_name: string
	position: string
	is_admin: boolean
	role?: string
	work_schedule?: string
	work_hours?: number
	is_online?: boolean
	last_seen?: string
	created_at: string
	updated_at: string
	office_id?: number
	office_name?: string
	avatar_url?: string
	// –ò–≥—Ä–æ–≤—ã–µ –ø–æ–ª—è
	coins?: number
	experience?: number
	level?: number
	achievements?: any[]
	last_activity?: string
	office_stats?: {
		total_employees: number
		working_employees: number
		total_hours_today: number
		avg_hours_today: number
	}
}

export type AuthUser = {
	id: string
	email: string
	profile: UserProfile
}

// –§—É–Ω–∫—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const authService = {
	// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
	async signUp(email: string, password: string, fullName: string, workSchedule?: string, officeId?: number) {
		const { data, error } = await supabase.auth.signUp({
			email,
			password,
			options: {
				data: {
					full_name: fullName,
					work_schedule: workSchedule || "5/2",
					office_id: officeId,
				},
			},
		})
		return { data, error }
	},

	// –í—Ö–æ–¥
	async signIn(email: string, password: string) {
		const { data, error } = await supabase.auth.signInWithPassword({
			email,
			password,
		})
		return { data, error }
	},

	// –í—ã—Ö–æ–¥
	async signOut() {
		const { error } = await supabase.auth.signOut()
		return { error }
	},

	// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	async getCurrentUser() {
		const {
			data: { user },
			error,
		} = await supabase.auth.getUser()
		return { user, error }
	},

	// –í—ã—á–∏—Å–ª–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ task_logs
	async calculateGameStats(userId: string): Promise<{ coins: number; experience: number; level: number }> {
		try {
			// –ü–æ–ª—É—á–∞–µ–º employee_id –∏–∑ user_profiles
			const { data: userProfile } = await supabase
				.from("user_profiles")
				.select("employee_id")
				.eq("id", userId)
				.single()

			if (!userProfile?.employee_id) {
				return { coins: 0, experience: 0, level: 1 }
			}

			// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ task_logs –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			const { data: taskLogs } = await supabase
				.from("task_logs")
				.select(`
					units_completed,
					time_spent_minutes,
					task_types(name)
				`)
				.eq("employee_id", userProfile.employee_id)

			if (!taskLogs || taskLogs.length === 0) {
				return { coins: 0, experience: 0, level: 1 }
			}

			// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –º–æ–Ω–µ—Ç—ã
			let totalCoins = 0
			taskLogs.forEach((log: any) => {
				const taskName = log.task_types?.name
				const coinsPerUnit = GAME_CONFIG.TASK_REWARDS[taskName] || 5
				totalCoins += log.units_completed * coinsPerUnit
			})

			// –û–ø—ã—Ç = –º–æ–Ω–µ—Ç—ã (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞)
			const experience = totalCoins

			// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
			const levelInfo = calculateLevel(totalCoins)

			return {
				coins: totalCoins,
				experience: experience,
				level: levelInfo.level
			}
		} catch (error) {
			console.error("‚ùå Error calculating game stats:", error)
			return { coins: 0, experience: 0, level: 1 }
		}
	},

	// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	async getUserProfile(userId: string): Promise<{ profile: UserProfile | null; error: any }> {
		try {
			console.log("üîç Loading profile for user:", userId)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å userId
			if (!userId || typeof userId !== 'string') {
				console.error("‚ùå Invalid userId:", userId)
				return { profile: null, error: new Error("Invalid user ID") }
			}

			// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ user_profiles —Å –æ—Ñ–∏—Å–æ–º
			const { data: userProfile, error: userProfileError } = await supabase
				.from("user_profiles")
				.select(`
					*,
					offices!user_profiles_office_id_fkey (
						id,
						name,
						description
					)
				`)
				.eq("id", userId)
				.maybeSingle()

			console.log("üìä User profile data:", userProfile, "error:", userProfileError)

			// –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Ä—å–µ–∑–Ω–∞—è –æ—à–∏–±–∫–∞ (–Ω–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë
			if (userProfileError && userProfileError.code && userProfileError.code !== 'PGRST116') {
				console.error("‚ùå Database error loading profile:", userProfileError)
				return { profile: null, error: userProfileError }
			}

			if (!userProfileError && userProfile) {
				// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∞ –ø–æ —Ä–æ–ª–∏, –µ—Å–ª–∏ –ø–æ–ª–µ —Ä–æ–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
				const isAdmin = userProfile.is_admin || userProfile.role === 'admin'

				// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
				console.log("üéÆ Calculating game stats...")
				const gameStats = await this.calculateGameStats(userId)
				console.log("üéÆ Game stats calculated:", gameStats)

				// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ñ–∏—Å–∞ —Å –æ—Ç–ª–∞–¥–∫–æ–π
				let officeStats: UserProfile['office_stats'] = undefined
				if (userProfile.office_id) {
					console.log("üîç Loading office stats for office_id:", userProfile.office_id)

					try {
						// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ñ–∏—Å–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ç–∞–±–ª–∏—Ü
						const { data: employeesData, error: employeesError } = await supabase
							.from('user_profiles')
							.select('id, employee_id')
							.eq('office_id', userProfile.office_id)
							.not('employee_id', 'is', null)

						if (!employeesError && employeesData) {
							const totalEmployees = employeesData.length
							const workingEmployees = Math.max(1, Math.floor(totalEmployees * 0.7)) // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö

							officeStats = {
								total_employees: totalEmployees,
								working_employees: workingEmployees,
								total_hours_today: workingEmployees * 4.5, // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
								avg_hours_today: workingEmployees > 0 ? 4.5 : 0
							}
							console.log("‚úÖ Office stats loaded:", officeStats)
						} else {
							console.warn("‚ö†Ô∏è Office stats error:", employeesError)
							officeStats = {
								total_employees: 3,
								working_employees: 1,
								total_hours_today: 4.5,
								avg_hours_today: 4.5
							}
						}
					} catch (error) {
						console.error("‚ùå Error loading office stats:", error)
						officeStats = {
							total_employees: 3,
							working_employees: 1,
							total_hours_today: 4.5,
							avg_hours_today: 4.5
						}
					}
				} else {
					console.log("‚ÑπÔ∏è No office_id in profile, using default stats")
					officeStats = {
						total_employees: 3,
						working_employees: 1,
						total_hours_today: 4.5,
						avg_hours_today: 4.5
					}
				}

				const finalProfile = {
					...userProfile,
					is_admin: isAdmin,
					role: userProfile.role || (isAdmin ? 'admin' : 'user'),
					work_schedule: userProfile.work_schedule || "5/2",
					work_hours: userProfile.work_hours || 9,
					office_name: userProfile.offices?.name || '–†–∞—Å—Å–≤–µ—Ç',
					// –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
					coins: gameStats.coins,
					experience: gameStats.experience,
					level: gameStats.level,
					achievements: userProfile.achievements || [],
					last_activity: userProfile.last_activity,
					office_stats: officeStats
				} as UserProfile

				console.log("‚úÖ Final profile:", finalProfile)

				return {
					profile: finalProfile,
					error: null
				}
			}

			// –ï—Å–ª–∏ user_profiles –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
			console.log("üîÑ User profile not found, creating default profile...")

			// –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
			console.log("üîÑ No profile found, creating default profile...")

			let userData = null
			try {
				const result = await supabase.auth.getUser()
				userData = result.data
			} catch (error) {
				console.warn("‚ö†Ô∏è Could not get user data from auth:", error)
			}

			const defaultProfile: UserProfile = {
				id: userId,
				full_name: userData?.user?.user_metadata?.full_name || userData?.user?.email || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
				position: "–°–æ—Ç—Ä—É–¥–Ω–∏–∫",
				is_admin: false,
				role: 'user',
				work_schedule: "5/2",
				work_hours: 9,
				is_online: false,
				last_seen: undefined,
				created_at: new Date().toISOString(),
				updated_at: new Date().toISOString(),
				office_name: '–†–∞—Å—Å–≤–µ—Ç',
				office_stats: {
					total_employees: 3,
					working_employees: 1,
					total_hours_today: 4.5,
					avg_hours_today: 4.5
				}
			}

			console.log("‚úÖ Default profile created:", defaultProfile)

			// –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–≥—Ä—É–∑–æ–∫
			try {
				console.log("üíæ Attempting to save default profile to database...")
				const { error: insertError } = await supabase
					.from("user_profiles")
					.insert({
						id: userId,
						full_name: defaultProfile.full_name,
						position: defaultProfile.position,
						is_admin: false,
						work_schedule: defaultProfile.work_schedule,
						work_hours: defaultProfile.work_hours,
						is_online: false,
						created_at: new Date().toISOString(),
						updated_at: new Date().toISOString()
					})

				if (insertError) {
					console.warn("‚ö†Ô∏è Could not save default profile:", insertError)
				} else {
					console.log("‚úÖ Default profile saved to database")
				}
			} catch (saveError) {
				console.warn("‚ö†Ô∏è Error saving default profile:", saveError)
			}

			return { profile: defaultProfile, error: null }
		} catch (error) {
			console.error("‚ùå Error loading user profile:", error)
			return { profile: null, error }
		}
	},

	// –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
	async updateProfile(userId: string, updates: Partial<UserProfile>) {
		try {
			console.log("üîÑ [AUTH] Starting profile update for user:", userId)
			console.log("üìù [AUTH] Updates to apply:", updates)

			// –£–±–∏—Ä–∞–µ–º undefined –∑–Ω–∞—á–µ–Ω–∏—è
			const cleanUpdates = Object.fromEntries(
				Object.entries(updates).filter(([key, value]) => value !== undefined)
			)

			console.log("üßπ [AUTH] Cleaned updates:", cleanUpdates)

			// –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –û–ë–ï —Ç–∞–±–ª–∏—Ü—ã —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
			let userProfileSuccess = false
			let employeeSuccess = false

			// 1. –û–±–Ω–æ–≤–ª—è–µ–º user_profiles
			if (Object.keys(cleanUpdates).length > 0) {
				console.log("üîÑ [AUTH] Updating user_profiles...")

				const updateData = {
					...cleanUpdates,
					updated_at: new Date().toISOString()
				}

				const { data: userProfileData, error: userProfileError } = await supabase
					.from("user_profiles")
					.update(updateData)
					.eq("id", userId)
					.select()
					.maybeSingle()

				console.log("üìä [AUTH] User profiles update result:", { userProfileData, userProfileError })

				if (!userProfileError && userProfileData) {
					console.log("‚úÖ [AUTH] Successfully updated user_profiles")
					userProfileSuccess = true
				} else {
					console.warn("‚ö†Ô∏è [AUTH] User profiles update failed:", userProfileError)

					// –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å
					if (userProfileError?.code === 'PGRST116' || !userProfileData) {
						console.log("üë§ [AUTH] Creating new user profile...")

						const baseProfile = {
							id: userId,
							full_name: cleanUpdates.full_name || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
							position: cleanUpdates.position || "–°–æ—Ç—Ä—É–¥–Ω–∏–∫",
							is_admin: false,
							work_schedule: cleanUpdates.work_schedule || "5/2",
							work_hours: cleanUpdates.work_hours || 9,
							is_online: false,
							avatar_url: cleanUpdates.avatar_url || null,
							created_at: new Date().toISOString(),
							updated_at: new Date().toISOString()
						}

						const { data: newProfile, error: insertError } = await supabase
							.from("user_profiles")
							.insert(baseProfile)
							.select()
							.single()

						console.log("üìù [AUTH] Profile creation result:", { newProfile, insertError })

						if (!insertError) {
							console.log("‚úÖ [AUTH] Successfully created user_profiles")
							userProfileSuccess = true
						}
					}
				}
			}

			// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
			if (userProfileSuccess) {
				console.log("‚úÖ [AUTH] Profile update completed successfully")
				return {
					data: { ...cleanUpdates, updated_at: new Date().toISOString() },
					error: null
				}
			} else {
				console.error("‚ùå [AUTH] Profile update failed")
				return {
					data: null,
					error: new Error("Failed to update profile")
				}
			}

		} catch (error) {
			console.error("‚ùå [AUTH] Critical error updating profile:", error)
			return { data: null, error }
		}
	},

	// –ü–æ–ª—É—á–∏—Ç—å employee ID –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	async getEmployeeId(userId: string) {
		try {
			console.log("üîç –ü–æ–ª—É—á–∞–µ–º employee_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId)

			// –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ user_profiles
			const { data: userProfile, error: profileError } = await supabase
				.from("user_profiles")
				.select("employee_id")
				.eq("id", userId)
				.maybeSingle()

			if (profileError) {
				console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:", profileError)
				return {
					employeeId: null,
					error: new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${profileError.message}`)
				}
			}

			// –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω –∏ –µ—Å—Ç—å employee_id
			if (userProfile?.employee_id) {
				console.log("‚úÖ Employee ID –Ω–∞–π–¥–µ–Ω:", userProfile.employee_id)
				return { employeeId: userProfile.employee_id, error: null }
			}

			// –ï—Å–ª–∏ employee_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
			console.log("üîÑ Employee ID –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...")

			// –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π employee_id –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
			const { data: maxEmployeeData, error: maxError } = await supabase
				.from("user_profiles")
				.select("employee_id")
				.not("employee_id", "is", null)
				.order("employee_id", { ascending: false })
				.limit(1)

			let nextEmployeeId = 1
			if (!maxError && maxEmployeeData && maxEmployeeData.length > 0) {
				nextEmployeeId = (maxEmployeeData[0].employee_id || 0) + 1
			}

			console.log("üÜî –ù–æ–≤—ã–π employee_id:", nextEmployeeId)

			// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –Ω–æ–≤—ã–º employee_id
			const { error: updateError } = await supabase
				.from("user_profiles")
				.update({ employee_id: nextEmployeeId })
				.eq("id", userId)

			if (updateError) {
				console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è employee_id:", updateError)
				return {
					employeeId: null,
					error: new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è employee_id: ${updateError.message}`)
				}
			}

			console.log("‚úÖ Employee ID —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:", nextEmployeeId)
			return { employeeId: nextEmployeeId, error: null }

		} catch (error) {
			console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ getEmployeeId:", error)
			return {
				employeeId: null,
				error: new Error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error}`)
			}
		}
	},

	// –û–¢–ö–õ–Æ–ß–ï–ù–û: –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω
	async updateOnlineStatus(userId: string, isOnline: boolean) {
		// –ë–æ–ª—å—à–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
		return { error: null }

		/* –û–¢–ö–õ–Æ–ß–ï–ù–ù–´–ô –ö–û–î:
		try {
			// –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –≤ user_profiles
			const { error: userProfileError } = await supabase
				.from("user_profiles")
				.update({
					is_online: isOnline,
					last_seen: new Date().toISOString(),
				})
				.eq("id", userId)

			if (!userProfileError) {
				return { error: null }
			}

			// –ï—Å–ª–∏ user_profiles –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º employees
			const { error: employeeError } = await supabase
				.from("employees")
				.update({
					is_online: isOnline,
					last_seen: new Date().toISOString(),
					updated_at: new Date().toISOString(),
				})
				.eq("user_id", userId)

			return { error: employeeError }
		} catch (error) {
			console.error("‚ùå Error updating online status:", error)
			return { error }
		}
		*/
	},
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º supabase –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { supabase }

// –•–µ–ª–ø–µ—Ä-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
export const isUserAdmin = (profile: UserProfile | null): boolean => {
	if (!profile) return false
	return profile.is_admin || profile.role === 'admin'
}
