"use client"

import { useState, useEffect, useRef } from "react"
import { CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { supabase } from "@/lib/supabase"
import { authService } from "@/lib/auth"
import { useAuth } from "@/hooks/use-auth"
import { useToast } from "@/hooks/use-toast"
import PixelButton from "./pixel-button"
import PixelCard from "./pixel-card"
import { Clock, LogIn, LogOut, AlertTriangle, RefreshCw } from "lucide-react"
import { appCache } from "@/lib/cache"

interface WorkSession {
	id: number
	employee_id: string
	date: string
	clock_in_time: string | null
	clock_out_time: string | null
	expected_end_time: string | null
	is_auto_clocked_out: boolean
	total_work_minutes: number
	total_task_minutes: number
	total_idle_minutes: number
}

interface WorkSessionControlsProps {
	onSessionChange?: (isWorking: boolean) => void
}

export default function WorkSessionControls({ onSessionChange }: WorkSessionControlsProps) {
	const { user, profile } = useAuth()
	const { toast } = useToast()
	const [currentSession, setCurrentSession] = useState<WorkSession | null>(null)
	const [loading, setLoading] = useState(false)
	const [currentTime, setCurrentTime] = useState(new Date())
	const [initialLoading, setInitialLoading] = useState(true)
	const [showResumeConfirm, setShowResumeConfirm] = useState(false)
	const timeUpdateRef = useRef<NodeJS.Timeout | undefined>(undefined)

	// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
	useEffect(() => {
		const updateTime = () => {
			setCurrentTime(new Date())
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–∏–¥–∏–º
		const handleVisibilityChange = () => {
			if (document.hidden) {
				if (timeUpdateRef.current) {
					clearInterval(timeUpdateRef.current)
				}
			} else {
				updateTime()
				timeUpdateRef.current = setInterval(updateTime, 60000) // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
			}
		}

		document.addEventListener("visibilitychange", handleVisibilityChange)
		handleVisibilityChange() // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è

		return () => {
			document.removeEventListener("visibilitychange", handleVisibilityChange)
			if (timeUpdateRef.current) {
				clearInterval(timeUpdateRef.current)
			}
		}
	}, [])

	useEffect(() => {
		if (user) {
			fetchCurrentSession()
		}
	}, [user])

	useEffect(() => {
		if (currentSession !== null) {
			onSessionChange?.(!!currentSession?.clock_in_time && !currentSession?.clock_out_time)
		}
	}, [currentSession, onSessionChange])

	const fetchCurrentSession = async () => {
		if (!user) return

		try {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
			const cacheKey = `work_session_${user.id}`
			const cached = appCache.get(cacheKey)
			if (cached) {
				setCurrentSession(cached)
				setInitialLoading(false)
				return
			}

			const { employeeId, error: empError } = await authService.getEmployeeId(user.id)
			if (empError || !employeeId) return

			const today = new Date().toISOString().split("T")[0]

			const { data, error } = await supabase
				.from("work_sessions")
				.select("*")
				.eq("employee_id", employeeId)
				.eq("date", today)
				.maybeSingle()

			if (error) throw error

			setCurrentSession(data)
			appCache.set(cacheKey, data, 2) // –ö—ç—à –Ω–∞ 2 –º–∏–Ω—É—Ç—ã
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–±–æ—á–µ–π —Å–º–µ–Ω—ã:", error)
		} finally {
			setInitialLoading(false)
		}
	}

	const clockIn = async (confirmed = false) => {
		if (!user || !profile || loading) return

		// –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è —Ç–æ–≥–æ –∂–µ –¥–Ω—è –∏ –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
		if (currentSession?.clock_out_time && canResumeWork() && !confirmed) {
			setShowResumeConfirm(true)
			return
		}

		setLoading(true)
		try {
			const { employeeId, error: empError } = await authService.getEmployeeId(user.id)
			if (empError || !employeeId) throw new Error("Employee not found")

			const now = new Date()
			const today = now.toISOString().split("T")[0]
			const workHours = profile.work_hours || 9
			const expectedEndTime = new Date(now.getTime() + workHours * 60 * 60 * 1000)

			let data: WorkSession
			let isResuming = false

			if (currentSession) {
				// –ï—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–Ω—è (—Ç–æ—Ç –∂–µ –¥–µ–Ω—å)
				if (currentSession.clock_out_time && canResumeWork()) {
					isResuming = true

					// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
					const { data: updatedData, error } = await supabase
						.from("work_sessions")
						.update({
							clock_out_time: null,
							end_time: null,
							// –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
						})
						.eq("id", currentSession.id)
						.select()
						.single()

					if (error) throw error
					data = updatedData
				} else if (currentSession.clock_out_time && !canResumeWork()) {
					// –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
					const { data: newData, error } = await supabase
						.from("work_sessions")
						.insert({
							employee_id: employeeId,
							date: today,
							clock_in_time: now.toISOString(),
							expected_end_time: expectedEndTime.toISOString(),
							total_work_minutes: 0,
							total_task_minutes: 0,
							total_idle_minutes: 0,
						})
						.select()
						.single()

					if (error) throw error
					data = newData
				} else {
					// –û–±—ã—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ –¥–Ω—è (–µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Å–µ—Å—Å–∏—è –±–µ–∑ clock_out)
					const { data: updatedData, error } = await supabase
						.from("work_sessions")
						.update({
							clock_in_time: now.toISOString(),
							start_time: now.toISOString(),
							expected_end_time: expectedEndTime.toISOString(),
							is_auto_clocked_out: false,
							total_work_minutes: 0,
							total_task_minutes: 0,
							total_idle_minutes: 0,
						})
						.eq("id", currentSession.id)
						.select()
						.single()

					if (error) throw error
					data = updatedData
				}
			} else {
				// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
				const { data: newData, error } = await supabase
					.from("work_sessions")
					.insert({
						employee_id: employeeId,
						date: today,
						clock_in_time: now.toISOString(),
						expected_end_time: expectedEndTime.toISOString(),
						total_work_minutes: 0,
						total_task_minutes: 0,
						total_idle_minutes: 0,
					})
					.select()
					.single()

				if (error) throw error
				data = newData
			}

			setCurrentSession(data)

			// –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
			const cacheKey = `work_session_${user.id}`
			appCache.set(cacheKey, data, 2)

			// –û–¢–ö–õ–Æ–ß–ï–ù–û: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
			// authService.updateOnlineStatus(user.id, true).catch(console.error)

			onSessionChange?.(true)

			const message = isResuming
				? "–†–∞–±–æ—á–∏–π –¥–µ–Ω—å –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å."
				: `–û–∂–∏–¥–∞–µ–º–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ: ${expectedEndTime.toLocaleTimeString()}`

			toast({
				title: isResuming ? "üîÑ –†–∞–±–æ—á–∏–π –¥–µ–Ω—å –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω!" : "üéØ –†–∞–±–æ—á–∏–π –¥–µ–Ω—å –Ω–∞—á–∞—Ç!",
				description: message,
			})

			// –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
			setShowResumeConfirm(false)
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–∏—Ö–æ–¥–∞:", error)
			toast({
				title: "–û—à–∏–±–∫–∞",
				description: error instanceof Error ? error.message : "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏—Ö–æ–¥",
				variant: "destructive",
			})
			setShowResumeConfirm(false)
		} finally {
			setLoading(false)
		}
	}

	const clockOut = async () => {
		if (!user || !currentSession || loading) return

		setLoading(true)
		try {
			const now = new Date()
			const clockInTime = new Date(currentSession.clock_in_time!)
			const totalWorkMinutes = Math.floor((now.getTime() - clockInTime.getTime()) / 60000)

			// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á
			const { employeeId } = await authService.getEmployeeId(user.id)
			const today = now.toISOString().split("T")[0]

			const { data: taskLogs } = await supabase
				.from("task_logs")
				.select("time_spent_minutes")
				.eq("employee_id", employeeId)
				.eq("work_date", today)

			const totalTaskMinutes = taskLogs?.reduce((sum, log) => sum + log.time_spent_minutes, 0) || 0
			const totalIdleMinutes = Math.max(0, totalWorkMinutes - totalTaskMinutes)

			const { error } = await supabase
				.from("work_sessions")
				.update({
					clock_out_time: now.toISOString(),
					total_work_minutes: totalWorkMinutes,
					total_task_minutes: totalTaskMinutes,
					total_idle_minutes: totalIdleMinutes,
				})
				.eq("id", currentSession.id)

			if (error) throw error

			const updatedSession = {
				...currentSession,
				clock_out_time: now.toISOString(),
				total_work_minutes: totalWorkMinutes,
				total_task_minutes: totalTaskMinutes,
				total_idle_minutes: totalIdleMinutes,
			}

			setCurrentSession(updatedSession)

			// –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
			const cacheKey = `work_session_${user.id}`
			appCache.set(cacheKey, updatedSession, 2)

			// –û–¢–ö–õ–Æ–ß–ï–ù–û: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
			// authService.updateOnlineStatus(user.id, false).catch(console.error)

			onSessionChange?.(false)

			toast({
				title: "üëã –†–∞–±–æ—á–∏–π –¥–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω!",
				description: `–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: ${formatDuration(totalWorkMinutes)}`,
			})
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É—Ö–æ–¥–∞:", error)
			toast({
				title: "–û—à–∏–±–∫–∞",
				description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —É—Ö–æ–¥",
				variant: "destructive",
			})
		} finally {
			setLoading(false)
		}
	}

	const formatDuration = (minutes: number) => {
		const hours = Math.floor(minutes / 60)
		const mins = minutes % 60
		return hours > 0 ? `${hours}—á ${mins}–º` : `${mins}–º`
	}

	const formatTime = (dateStr: string) => {
		return new Date(dateStr).toLocaleTimeString()
	}

	const getWorkingTime = () => {
		if (!currentSession?.clock_in_time) return 0
		const clockInTime = new Date(currentSession.clock_in_time)
		return Math.floor((currentTime.getTime() - clockInTime.getTime()) / 60000)
	}

	const isOvertime = () => {
		if (!currentSession?.expected_end_time) return false
		return currentTime > new Date(currentSession.expected_end_time)
	}

	const canResumeWork = () => {
		if (!currentSession?.clock_out_time) return false

		const now = new Date()
		const today = now.toISOString().split("T")[0]
		const sessionDate = currentSession.date

		console.log('Debug canResumeWork:', {
			hasClockOut: !!currentSession?.clock_out_time,
			today,
			sessionDate,
			canResume: sessionDate === today
		})

		// –ú–æ–∂–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å
		return sessionDate === today
	}

	const getTimeSinceClockOut = () => {
		if (!currentSession?.clock_out_time) return null

		const clockOutTime = new Date(currentSession.clock_out_time)
		const now = new Date()
		const timeSinceClockOut = (now.getTime() - clockOutTime.getTime()) / (1000 * 60) // –≤ –º–∏–Ω—É—Ç–∞—Ö

		const hours = Math.floor(timeSinceClockOut / 60)
		const minutes = Math.floor(timeSinceClockOut % 60)

		return hours > 0 ? `${hours}—á ${minutes}–º –Ω–∞–∑–∞–¥` : `${minutes}–º –Ω–∞–∑–∞–¥`
	}

	const isWorking = currentSession?.clock_in_time && !currentSession?.clock_out_time

	// Debug info
	console.log('Debug WorkSessionControls:', {
		currentSession,
		isWorking,
		canResumeWork: canResumeWork(),
		hasClockOut: !!currentSession?.clock_out_time
	})

	if (initialLoading) {
		return (
			<PixelCard>
				<CardContent className="p-6 text-center">
					<div className="text-4xl animate-spin mb-2">‚è∞</div>
					<div className="text-sm text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
				</CardContent>
			</PixelCard>
		)
	}

	return (
		<PixelCard className={isWorking ? "bg-gradient-to-r from-green-200 to-blue-200" : ""}>
			<CardHeader>
				<CardTitle className="flex items-center gap-2">
					<Clock className="h-5 w-5" />
					–†–∞–±–æ—á–∞—è —Å–º–µ–Ω–∞
				</CardTitle>
				<CardDescription>{isWorking ? "–í—ã –Ω–∞ —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ" : "–û—Ç–º–µ—Ç—å—Ç–µ—Å—å –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã"}</CardDescription>
			</CardHeader>
			<CardContent>
				{!isWorking ? (
					<div className="space-y-4">
						<div className="text-center py-4">
							<div className="text-4xl mb-2">üè¢</div>
							<div className="text-muted-foreground">
								{currentSession?.clock_out_time
									? canResumeWork()
										? "–ú–æ–∂–µ—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å"
										: "–†–∞–±–æ—á–∏–π –¥–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω"
									: "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å?"
								}
							</div>
							{currentSession?.clock_out_time && (
								<div className="text-sm text-muted-foreground mt-2">
									–ó–∞–≤–µ—Ä—à–µ–Ω: {getTimeSinceClockOut()}
								</div>
							)}
						</div>
						<PixelButton
							onClick={() => clockIn(false)}
							disabled={loading}
							className="w-full"
							variant={canResumeWork() ? "default" : "secondary"}
						>
							<LogIn className="h-4 w-4 mr-2" />
							{loading
								? "–û—Ç–º–µ—á–∞–µ–º—Å—è..."
								: currentSession?.clock_out_time
									? canResumeWork()
										? "üîÑ –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å"
										: "–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å"
									: "–ü—Ä–∏—à–µ–ª –Ω–∞ —Ä–∞–±–æ—Ç—É"
							}
						</PixelButton>
						{currentSession?.clock_out_time && canResumeWork() && (
							<div className="text-xs text-center text-blue-600 bg-blue-50 p-2 rounded border border-blue-200">
								üí° –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è
							</div>
						)}
						{currentSession?.clock_out_time && !canResumeWork() && (
							<div className="text-xs text-center text-red-600 bg-red-50 p-2 rounded border border-red-200">
								‚ùå –ù–µ–ª—å–∑—è –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –¥–∞—Ç—ã. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å.
							</div>
						)}
					</div>
				) : (
					<div className="space-y-4">
						<div className="grid grid-cols-2 gap-4 text-sm">
							<div>
								<div className="text-muted-foreground">–ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã</div>
								<div className="font-bold">{formatTime(currentSession.clock_in_time!)}</div>
							</div>
							<div>
								<div className="text-muted-foreground">–û–∂–∏–¥–∞–µ–º—ã–π –∫–æ–Ω–µ—Ü</div>
								<div className="font-bold">{formatTime(currentSession.expected_end_time!)}</div>
							</div>
						</div>

						<div className="text-center">
							<div className="text-2xl font-mono font-bold">{formatDuration(getWorkingTime())}</div>
							<div className="text-sm text-muted-foreground">–æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ</div>
							{isOvertime() && (
								<Badge variant="destructive" className="mt-1">
									<AlertTriangle className="h-3 w-3 mr-1" />
									–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞
								</Badge>
							)}
						</div>

						<PixelButton onClick={clockOut} disabled={loading} className="w-full" variant="danger">
							<LogOut className="h-4 w-4 mr-2" />
							{loading ? "–û—Ç–º–µ—á–∞–µ–º—Å—è..." : "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å"}
						</PixelButton>

						<div className="text-xs text-center text-yellow-600 bg-yellow-50 p-2 rounded border border-yellow-200">
							‚ö†Ô∏è –°–ª—É—á–∞–π–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–µ–Ω—å? –ú–æ–∂–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è
						</div>
					</div>
				)}
			</CardContent>

			{/* –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
			<Dialog open={showResumeConfirm} onOpenChange={setShowResumeConfirm}>
				<DialogContent>
					<DialogHeader>
						<DialogTitle className="flex items-center gap-2">
							<RefreshCw className="h-5 w-5" />
							–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
						</DialogTitle>
						<DialogDescription className="space-y-2">
							<div>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å?</div>
							{currentSession?.clock_out_time && (
								<div className="text-sm text-muted-foreground">
									–ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Ö–æ–¥: {getTimeSinceClockOut()}
								</div>
							)}
							<div className="text-sm text-orange-600 bg-orange-50 p-2 rounded border border-orange-200">
								üí° –ü—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è
							</div>
						</DialogDescription>
					</DialogHeader>
					<DialogFooter>
						<Button variant="outline" onClick={() => setShowResumeConfirm(false)}>
							–û—Ç–º–µ–Ω–∞
						</Button>
						<Button onClick={() => clockIn(true)} disabled={loading}>
							{loading ? "–í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º..." : "–î–∞, –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å"}
						</Button>
					</DialogFooter>
				</DialogContent>
			</Dialog>
		</PixelCard>
	)
}
