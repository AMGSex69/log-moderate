"use client"

import { memo, useMemo } from "react"
import { useOptimizedAuth } from "@/hooks/use-optimized-auth"
import { useOptimizedStats } from "@/hooks/use-optimized-stats"
import { perfMonitor } from "@/lib/performance"

// –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Ç—è–∂–µ–ª—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
const MemoizedStatsCard = memo(({ title, value, icon }: any) => (
  <div className="p-4 text-center">
    <div className="text-2xl mb-2">{icon}</div>
    <div className="text-3xl font-bold">{value}</div>
    <div className="text-sm">{title}</div>
  </div>
))

const MemoizedAchievementCard = memo(({ achievement }: any) => (
  <div className="p-4">
    <div className="flex items-center gap-3">
      <div className="text-3xl">{achievement.icon}</div>
      <div>
        <div className="font-bold">{achievement.name}</div>
        <div className="text-sm text-muted-foreground">{achievement.description}</div>
      </div>
    </div>
  </div>
))

export default function OptimizedProfile() {
  const { user, profile, loading: authLoading } = useOptimizedAuth()
  const { stats, loading: statsLoading } = useOptimizedStats(user?.id)

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
  const computedData = useMemo(() => {
    if (!stats) return null

    const endTimer = perfMonitor.startTimer("profileComputations")

    const result = {
      formattedTime: `${Math.floor(stats.total_time / 60)}—á ${stats.total_time % 60}–º`,
      efficiency: stats.total_tasks > 0 ? Math.round((stats.total_units / stats.total_tasks) * 100) : 0,
      productivity: stats.total_time > 0 ? Math.round(stats.total_units / (stats.total_time / 60)) : 0,
    }

    endTimer()
    return result
  }, [stats])

  if (authLoading || statsLoading) {
    return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
  }

  return (
    <div className="space-y-6">
      {/* –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <MemoizedStatsCard title="–ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ" value={stats?.total_tasks || 0} icon="üéØ" />
        <MemoizedStatsCard title="–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã" value={computedData?.formattedTime || "0—á 0–º"} icon="‚è±Ô∏è" />
        <MemoizedStatsCard title="–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å" value={`${computedData?.efficiency || 0}%`} icon="üìà" />
        <MemoizedStatsCard title="–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å" value={`${computedData?.productivity || 0}/—á`} icon="‚ö°" />
      </div>
    </div>
  )
}
