"use client"

import React, { useState, useRef } from "react"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Button } from "@/components/ui/button"
import PixelButton from "@/components/pixel-button"
import { supabase } from "@/lib/supabase"
import { useAuth } from "@/hooks/use-auth"
import { Upload, Link as LinkIcon, Trash2 } from "lucide-react"
import { useToast } from "@/hooks/use-toast"

interface CompactAvatarUploadProps {
	currentUrl?: string
	fullName: string
	onAvatarChange: (newUrl: string) => void
}

export default function CompactAvatarUpload({ currentUrl, fullName, onAvatarChange }: CompactAvatarUploadProps) {
	const { user } = useAuth()
	const { toast } = useToast()
	const fileInputRef = useRef<HTMLInputElement>(null)

	const [uploading, setUploading] = useState(false)

	const initials = fullName.split(' ').map(n => n[0]).join('').toUpperCase() || '–£'

	const uploadAvatar = async (file: File) => {
		if (!user) return

		try {
			setUploading(true)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å 2MB)
			if (file.size > 2 * 1024 * 1024) {
				toast({
					title: "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π",
					description: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 2MB",
					variant: "destructive",
				})
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
			if (!file.type.startsWith('image/')) {
				toast({
					title: "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞",
					description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
					variant: "destructive",
				})
				return
			}

			// –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
			const fileExt = file.name.split('.').pop()
			const fileName = `${user.id}-${Date.now()}.${fileExt}`
			const filePath = `avatars/${fileName}`

			// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∞–≤–∞—Ç–∞—Ä –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
			if (currentUrl && currentUrl.includes(process.env.NEXT_PUBLIC_SUPABASE_URL || '')) {
				const oldPath = currentUrl.split('/').pop()
				if (oldPath && oldPath.includes(user.id)) {
					await supabase.storage.from('avatars').remove([`avatars/${oldPath}`])
				}
			}

			// –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
			const { error: uploadError } = await supabase.storage
				.from('avatars')
				.upload(filePath, file)

			if (uploadError) throw uploadError

			// –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É
			const { data } = supabase.storage
				.from('avatars')
				.getPublicUrl(filePath)

			const newAvatarUrl = data.publicUrl

			// –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä
			onAvatarChange(newAvatarUrl)

			toast({
				title: "‚úÖ –ê–≤–∞—Ç–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!",
				description: "–í–∞—à –∞–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω",
			})

		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', error)
			toast({
				title: "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
				description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä",
				variant: "destructive",
			})
		} finally {
			setUploading(false)
		}
	}

	const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
		const file = event.target.files?.[0]
		if (file) {
			uploadAvatar(file)
		}
	}

	const removeAvatar = async () => {
		if (!currentUrl) return

		try {
			setUploading(true)

			// –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ storage –µ—Å–ª–∏ –æ–Ω –Ω–∞—à
			if (currentUrl.includes(process.env.NEXT_PUBLIC_SUPABASE_URL || '')) {
				const oldPath = currentUrl.split('/').pop()
				if (oldPath && oldPath.includes(user!.id)) {
					await supabase.storage.from('avatars').remove([`avatars/${oldPath}`])
				}
			}

			onAvatarChange("")

			toast({
				title: "‚úÖ –ê–≤–∞—Ç–∞—Ä —É–¥–∞–ª–µ–Ω",
				description: "–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
			})

		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞:', error)
			toast({
				title: "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è",
				description: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä",
				variant: "destructive",
			})
		} finally {
			setUploading(false)
		}
	}

	return (
		<div className="bg-white border-2 border-black p-4 shadow-[2px_2px_0px_0px_rgba(0,0,0,1)]">
			<div className="flex items-center gap-4">
				{/* –¢–µ–∫—É—â–∏–π –∞–≤–∞—Ç–∞—Ä */}
				<Avatar className="h-20 w-20 border-2 border-black">
					<AvatarImage src={currentUrl} />
					<AvatarFallback className="bg-gradient-to-r from-blue-400 to-purple-500 text-white text-2xl font-bold">
						{initials}
					</AvatarFallback>
				</Avatar>

				{/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
				<div className="flex flex-col gap-2">
					<input
						type="file"
						ref={fileInputRef}
						onChange={handleFileChange}
						accept="image/*"
						className="hidden"
					/>

					<PixelButton
						onClick={() => fileInputRef.current?.click()}
						disabled={uploading}
						className="text-sm px-3 py-2"
					>
						{uploading ? "‚è≥" : "üìÅ"} {uploading ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : "–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª"}
					</PixelButton>

					{currentUrl && (
						<PixelButton
							onClick={removeAvatar}
							variant="danger"
							disabled={uploading}
							className="text-sm px-3 py-2"
						>
							üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
						</PixelButton>
					)}
				</div>
			</div>

			<p className="text-xs text-gray-600 mt-2 font-mono">
				üí° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 2MB. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, GIF, WebP
			</p>
		</div>
	)
} 