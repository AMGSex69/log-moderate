"use client"

import type React from "react"

import { useState, useRef } from "react"
import { Gift, Sparkles, X } from "lucide-react"
import PixelCard from "./pixel-card"
import PixelButton from "./pixel-button"

export interface Prize {
	id: string
	name: string
	description: string
	icon: string
	rarity: "common" | "rare" | "epic" | "legendary"
	weight: number // –í–µ—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
	color: string
}

const PRIZES: Prize[] = [
	// –û–±—ã—á–Ω—ã–µ –ø—Ä–∏–∑—ã (70% —à–∞–Ω—Å) - —à—É—Ç–æ—á–Ω—ã–µ –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–µ
	{
		id: "coffee_boss",
		name: "–ö–æ—Ñ–µ –æ—Ç –±–æ—Å—Å–∞",
		description: "–ù–∞—á–∞–ª—å–Ω–∏–∫ –ª–∏—á–Ω–æ –ø—Ä–∏–Ω–µ—Å–µ—Ç –∫–æ—Ñ–µ",
		icon: "‚òï",
		rarity: "common",
		weight: 18,
		color: "#8B4513",
	},
	{
		id: "compliment",
		name: "–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç",
		description: "–ò—Å–∫—Ä–µ–Ω–Ω–∏–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –æ—Ç –∫–æ–ª–ª–µ–≥–∏",
		icon: "üòä",
		rarity: "common",
		weight: 16,
		color: "#FFB6C1",
	},
	{
		id: "meme",
		name: "–ú–µ–º –¥–Ω—è",
		description: "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–º –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ",
		icon: "üòÇ",
		rarity: "common",
		weight: 15,
		color: "#98FB98",
	},
	{
		id: "playlist",
		name: "–ü–ª–µ–π–ª–∏—Å—Ç",
		description: "–¢–≤–æ—è –º—É–∑—ã–∫–∞ –≤ –æ—Ñ–∏—Å–µ –Ω–∞ —á–∞—Å",
		icon: "üéµ",
		rarity: "common",
		weight: 12,
		color: "#DDA0DD",
	},
	{
		id: "snack_delivery",
		name: "–î–æ—Å—Ç–∞–≤–∫–∞ –ø–µ—á–µ–Ω–µ–∫",
		description: "–ö–æ–ª–ª–µ–≥–∞ –ø—Ä–∏–Ω–µ—Å–µ—Ç –ø–µ—á–µ–Ω—å–∫–∏ –∫ —Å—Ç–æ–ª—É",
		icon: "üç™",
		rarity: "common",
		weight: 9,
		color: "#F4A460",
	},

	// –†–µ–¥–∫–∏–µ –ø—Ä–∏–∑—ã (22% —à–∞–Ω—Å) - —Ç–æ–∂–µ —à—É—Ç–æ—á–Ω—ã–µ –Ω–æ —á—É—Ç—å –ª—É—á—à–µ
	{
		id: "lunch_choice",
		name: "–í—ã–±–æ—Ä –æ–±–µ–¥–∞",
		description: "–¢—ã —Ä–µ—à–∞–µ—à—å —á—Ç–æ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –æ–±–µ–¥ –∫–æ–º–∞–Ω–¥–µ",
		icon: "üçï",
		rarity: "rare",
		weight: 7,
		color: "#FF6347",
	},
	{
		id: "parking_king",
		name: "–ö–æ—Ä–æ–ª—å –ø–∞—Ä–∫–æ–≤–∫–∏",
		description: "–õ—É—á—à–µ–µ –º–µ—Å—Ç–æ –Ω–∞ –ø–∞—Ä–∫–æ–≤–∫–µ –Ω–∞ –Ω–µ–¥–µ–ª—é",
		icon: "üëë",
		rarity: "rare",
		weight: 5,
		color: "#FFD700",
	},
	{
		id: "meeting_skip",
		name: "–ü—Ä–æ–ø—É—Å–∫ —Å–æ–≤–µ—â–∞–Ω–∏—è",
		description: "–ú–æ–∂–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–¥–Ω–æ —Å–∫—É—á–Ω–æ–µ —Å–æ–≤–µ—â–∞–Ω–∏–µ",
		icon: "üèÉ‚Äç‚ôÇÔ∏è",
		rarity: "rare",
		weight: 4,
		color: "#32CD32",
	},
	{
		id: "office_dj",
		name: "–û—Ñ–∏—Å–Ω—ã–π DJ",
		description: "–ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –º—É–∑—ã–∫–æ–π –≤ –æ—Ñ–∏—Å–µ –Ω–∞ –¥–µ–Ω—å",
		icon: "üéß",
		rarity: "rare",
		weight: 3,
		color: "#9370DB",
	},
	{
		id: "dress_code_free",
		name: "–°–≤–æ–±–æ–¥–Ω—ã–π –¥—Ä–µ—Å—Å-–∫–æ–¥",
		description: "–ú–æ–∂–µ—à—å –ø—Ä–∏–π—Ç–∏ –≤ —á–µ–º —É–≥–æ–¥–Ω–æ –Ω–∞ –Ω–µ–¥–µ–ª—é",
		icon: "üëï",
		rarity: "rare",
		weight: 3,
		color: "#20B2AA",
	},

	// –≠–ø–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑—ã (2.5% —à–∞–Ω—Å) - –æ—á–µ–Ω—å –∫—Ä—É—Ç—ã–µ
	{
		id: "free_lunch",
		name: "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ–±–µ–¥",
		description: "–û–±–µ–¥ –∑–∞ —Å—á–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –≤ —Ö–æ—Ä–æ—à–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ",
		icon: "üçΩÔ∏è",
		rarity: "epic",
		weight: 1.5,
		color: "#FF4500",
	},
	{
		id: "power_nap",
		name: "–ß–∞—Å —Å–Ω–∞",
		description: "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —á–∞—Å —Å–Ω–∞ –Ω–∞ —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ",
		icon: "üò¥",
		rarity: "epic",
		weight: 1,
		color: "#8A2BE2",
	},

	// –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ø—Ä–∏–∑ (0.5% —à–∞–Ω—Å) - —Å–µ—Ä—å–µ–∑–Ω—ã–π
	{
		id: "day_off",
		name: "–í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å",
		description: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π –≤—ã—Ö–æ–¥–Ω–æ–π",
		icon: "üèñÔ∏è",
		rarity: "legendary",
		weight: 0.5,
		color: "#FF1493",
	},
]

interface PrizeWheelProps {
	currentCoins?: number
	isOpen?: boolean
	onClose: () => void
	onPrizeWon?: (prize: Prize) => void
	onCoinsSpent?: (amount: number) => void
}

export default function PrizeWheel({ currentCoins, isOpen = true, onClose, onPrizeWon, onCoinsSpent }: PrizeWheelProps) {
	const [isSpinning, setIsSpinning] = useState(false)
	const [selectedPrize, setSelectedPrize] = useState<Prize | null>(null)
	const [rotation, setRotation] = useState(0)
	const wheelRef = useRef<HTMLDivElement>(null)

	const totalWeight = PRIZES.reduce((sum, prize) => sum + prize.weight, 0)
	const segmentAngle = 360 / PRIZES.length

	const selectRandomPrize = (): Prize => {
		const random = Math.random() * totalWeight
		let currentWeight = 0

		for (const prize of PRIZES) {
			currentWeight += prize.weight
			if (random <= currentWeight) {
				return prize
			}
		}

		return PRIZES[0] // Fallback
	}

	const spinWheel = () => {
		if (isSpinning) return

		setIsSpinning(true)
		setSelectedPrize(null)

		const prize = selectRandomPrize()
		const prizeIndex = PRIZES.findIndex((p) => p.id === prize.id)

		// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≥–æ–ª –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–∏–∑–µ
		const targetAngle = 360 - prizeIndex * segmentAngle - segmentAngle / 2
		const spins = 5 + Math.random() * 3 // 5-8 –ø–æ–ª–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤
		const finalRotation = rotation + spins * 360 + targetAngle

		setRotation(finalRotation)

		// –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
		setTimeout(() => {
			setSelectedPrize(prize)
			setIsSpinning(false)
			onPrizeWon?.(prize)
			// –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
		}, 4000)
	}

	const getRarityColor = (rarity: string) => {
		switch (rarity) {
			case "common":
				return "from-gray-400 to-gray-600"
			case "rare":
				return "from-blue-400 to-blue-600"
			case "epic":
				return "from-purple-400 to-purple-600"
			case "legendary":
				return "from-yellow-400 to-yellow-600"
			default:
				return "from-gray-400 to-gray-600"
		}
	}

	const handleBackdropClick = (e: React.MouseEvent) => {
		// –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Ñ–æ–Ω
		e.stopPropagation()
	}

	const handleModalClick = (e: React.MouseEvent) => {
		e.stopPropagation()
	}

	if (!isOpen) return null

	return (
		<div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4" onClick={handleBackdropClick}>
			<PixelCard className="w-full max-w-4xl relative">
				<div onClick={handleModalClick}>
					{/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è */}
					<button
						onClick={onClose}
						className="absolute top-4 right-4 z-20 p-2 rounded-full bg-gray-200 hover:bg-gray-300 transition-colors"
					>
						<X className="h-5 w-5" />
					</button>

					<div className="p-8 text-center">
						<div className="flex items-center justify-center gap-2 mb-8">
							<Gift className="h-8 w-8 text-yellow-500" />
							<h2 className="text-3xl font-bold">üé∞ –ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã</h2>
							<Sparkles className="h-8 w-8 text-yellow-500" />
						</div>

						<div className="relative w-96 h-96 mx-auto mb-8">
							{/* –ö—Ä–∞—Å–∏–≤–∞—è —Å—Ç—Ä–µ–ª–∫–∞ —Å 3D —ç—Ñ—Ñ–µ–∫—Ç–æ–º */}
							<div className="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-6 z-20">
								<div className="relative">
									{/* –¢–µ–Ω—å —Å—Ç—Ä–µ–ª–∫–∏ */}
									<div
										className="absolute top-2 left-2 opacity-30"
										style={{
											width: 0,
											height: 0,
											borderLeft: "12px solid transparent",
											borderRight: "12px solid transparent",
											borderBottom: "24px solid #000000",
										}}
									></div>

									{/* –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ - —Ç–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω–∞—è */}
									<div
										className="relative"
										style={{
											width: 0,
											height: 0,
											borderLeft: "12px solid transparent",
											borderRight: "12px solid transparent",
											borderBottom: "24px solid #DC2626",
										}}
									></div>

									{/* –ë–ª–∏–∫ –Ω–∞ —Å—Ç—Ä–µ–ª–∫–µ - —Å–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π */}
									<div
										className="absolute top-1 left-1/2 transform -translate-x-1/2"
										style={{
											width: 0,
											height: 0,
											borderLeft: "4px solid transparent",
											borderRight: "4px solid transparent",
											borderBottom: "8px solid #FCA5A5",
										}}
									></div>

									{/* –ë–µ–ª—ã–π –±–ª–∏–∫ –¥–ª—è 3D —ç—Ñ—Ñ–µ–∫—Ç–∞ */}
									<div
										className="absolute top-0.5 left-1/2 transform -translate-x-1/2"
										style={{
											width: 0,
											height: 0,
											borderLeft: "2px solid transparent",
											borderRight: "2px solid transparent",
											borderBottom: "4px solid #FFFFFF",
										}}
									></div>
								</div>
							</div>

							{/* –ö–æ–ª–µ—Å–æ */}
							<div
								ref={wheelRef}
								className="w-full h-full rounded-full border-8 border-yellow-500 relative overflow-hidden shadow-2xl"
								style={{
									transform: `rotate(${rotation}deg)`,
									transition: isSpinning ? "transform 4s cubic-bezier(0.23, 1, 0.32, 1)" : "none",
								}}
							>
								{PRIZES.map((prize, index) => {
									const angle = index * segmentAngle

									return (
										<div
											key={prize.id}
											className="absolute w-full h-full"
											style={{
												transform: `rotate(${angle}deg)`,
												clipPath: `polygon(50% 50%, 50% 0%, ${50 + 50 * Math.sin((segmentAngle * Math.PI) / 180)}% ${50 - 50 * Math.cos((segmentAngle * Math.PI) / 180)}%)`,
											}}
										>
											<div
												className={`w-full h-full bg-gradient-to-r ${getRarityColor(prize.rarity)} border-r border-white/30`}
												style={{ backgroundColor: prize.color }}
											>
												{/* –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–∫–æ–Ω–∫–∏ –∏ —Ç–µ–∫—Å—Ç - —Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã */}
											</div>
										</div>
									)
								})}
							</div>

							{/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ */}
							<div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-10">
								<PixelButton
									onClick={spinWheel}
									disabled={isSpinning}
									className="w-20 h-20 rounded-full bg-gradient-to-r from-yellow-400 to-yellow-600 text-white font-bold shadow-lg"
								>
									<span className="text-2xl">{isSpinning ? "üé≤" : "üéØ"}</span>
								</PixelButton>
							</div>
						</div>

						{/* –†–µ–∑—É–ª—å—Ç–∞—Ç */}
						{selectedPrize && (
							<div className="mb-8 p-6 bg-gradient-to-r from-green-100 to-green-200 rounded-lg border-2 border-green-300 shadow-lg">
								<div className="text-6xl mb-4">{selectedPrize.icon}</div>
								<h3 className="text-2xl font-bold text-green-800 mb-2">{selectedPrize.name}</h3>
								<p className="text-green-700 text-lg mb-3">{selectedPrize.description}</p>
								<div
									className={`inline-block px-4 py-2 rounded-full text-sm font-bold bg-gradient-to-r ${getRarityColor(selectedPrize.rarity)} text-white`}
								>
									{selectedPrize.rarity.toUpperCase()}
								</div>
							</div>
						)}

						{/* –ö–Ω–æ–ø–∫–∏ */}
						<div className="flex gap-6 justify-center">
							{!selectedPrize && (
								<PixelButton onClick={spinWheel} disabled={isSpinning} variant="success" className="px-10 py-4 text-lg">
									{isSpinning ? "–ö—Ä—É—Ç–∏—Ç—Å—è..." : "–ö—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ! üé∞"}
								</PixelButton>
							)}

							{selectedPrize && (
								<PixelButton onClick={spinWheel} disabled={isSpinning} variant="success" className="px-10 py-4 text-lg">
									–ö—Ä—É—Ç–∏—Ç—å –µ—â–µ —Ä–∞–∑! üé∞
								</PixelButton>
							)}

							<PixelButton onClick={onClose} variant="secondary" className="px-8 py-4">
								–ó–∞–∫—Ä—ã—Ç—å
							</PixelButton>
						</div>

						{/* –õ–µ–≥–µ–Ω–¥–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏ */}
						<div className="mt-8 text-sm text-gray-600">
							<div className="flex justify-center gap-6 flex-wrap">
								<span className="flex items-center gap-2">
									<div className="w-4 h-4 bg-gradient-to-r from-gray-400 to-gray-600 rounded"></div>
									–û–±—ã—á–Ω—ã–π (70%)
								</span>
								<span className="flex items-center gap-2">
									<div className="w-4 h-4 bg-gradient-to-r from-blue-400 to-blue-600 rounded"></div>
									–†–µ–¥–∫–∏–π (22%)
								</span>
								<span className="flex items-center gap-2">
									<div className="w-4 h-4 bg-gradient-to-r from-purple-400 to-purple-600 rounded"></div>
									–≠–ø–∏—á–µ—Å–∫–∏–π (2.5%)
								</span>
								<span className="flex items-center gap-2">
									<div className="w-4 h-4 bg-gradient-to-r from-yellow-400 to-yellow-600 rounded"></div>
									–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π (0.5%)
								</span>
							</div>
						</div>
					</div>
				</div>
			</PixelCard>
		</div>
	)
}
