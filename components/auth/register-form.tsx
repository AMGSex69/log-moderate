"use client"

import type React from "react"

import { useState } from "react"
import { CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { useToast } from "@/hooks/use-toast"
import { useAuth } from "@/hooks/use-auth"
import PixelCard from "@/components/pixel-card"
import { Button } from "@/components/ui/button"
import { cn } from "@/lib/utils"
import { Eye, EyeOff, UserPlus } from "lucide-react"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"

interface RegisterFormProps {
	onSwitchToLogin: () => void
}

export default function RegisterForm({ onSwitchToLogin }: RegisterFormProps) {
	const [email, setEmail] = useState("")
	const [password, setPassword] = useState("")
	const [confirmPassword, setConfirmPassword] = useState("")
	const [fullName, setFullName] = useState("")
	const [workSchedule, setWorkSchedule] = useState("")
	const [showPassword, setShowPassword] = useState(false)
	const [loading, setLoading] = useState(false)
	const { signUp } = useAuth()
	const { toast } = useToast()

	const handleSubmit = async (e: React.FormEvent) => {
		e.preventDefault()

		if (!email || !password || !fullName || !confirmPassword) {
			toast({
				title: "–û—à–∏–±–∫–∞",
				description: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è",
				variant: "destructive",
			})
			return
		}

		if (!workSchedule) {
			toast({
				title: "–û—à–∏–±–∫–∞",
				description: "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã",
				variant: "destructive",
			})
			return
		}

		if (password !== confirmPassword) {
			toast({
				title: "–û—à–∏–±–∫–∞",
				description: "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç",
				variant: "destructive",
			})
			return
		}

		if (password.length < 6) {
			toast({
				title: "–û—à–∏–±–∫–∞",
				description: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤",
				variant: "destructive",
			})
			return
		}

		setLoading(true)

		const { error } = await signUp(email, password, fullName, workSchedule)

		if (error) {
			console.error("Registration error:", error)

			let errorMessage = error.message

			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
			if (error.message?.includes('500') || error.message?.includes('Internal Server Error')) {
				errorMessage = "–ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
			} else if (error.message?.includes('Email rate limit exceeded')) {
				errorMessage = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
			} else if (error.message?.includes('User already registered')) {
				errorMessage = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
			} else if (error.message?.includes('Invalid email')) {
				errorMessage = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email –∞–¥—Ä–µ—Å–∞"
			} else if (error.message?.includes('Password should be at least')) {
				errorMessage = "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤"
			}

			toast({
				title: "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
				description: errorMessage,
				variant: "destructive",
			})
		} else {
			toast({
				title: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!",
				description: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
			})
			// –ù–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ª–æ–≥–∏–Ω, –ø–æ—Å–∫–æ–ª—å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω
		}

		setLoading(false)
	}

	return (
		<PixelCard className="w-full max-w-md">
			<CardHeader className="text-center">
				<div className="text-6xl mb-4">üéÆ</div>
				<CardTitle className="text-2xl">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</CardTitle>
				<CardDescription>–°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã</CardDescription>
			</CardHeader>
			<CardContent>
				<form onSubmit={handleSubmit} className="space-y-4">
					<div className="space-y-2">
						<Label htmlFor="fullName">–ü–æ–ª–Ω–æ–µ –∏–º—è</Label>
						<Input
							id="fullName"
							type="text"
							value={fullName}
							onChange={(e) => setFullName(e.target.value)}
							placeholder="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
							className="border-2 border-black"
							disabled={loading}
						/>
					</div>

					<div className="space-y-2">
						<Label htmlFor="workSchedule">–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã</Label>
						<Select value={workSchedule} onValueChange={setWorkSchedule} disabled={loading}>
							<SelectTrigger className="border-2 border-black">
								<SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã" />
							</SelectTrigger>
							<SelectContent>
								<SelectItem value="8+1">8 —á–∞—Å–æ–≤ + 1 —á–∞—Å –æ–±–µ–¥</SelectItem>
								<SelectItem value="12">12 —á–∞—Å–æ–≤</SelectItem>
							</SelectContent>
						</Select>
					</div>

					<div className="space-y-2">
						<Label htmlFor="email">Email</Label>
						<Input
							id="email"
							type="email"
							value={email}
							onChange={(e) => setEmail(e.target.value)}
							placeholder="your@email.com"
							className="border-2 border-black"
							disabled={loading}
						/>
					</div>

					<div className="space-y-2">
						<Label htmlFor="password">–ü–∞—Ä–æ–ª—å</Label>
						<div className="relative">
							<Input
								id="password"
								type={showPassword ? "text" : "password"}
								value={password}
								onChange={(e) => setPassword(e.target.value)}
								placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
								className="border-2 border-black pr-10"
								disabled={loading}
							/>
							<button
								type="button"
								onClick={() => setShowPassword(!showPassword)}
								className="absolute right-3 top-1/2 transform -translate-y-1/2"
								disabled={loading}
							>
								{showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
							</button>
						</div>
					</div>

					<div className="space-y-2">
						<Label htmlFor="confirmPassword">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</Label>
						<Input
							id="confirmPassword"
							type={showPassword ? "text" : "password"}
							value={confirmPassword}
							onChange={(e) => setConfirmPassword(e.target.value)}
							placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
							className="border-2 border-black"
							disabled={loading}
						/>
					</div>

					<Button
						type="submit"
						className={cn(
							"w-full border-4 border-b-8 text-white font-bold",
							"shadow-[4px_4px_0px_0px_rgba(0,0,0,1)]",
							"hover:shadow-[6px_6px_0px_0px_rgba(0,0,0,1)]",
							"hover:translate-x-[-2px] hover:translate-y-[-2px]",
							"active:shadow-[2px_2px_0px_0px_rgba(0,0,0,1)]",
							"active:translate-x-[2px] active:translate-y-[2px]",
							"disabled:opacity-50 disabled:cursor-not-allowed",
							"transition-all duration-100",
							"bg-blue-500 hover:bg-blue-600 border-blue-700",
							"px-4 py-2"
						)}
						disabled={loading}
					>
						<UserPlus className="h-4 w-4 mr-2" />
						{loading ? "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è..." : "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"}
					</Button>

					<div className="text-center">
						<button
							type="button"
							onClick={onSwitchToLogin}
							className="text-sm text-blue-600 hover:text-blue-800 underline"
							disabled={loading}
						>
							–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π—Ç–∏
						</button>
					</div>
				</form>
			</CardContent>
		</PixelCard>
	)
}
