"use client"

import type React from "react"

import { useState } from "react"
import { CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { useToast } from "@/hooks/use-toast"
import { useAuth } from "@/hooks/use-auth"
import PixelCard from "@/components/pixel-card"
import PixelButton from "@/components/pixel-button"
import { Eye, EyeOff, UserPlus } from "lucide-react"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"

interface RegisterFormProps {
  onSwitchToLogin: () => void
}

export default function RegisterForm({ onSwitchToLogin }: RegisterFormProps) {
  const [email, setEmail] = useState("")
  const [password, setPassword] = useState("")
  const [confirmPassword, setConfirmPassword] = useState("")
  const [fullName, setFullName] = useState("")
  const [workSchedule, setWorkSchedule] = useState("")
  const [showPassword, setShowPassword] = useState(false)
  const [loading, setLoading] = useState(false)
  const { signUp } = useAuth()
  const { toast } = useToast()

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    if (!email || !password || !fullName || !confirmPassword) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è",
        variant: "destructive",
      })
      return
    }

    if (!workSchedule) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã",
        variant: "destructive",
      })
      return
    }

    if (password !== confirmPassword) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç",
        variant: "destructive",
      })
      return
    }

    if (password.length < 6) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤",
        variant: "destructive",
      })
      return
    }

    setLoading(true)

    const { error } = await signUp(email, password, fullName, workSchedule)

    if (error) {
      toast({
        title: "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
        description: error.message,
        variant: "destructive",
      })
    } else {
      toast({
        title: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!",
        description: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞",
      })
      onSwitchToLogin()
    }

    setLoading(false)
  }

  return (
    <PixelCard className="w-full max-w-md">
      <CardHeader className="text-center">
        <div className="text-6xl mb-4">üéÆ</div>
        <CardTitle className="text-2xl">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</CardTitle>
        <CardDescription>–°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã</CardDescription>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="fullName">–ü–æ–ª–Ω–æ–µ –∏–º—è</Label>
            <Input
              id="fullName"
              type="text"
              value={fullName}
              onChange={(e) => setFullName(e.target.value)}
              placeholder="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
              className="border-2 border-black"
              disabled={loading}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="workSchedule">–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã</Label>
            <Select value={workSchedule} onValueChange={setWorkSchedule} disabled={loading}>
              <SelectTrigger className="border-2 border-black">
                <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="8+1">8 —á–∞—Å–æ–≤ + 1 —á–∞—Å –æ–±–µ–¥</SelectItem>
                <SelectItem value="12">12 —á–∞—Å–æ–≤</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label htmlFor="email">Email</Label>
            <Input
              id="email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder="your@email.com"
              className="border-2 border-black"
              disabled={loading}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="password">–ü–∞—Ä–æ–ª—å</Label>
            <div className="relative">
              <Input
                id="password"
                type={showPassword ? "text" : "password"}
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                className="border-2 border-black pr-10"
                disabled={loading}
              />
              <button
                type="button"
                onClick={() => setShowPassword(!showPassword)}
                className="absolute right-3 top-1/2 transform -translate-y-1/2"
                disabled={loading}
              >
                {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
              </button>
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="confirmPassword">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</Label>
            <Input
              id="confirmPassword"
              type={showPassword ? "text" : "password"}
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
              className="border-2 border-black"
              disabled={loading}
            />
          </div>

          <PixelButton type="submit" className="w-full" disabled={loading}>
            <UserPlus className="h-4 w-4 mr-2" />
            {loading ? "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è..." : "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"}
          </PixelButton>

          <div className="text-center">
            <button
              type="button"
              onClick={onSwitchToLogin}
              className="text-sm text-blue-600 hover:text-blue-800 underline"
              disabled={loading}
            >
              –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π—Ç–∏
            </button>
          </div>
        </form>
      </CardContent>
    </PixelCard>
  )
}
