"use client"

import { useState, useEffect, useRef, useCallback } from "react"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import {
	Dialog,
	DialogContent,
	DialogDescription,
	DialogFooter,
	DialogHeader,
	DialogTitle,
} from "@/components/ui/dialog"
import PixelButton from "./pixel-button"
import PixelCard from "./pixel-card"
import { supabase } from "@/lib/supabase"
import { authService } from "@/lib/auth"
import { useAuth } from "@/hooks/use-auth"
import { useToast } from "@/hooks/use-toast"
import { Clock, Play, Pause, LogOut, AlertTriangle, CheckCircle, Briefcase } from "lucide-react"

interface WorkSessionData {
	id?: string
	clockInTime: Date | null
	clockOutTime: Date | null
	expectedEndTime: Date | null
	isPaused: boolean
	pauseStartTime: Date | null
	totalWorkMinutes: number
	totalBreakMinutes: number
	overtimeMinutes: number
	isAutoClockOut: boolean
}

interface WorkingEmployee {
	id: string
	full_name: string
	clock_in_time: string
	expected_end_time: string | null
	is_paused: boolean
	current_task?: string
	work_time_minutes: number
}

interface WorkSessionEnhancedProps {
	onSessionChange: (isWorking: boolean) => void
}

export default function WorkSessionEnhanced({ onSessionChange }: WorkSessionEnhancedProps) {
	const { user, profile } = useAuth()
	const { toast } = useToast()

	const [sessionData, setSessionData] = useState<WorkSessionData>({
		clockInTime: null,
		clockOutTime: null,
		expectedEndTime: null,
		isPaused: false,
		pauseStartTime: null,
		totalWorkMinutes: 0,
		totalBreakMinutes: 0,
		overtimeMinutes: 0,
		isAutoClockOut: false,
	})

	const [workingEmployees, setWorkingEmployees] = useState<WorkingEmployee[]>([])
	const [loading, setLoading] = useState(true)
	const [showEndDialog, setShowEndDialog] = useState(false)
	const [currentTime, setCurrentTime] = useState(new Date())

	// Refs –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
	const sessionLoadingRef = useRef(false)
	const employeesLoadingRef = useRef(false)
	const lastSessionLoad = useRef(0)
	const lastEmployeesLoad = useRef(0)

	// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
	useEffect(() => {
		const interval = setInterval(() => {
			setCurrentTime(new Date())
		}, 1000)
		return () => clearInterval(interval)
	}, [])

	// –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
	const loadSessionData = useCallback(async () => {
		if (!user || sessionLoadingRef.current) return

		// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–Ω–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ 5 —Å–µ–∫—É–Ω–¥)
		const now = Date.now()
		if (now - lastSessionLoad.current < 5000) return

		sessionLoadingRef.current = true
		lastSessionLoad.current = now

		try {
			setLoading(true)
			console.log("üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user.id)

			const { employeeId, error: empError } = await authService.getEmployeeId(user.id)
			if (empError || !employeeId) {
				console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è employee_id:", empError)
				return
			}

			console.log("‚úÖ Employee ID –Ω–∞–π–¥–µ–Ω:", employeeId)

			const today = new Date().toISOString().split("T")[0]
			console.log("üìÖ –ò—â–µ–º —Å–µ—Å—Å–∏—é –Ω–∞ –¥–∞—Ç—É:", today)

			const { data: session, error: sessionError } = await supabase
				.from("work_sessions")
				.select("*")
				.eq("employee_id", employeeId)
				.eq("date", today)
				.single()

			if (sessionError && sessionError.code !== "PGRST116") {
				console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏:", sessionError)
				throw sessionError
			}

			console.log("üìä –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏:", session)

			if (session) {
				const workHours = getWorkHours()
				const expectedEnd = session.clock_in_time
					? new Date(new Date(session.clock_in_time).getTime() + workHours * 60 * 60 * 1000)
					: null

				setSessionData({
					id: session.id,
					clockInTime: session.clock_in_time ? new Date(session.clock_in_time) : null,
					clockOutTime: session.clock_out_time ? new Date(session.clock_out_time) : null,
					expectedEndTime: expectedEnd,
					isPaused: session.is_paused || false,
					pauseStartTime: session.pause_start_time ? new Date(session.pause_start_time) : null,
					totalWorkMinutes: session.total_work_minutes || 0,
					totalBreakMinutes: session.total_break_minutes || 0,
					overtimeMinutes: session.overtime_minutes || 0,
					isAutoClockOut: session.is_auto_clocked_out || false,
				})

				// –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ —Å—Ç–∞—Ç—É—Å–µ —Ä–∞–±–æ—Ç—ã
				const isWorking = session.clock_in_time && !session.clock_out_time
				onSessionChange(isWorking)
				console.log("üéØ –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã:", isWorking ? "–†–∞–±–æ—Ç–∞–µ—Ç" : "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
			} else {
				console.log("üìù –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é")
				setSessionData({
					clockInTime: null,
					clockOutTime: null,
					expectedEndTime: null,
					isPaused: false,
					pauseStartTime: null,
					totalWorkMinutes: 0,
					totalBreakMinutes: 0,
					overtimeMinutes: 0,
					isAutoClockOut: false,
				})
				onSessionChange(false)
			}
		} catch (error) {
			console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏:", error)
			toast({
				title: "–û—à–∏–±–∫–∞",
				description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—á–µ–π —Å–º–µ–Ω—ã",
				variant: "destructive" as const,
			})
		} finally {
			setLoading(false)
			sessionLoadingRef.current = false
		}
	}, [user, onSessionChange, toast])

	// –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
	const loadWorkingEmployees = useCallback(async () => {
		if (employeesLoadingRef.current) return

		// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–Ω–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ 10 —Å–µ–∫—É–Ω–¥)
		const now = Date.now()
		if (now - lastEmployeesLoad.current < 10000) return

		employeesLoadingRef.current = true
		lastEmployeesLoad.current = now

		try {
			console.log("üë• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...")

			const today = new Date().toISOString().split("T")[0]

			// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å - —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—á–∏–µ —Å–µ—Å—Å–∏–∏
			const { data: workingSessions, error: sessionsError } = await supabase
				.from("work_sessions")
				.select("employee_id, clock_in_time, expected_end_time, is_paused, total_break_minutes")
				.eq("date", today)
				.not("clock_in_time", "is", null)
				.is("clock_out_time", null)

			if (sessionsError) {
				console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π:", sessionsError)
				return
			}

			console.log("üíº –ù–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å–µ—Å—Å–∏–π:", workingSessions?.length || 0)

			if (!workingSessions || workingSessions.length === 0) {
				setWorkingEmployees([])
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
			const employeeIds = workingSessions.map((session) => session.employee_id)
			const { data: employees, error: employeesError } = await supabase
				.from("employees")
				.select("id, full_name")
				.in("id", employeeIds)

			if (employeesError) {
				console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:", employeesError)
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
			const { data: activeTasks, error: tasksError } = await supabase
				.from("active_sessions")
				.select("employee_id, task_type_id")
				.in("employee_id", employeeIds)

			if (tasksError) {
				console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:", tasksError)
			}

			// –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –∑–∞–¥–∞—á –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
			let taskTypes: any[] = []
			if (activeTasks && activeTasks.length > 0) {
				const taskTypeIds = activeTasks.map((task) => task.task_type_id)
				const { data: types, error: typesError } = await supabase
					.from("task_types")
					.select("id, name")
					.in("id", taskTypeIds)

				if (!typesError) {
					taskTypes = types || []
				}
			}

			// –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
			const employeesMap = new Map()
			employees?.forEach((emp) => {
				employeesMap.set(emp.id, emp.full_name)
			})

			const taskTypesMap = new Map()
			taskTypes.forEach((type) => {
				taskTypesMap.set(type.id, type.name)
			})

			const employeeTasksMap = new Map()
			activeTasks?.forEach((task) => {
				const taskName = taskTypesMap.get(task.task_type_id)
				if (taskName) {
					employeeTasksMap.set(task.employee_id, taskName)
				}
			})

			// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
			const workingList: WorkingEmployee[] = workingSessions.map((session) => {
				const clockInTime = new Date(session.clock_in_time)
				const workTimeMinutes = Math.floor((currentTime.getTime() - clockInTime.getTime()) / 60000)
				const effectiveWorkTime = Math.max(0, workTimeMinutes - (session.total_break_minutes || 0))

				return {
					id: session.employee_id,
					full_name: employeesMap.get(session.employee_id) || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫",
					clock_in_time: session.clock_in_time,
					expected_end_time: session.expected_end_time,
					is_paused: session.is_paused,
					current_task: employeeTasksMap.get(session.employee_id),
					work_time_minutes: effectiveWorkTime,
				}
			})

			console.log("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:", workingList.length)
			setWorkingEmployees(workingList)
		} catch (error) {
			console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:", error)
			setWorkingEmployees([])
		} finally {
			employeesLoadingRef.current = false
		}
	}, [currentTime])

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	useEffect(() => {
		if (user) {
			loadSessionData()
		}
	}, [user, loadSessionData])

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
	useEffect(() => {
		if (user) {
			loadWorkingEmployees()

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
			const interval = setInterval(loadWorkingEmployees, 30000)
			return () => clearInterval(interval)
		}
	}, [user, loadWorkingEmployees])

	const getWorkHours = () => {
		if (!profile?.work_schedule) return 9
		return profile.work_schedule === "12" ? 12 : 9 // 8+1 = 9 —á–∞—Å–æ–≤
	}

	const handleClockIn = async () => {
		console.log("üéØ handleClockIn: –ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏")
		console.log("üéØ handleClockIn: user =", !!user, "profile =", !!profile)

		if (!user || !profile) {
			console.error("‚ùå handleClockIn: –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è")
			return
		}

		try {
			console.log("üîç handleClockIn: –ü–æ–ª—É—á–∞–µ–º employeeId –¥–ª—è user:", user.id)
			const { employeeId, error: empError } = await authService.getEmployeeId(user.id)
			console.log("üîç handleClockIn: employeeId =", employeeId, "error =", empError)

			if (empError || !employeeId) {
				console.error("‚ùå handleClockIn: Employee not found", empError)
				throw new Error("Employee not found")
			}

			const now = new Date()
			const workHours = getWorkHours()
			const expectedEnd = new Date(now.getTime() + workHours * 60 * 60 * 1000)
			console.log("‚è∞ handleClockIn: workHours =", workHours, "expectedEnd =", expectedEnd)

			// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–µ—Å—Å–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
			console.log("üîç handleClockIn: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é")
			const { data: existingSession, error: checkError } = await supabase
				.from("work_sessions")
				.select("id, clock_out_time, clock_in_time")
				.eq("employee_id", employeeId)
				.eq("date", now.toISOString().split("T")[0])
				.single()

			console.log("üìä handleClockIn: existingSession =", existingSession, "checkError =", checkError)

			let sessionData
			if (existingSession) {
				console.log("üîÑ handleClockIn: –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é")
				console.log("üìù handleClockIn: –°–µ—Å—Å–∏—è –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", {
					id: existingSession.id,
					clock_in_time: existingSession.clock_in_time,
					clock_out_time: existingSession.clock_out_time
				})

				// –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë (–ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞—á–∞–ª–æ –¥–Ω—è)
				const updateData = {
					clock_in_time: now.toISOString(),
					clock_out_time: null, // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
					expected_end_time: expectedEnd.toISOString(),
					is_paused: false,
					pause_start_time: null,
					total_work_minutes: 0,
					total_break_minutes: 0,
					overtime_minutes: 0,
					is_auto_clocked_out: false,
					updated_at: now.toISOString(),
				}

				console.log("üìù handleClockIn: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", updateData)

				const { data, error } = await supabase
					.from("work_sessions")
					.update(updateData)
					.eq("id", existingSession.id)
					.select()
					.single()

				if (error) {
					console.error("‚ùå handleClockIn: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏", error)
					throw error
				}
				sessionData = data
				console.log("‚úÖ handleClockIn: –°–µ—Å—Å–∏—è –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", sessionData)
			} else {
				console.log("‚ûï handleClockIn: –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é")
				// –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
				const { data, error } = await supabase
					.from("work_sessions")
					.insert({
						employee_id: employeeId,
						date: now.toISOString().split("T")[0],
						clock_in_time: now.toISOString(),
						expected_end_time: expectedEnd.toISOString(),
						is_paused: false,
						total_work_minutes: 0,
						total_break_minutes: 0,
						overtime_minutes: 0,
					})
					.select()
					.single()

				if (error) {
					console.error("‚ùå handleClockIn: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏", error)
					throw error
				}
				sessionData = data
				console.log("‚úÖ handleClockIn: –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞", sessionData)
			}

			// –í–ê–ñ–ù–û: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
			console.log("üîÑ handleClockIn: –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
			const newSessionData: WorkSessionData = {
				id: sessionData.id,
				clockInTime: new Date(sessionData.clock_in_time),
				clockOutTime: sessionData.clock_out_time ? new Date(sessionData.clock_out_time) : null,
				expectedEndTime: expectedEnd,
				isPaused: false,
				pauseStartTime: null,
				totalWorkMinutes: 0,
				totalBreakMinutes: 0,
				overtimeMinutes: 0,
				isAutoClockOut: false,
			}

			setSessionData(newSessionData)
			console.log("‚úÖ handleClockIn: –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ", newSessionData)

			// –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ù–ï–ú–ï–î–õ–ï–ù–ù–û
			console.log("üîÑ handleClockIn: –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç—ã")
			onSessionChange(true)

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω
			console.log("üîÑ handleClockIn: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω")
			if (user) {
				await authService.updateOnlineStatus(user.id, true)
			}

			// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–Ω–µ –±–ª–æ–∫–∏—Ä—É—è UI) —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
			console.log("üîÑ handleClockIn: –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã")
			setTimeout(() => {
				loadSessionData().catch(console.error)
				loadWorkingEmployees().catch(console.error)
			}, 2000)

			console.log("‚úÖ handleClockIn: –í—Å—ë —É—Å–ø–µ—à–Ω–æ!")
			toast({
				title: "üéØ –†–∞–±–æ—á–∏–π –¥–µ–Ω—å –Ω–∞—á–∞—Ç!",
				description: `–û–∂–∏–¥–∞–µ–º–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ: ${expectedEnd.toLocaleTimeString()}`,
			})
		} catch (error) {
			console.error("üí• handleClockIn: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error)
			toast({
				title: "–û—à–∏–±–∫–∞",
				description: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å",
				variant: "destructive" as const,
			})
		}
	}

	const handleTogglePause = async () => {
		if (!sessionData.id) return

		try {
			const now = new Date()
			const newPausedState = !sessionData.isPaused

			const updateData: any = {
				is_paused: newPausedState,
				updated_at: now.toISOString(),
			}

			if (newPausedState) {
				// –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—É–∑—É
				updateData.pause_start_time = now.toISOString()
			} else {
				// –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –ø–∞—É–∑—É
				if (sessionData.pauseStartTime) {
					const pauseDuration = Math.floor((now.getTime() - sessionData.pauseStartTime.getTime()) / 60000)
					updateData.total_break_minutes = sessionData.totalBreakMinutes + pauseDuration
				}
				updateData.pause_start_time = null
			}

			const { error } = await supabase.from("work_sessions").update(updateData).eq("id", sessionData.id)

			if (error) throw error

			await loadSessionData()
			await loadWorkingEmployees() // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö

			toast({
				title: newPausedState ? "‚è∏Ô∏è –†–∞–±–æ—Ç–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞" : "‚ñ∂Ô∏è –†–∞–±–æ—Ç–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞",
				description: newPausedState ? "–í—Ä–µ–º—è –ø–∞—É–∑—ã —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ" : "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É",
			})
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–∞—É–∑—ã:", error)
			toast({
				title: "–û—à–∏–±–∫–∞",
				description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞—É–∑—ã",
				variant: "destructive" as const,
			})
		}
	}

	const handleEndDay = async () => {
		if (!sessionData.id) return

		try {
			const now = new Date()
			let totalBreakMinutes = sessionData.totalBreakMinutes

			// –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –Ω–∞ –ø–∞—É–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ç–µ–∫—É—â–µ–π –ø–∞—É–∑—ã
			if (sessionData.isPaused && sessionData.pauseStartTime) {
				const currentPauseDuration = Math.floor((now.getTime() - sessionData.pauseStartTime.getTime()) / 60000)
				totalBreakMinutes += currentPauseDuration
			}

			// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
			const totalWorkMinutes = sessionData.clockInTime
				? Math.floor((now.getTime() - sessionData.clockInTime.getTime()) / 60000)
				: 0

			// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (–±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤)
			const effectiveWorkMinutes = totalWorkMinutes - totalBreakMinutes

			// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏
			const expectedWorkMinutes = getWorkHours() * 60
			const overtimeMinutes = Math.max(0, effectiveWorkMinutes - expectedWorkMinutes)

			const { error } = await supabase
				.from("work_sessions")
				.update({
					clock_out_time: now.toISOString(),
					total_work_minutes: totalWorkMinutes,
					total_break_minutes: totalBreakMinutes,
					overtime_minutes: overtimeMinutes,
					is_paused: false,
					pause_start_time: null,
					updated_at: now.toISOString(),
				})
				.eq("id", sessionData.id)

			if (error) throw error

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω
			if (user) {
				await authService.updateOnlineStatus(user.id, false)
			}

			await loadSessionData()
			await loadWorkingEmployees() // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö
			setShowEndDialog(false)

			toast({
				title: "üèÅ –†–∞–±–æ—á–∏–π –¥–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω!",
				description: `–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: ${Math.floor(effectiveWorkMinutes / 60)}—á ${effectiveWorkMinutes % 60}–º`,
			})
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã:", error)
			toast({
				title: "–û—à–∏–±–∫–∞",
				description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å",
				variant: "destructive" as const,
			})
		}
	}

	const formatTime = (date: Date) => {
		return date.toLocaleTimeString("ru-RU", {
			hour: "2-digit",
			minute: "2-digit",
		})
	}

	const formatDuration = (minutes: number) => {
		const hours = Math.floor(minutes / 60)
		const mins = minutes % 60
		return hours > 0 ? `${hours}—á ${mins}–º` : `${mins}–º`
	}

	const getCurrentWorkTime = () => {
		if (!sessionData.clockInTime || sessionData.clockOutTime) return 0

		let workTime = Math.floor((currentTime.getTime() - sessionData.clockInTime.getTime()) / 60000)

		// –í—ã—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–æ–≤
		workTime -= sessionData.totalBreakMinutes

		// –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –Ω–∞ –ø–∞—É–∑–µ, –≤—ã—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è —Ç–µ–∫—É—â–µ–π –ø–∞—É–∑—ã
		if (sessionData.isPaused && sessionData.pauseStartTime) {
			const currentPauseDuration = Math.floor((currentTime.getTime() - sessionData.pauseStartTime.getTime()) / 60000)
			workTime -= currentPauseDuration
		}

		return Math.max(0, workTime)
	}

	const getOvertimeMinutes = () => {
		const currentWorkMinutes = getCurrentWorkTime()
		const expectedWorkMinutes = getWorkHours() * 60
		return Math.max(0, currentWorkMinutes - expectedWorkMinutes)
	}

	const isWorking = sessionData.clockInTime && !sessionData.clockOutTime
	console.log("üéØ isWorking calculation:", {
		clockInTime: !!sessionData.clockInTime,
		clockOutTime: !!sessionData.clockOutTime,
		isWorking: isWorking
	})

	if (loading) {
		return (
			<PixelCard>
				<div className="p-4 text-center">
					<div className="text-2xl animate-spin mb-2">‚è∞</div>
					<div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
				</div>
			</PixelCard>
		)
	}

	return (
		<div className="space-y-4">
			{/* –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —Ä–∞–±–æ—á–µ–π —Å–º–µ–Ω—ã */}
			<PixelCard
				className={`${isWorking ? (sessionData.isPaused ? "border-yellow-400" : "border-green-400") : "border-gray-300"} border-2`}
			>
				<div className="p-4">
					<div className="flex items-center justify-between mb-4">
						<div className="flex items-center gap-2">
							<Clock className="h-5 w-5" />
							<span className="font-bold">–†–∞–±–æ—á–∞—è —Å–º–µ–Ω–∞</span>
						</div>
						{isWorking && (
							<Badge variant={sessionData.isPaused ? "secondary" : "default"}>
								{sessionData.isPaused ? "–ù–∞ –ø–∞—É–∑–µ" : "–†–∞–±–æ—Ç–∞—é"}
							</Badge>
						)}
					</div>

					{!isWorking ? (
						<div className="text-center py-4">
							<div className="text-4xl mb-2">üè†</div>
							<div className="text-muted-foreground mb-4">–†–∞–±–æ—á–∏–π –¥–µ–Ω—å –Ω–µ –Ω–∞—á–∞—Ç</div>
							<PixelButton onClick={handleClockIn} className="w-full">
								<Play className="h-4 w-4 mr-2" />
								–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
							</PixelButton>
						</div>
					) : (
						<div className="space-y-4">
							{/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ */}
							<div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
								<div className="space-y-2">
									<div className="text-sm text-muted-foreground">–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞</div>
									<div className="text-lg font-mono">{sessionData.clockInTime ? formatTime(sessionData.clockInTime) : "‚Äî"}</div>
								</div>
								<div className="space-y-2">
									<div className="text-sm text-muted-foreground">–û–∂–∏–¥–∞–µ–º–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ</div>
									<div className="text-lg font-mono">
										{sessionData.expectedEndTime ? formatTime(sessionData.expectedEndTime) : "‚Äî"}
									</div>
								</div>
								<div className="space-y-2">
									<div className="text-sm text-muted-foreground">–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ</div>
									<div className="text-lg font-mono">{formatDuration(getCurrentWorkTime())}</div>
								</div>
								<div className="space-y-2">
									<div className="text-sm text-muted-foreground">–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏</div>
									<div className={`text-lg font-mono ${getOvertimeMinutes() > 0 ? "text-red-600" : ""}`}>
										{formatDuration(getOvertimeMinutes())}
									</div>
								</div>
							</div>

							{sessionData.clockOutTime && (
								<div className="mb-4 p-3 bg-muted rounded-lg">
									<div className="text-sm text-muted-foreground mb-1">–†–∞–±–æ—á–∏–π –¥–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω</div>
									<div className="text-lg font-mono">{formatTime(sessionData.clockOutTime)}</div>
								</div>
							)}

							{/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä */}
							<PixelCard className="bg-gradient-to-r from-blue-50 to-purple-50">
								<div className="p-4 text-center">
									<div className="text-3xl font-bold font-mono mb-1">{formatDuration(getCurrentWorkTime())}</div>
									<div className="text-sm text-muted-foreground">
										{sessionData.isPaused ? "—Ä–∞–±–æ—Ç–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞" : "—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ"}
									</div>
									{getOvertimeMinutes() > 0 && (
										<div className="text-sm text-orange-600 mt-1">
											‚ö†Ô∏è –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞: {formatDuration(getOvertimeMinutes())}
										</div>
									)}
								</div>
							</PixelCard>

							{/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
							<div className="space-y-2">
								<PixelButton
									onClick={handleTogglePause}
									variant={sessionData.isPaused ? "success" : "secondary"}
									className="w-full"
								>
									{sessionData.isPaused ? (
										<>
											<Play className="h-4 w-4 mr-2" />
											–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É
										</>
									) : (
										<>
											<Pause className="h-4 w-4 mr-2" />
											–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É
										</>
									)}
								</PixelButton>

								<PixelButton onClick={() => setShowEndDialog(true)} variant="danger" className="w-full">
									<LogOut className="h-4 w-4 mr-2" />
									–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–Ω—å
								</PixelButton>
							</div>
						</div>
					)}
				</div>
			</PixelCard>

			{/* –ü–∞–Ω–µ–ª—å —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ */}
			<PixelCard>
				<div className="p-4">
					<div className="flex items-center gap-2 mb-3">
						<Briefcase className="h-5 w-5" />
						<span className="font-bold">–°–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞—é—Ç</span>
						<Badge variant="outline">{workingEmployees.length}</Badge>
					</div>

					{workingEmployees.length === 0 ? (
						<div className="text-center py-4 text-muted-foreground">
							<div className="text-2xl mb-2">üí§</div>
							<div className="text-sm">–ù–∏–∫—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç</div>
						</div>
					) : (
						<div className="space-y-2 max-h-40 overflow-y-auto">
							{workingEmployees.map((employee) => (
								<div key={employee.id} className="flex items-center justify-between p-2 bg-muted/50 rounded">
									<div className="flex items-center gap-2">
										<div className={`w-2 h-2 rounded-full ${employee.is_paused ? "bg-yellow-500" : "bg-green-500"}`} />
										<div>
											<div className="font-medium text-sm">{employee.full_name}</div>
											{employee.current_task && (
												<div className="text-xs text-muted-foreground">{employee.current_task}</div>
											)}
											<div className="text-xs text-muted-foreground">
												–†–∞–±–æ—Ç–∞–µ—Ç: {formatDuration(employee.work_time_minutes)}
											</div>
										</div>
									</div>
									<div className="text-xs text-muted-foreground text-right">
										<div>
											–ù–∞—á–∞–ª:{" "}
											{new Date(employee.clock_in_time).toLocaleTimeString("ru-RU", {
												hour: "2-digit",
												minute: "2-digit",
											})}
										</div>
										<div>
											–î–æ:{" "}
											{employee.expected_end_time ? new Date(employee.expected_end_time).toLocaleTimeString("ru-RU", {
												hour: "2-digit",
												minute: "2-digit",
											}) : "‚Äî"}
										</div>
									</div>
								</div>
							))}
						</div>
					)}
				</div>
			</PixelCard>

			{/* –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–Ω—è */}
			<Dialog open={showEndDialog} onOpenChange={setShowEndDialog}>
				<DialogContent>
					<DialogHeader>
						<DialogTitle className="flex items-center gap-2">
							<AlertTriangle className="h-5 w-5 text-orange-500" />
							–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å?
						</DialogTitle>
						<DialogDescription>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.</DialogDescription>
					</DialogHeader>

					<div className="space-y-4">
						<div className="grid grid-cols-2 gap-4 text-sm">
							<div>
								<div className="text-muted-foreground">–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</div>
								<div className="font-bold">{formatDuration(getCurrentWorkTime())}</div>
							</div>
							<div>
								<div className="text-muted-foreground">–ü–µ—Ä–µ—Ä—ã–≤—ã</div>
								<div className="font-bold">{formatDuration(sessionData.totalBreakMinutes)}</div>
							</div>
						</div>

						{getOvertimeMinutes() > 0 && (
							<div className="p-3 bg-orange-50 border border-orange-200 rounded">
								<div className="flex items-center gap-2 text-orange-700">
									<AlertTriangle className="h-4 w-4" />
									<span className="font-medium">–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞: {formatDuration(getOvertimeMinutes())}</span>
								</div>
							</div>
						)}
					</div>

					<DialogFooter>
						<Button variant="outline" onClick={() => setShowEndDialog(false)}>
							–û—Ç–º–µ–Ω–∞
						</Button>
						<Button onClick={handleEndDay} className="bg-red-600 hover:bg-red-700">
							<CheckCircle className="h-4 w-4 mr-2" />
							–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–Ω—å
						</Button>
					</DialogFooter>
				</DialogContent>
			</Dialog>
		</div>
	)
}
