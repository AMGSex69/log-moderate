"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import {
	Dialog,
	DialogContent,
	DialogDescription,
	DialogFooter,
	DialogHeader,
	DialogTitle,
} from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import { supabase } from "@/lib/supabase"
import { CheckCircle, Clock, Hash, Plus, Minus } from "lucide-react"
import PixelButton from "@/components/pixel-button"

interface CompletionDialogProps {
	isOpen: boolean
	onClose: () => void
	onSave: (units: number, notes: string) => void
	taskName: string
	timeSpent: string
	taskId?: number
	initialUnits?: number
}

export default function CompletionDialog({
	isOpen,
	onClose,
	onSave,
	taskName,
	timeSpent,
	taskId,
	initialUnits = 1,
}: CompletionDialogProps) {
	const [units, setUnits] = useState("")
	const [notes, setNotes] = useState("")
	const [loading, setLoading] = useState(false)
	const [success, setSuccess] = useState(false)
	const [measurementUnit, setMeasurementUnit] = useState("–µ–¥–∏–Ω–∏—Ü")

	useEffect(() => {
		if (isOpen) {
			const startingUnits = (initialUnits && initialUnits > 0) ? initialUnits : 1
			setUnits(startingUnits.toString())
		}
	}, [isOpen, initialUnits])

	useEffect(() => {
		if (isOpen && taskId) {
			fetchTaskUnit()
		}
	}, [isOpen, taskId])

	const fetchTaskUnit = async () => {
		if (!taskId) {
			console.log("fetchTaskUnit: taskId –Ω–µ —É–∫–∞–∑–∞–Ω")
			return
		}

		try {
			console.log("fetchTaskUnit: –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏", taskId)

			const { data, error } = await supabase
				.from("task_types")
				.select("measurement_unit")
				.eq("id", taskId)
				.single()

			if (error) {
				console.error("fetchTaskUnit: –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î:", error)
				throw error
			}

			if (!data) {
				console.warn("fetchTaskUnit: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∑–∞–¥–∞—á–∏", taskId)
				setMeasurementUnit("–µ–¥–∏–Ω–∏—Ü")
				return
			}

			const unit = data.measurement_unit || "–µ–¥–∏–Ω–∏—Ü"
			console.log("fetchTaskUnit: –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è:", unit)
			setMeasurementUnit(unit)

		} catch (error) {
			console.error("fetchTaskUnit: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏", taskId, ":", error)
			setMeasurementUnit("–µ–¥–∏–Ω–∏—Ü")
		}
	}

	const handleSave = async () => {
		if (!units || Number.parseInt(units) <= 0) return

		setLoading(true)
		setSuccess(false)
		try {
			await onSave(Number.parseInt(units), notes)
			setSuccess(true)
			// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ —É—Å–ø–µ—Ö–∞
			setTimeout(() => {
				setUnits("")
				setNotes("")
				setSuccess(false)
			}, 1500)
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", error)
		} finally {
			setLoading(false)
		}
	}

	const handleClose = () => {
		setUnits("")
		setNotes("")
		onClose()
	}

	const incrementUnits = () => {
		const currentUnits = parseInt(units) || 0
		setUnits((currentUnits + 1).toString())
	}

	const decrementUnits = () => {
		const currentUnits = parseInt(units) || 0
		if (currentUnits > 1) {
			setUnits((currentUnits - 1).toString())
		}
	}

	const getUnitLabel = () => {
		switch (measurementUnit?.toLowerCase()) {
			case "—à—Ç—É–∫–∞":
				return "—à—Ç—É–∫"
			case "–º–∏–Ω—É—Ç—ã":
				return "–º–∏–Ω—É—Ç"
			default:
				return "–µ–¥–∏–Ω–∏—Ü"
		}
	}

	const getUnitIcon = () => {
		switch (measurementUnit?.toLowerCase()) {
			case "–º–∏–Ω—É—Ç—ã":
				return <Clock className="h-4 w-4" />
			default:
				return <Hash className="h-4 w-4" />
		}
	}

	return (
		<Dialog open={isOpen} onOpenChange={handleClose}>
			<DialogContent className="sm:max-w-md">
				<DialogHeader>
					<DialogTitle className="flex items-center gap-2">
						<CheckCircle className="h-5 w-5 text-green-600" />
						–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
					</DialogTitle>
					<DialogDescription>
						–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –∏ –¥–æ–±–∞–≤—å—Ç–µ –∑–∞–º–µ—Ç–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
					</DialogDescription>
				</DialogHeader>

				<div className="space-y-4">
					<div className="bg-muted p-4 rounded-lg">
						<div className="flex items-center justify-between mb-2">
							<h4 className="font-semibold">{taskName}</h4>
							<Badge variant="outline" className="flex items-center gap-1">
								<Clock className="h-3 w-3" />
								{timeSpent}
							</Badge>
						</div>
						<div className="text-sm text-muted-foreground">–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {timeSpent}</div>
						{initialUnits && initialUnits > 0 && (
							<div className="text-sm text-green-600 mt-1">
								üìù –£–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ: {initialUnits} {getUnitLabel()}
							</div>
						)}
					</div>

					<div className="space-y-2">
						<Label htmlFor="units" className="flex items-center gap-2">
							{getUnitIcon()}
							–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {getUnitLabel()} *
						</Label>

						<div className="flex items-center gap-2">
							<Button
								type="button"
								variant="outline"
								size="sm"
								onClick={decrementUnits}
								disabled={parseInt(units) <= 1}
								className="h-10 w-10 p-0"
							>
								<Minus className="h-4 w-4" />
							</Button>

							<div className="flex-1">
								<Input
									id="units"
									type="number"
									min="1"
									value={units}
									onChange={(e) => setUnits(e.target.value)}
									placeholder={`–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ${getUnitLabel()}`}
									className="text-center text-lg font-bold"
									autoFocus
								/>
							</div>

							<Button
								type="button"
								variant="outline"
								size="sm"
								onClick={incrementUnits}
								className="h-10 w-10 p-0"
							>
								<Plus className="h-4 w-4" />
							</Button>
						</div>

						<div className="text-xs text-muted-foreground text-center">
							–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: {measurementUnit}
							{initialUnits && initialUnits > 0 && (
								<span className="text-green-600"> ‚Ä¢ –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏</span>
							)}
						</div>
					</div>

					<div className="space-y-2">
						<Label htmlFor="notes">–ó–∞–º–µ—Ç–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</Label>
						<Textarea
							id="notes"
							value={notes}
							onChange={(e) => setNotes(e.target.value)}
							placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ..."
							rows={3}
						/>
					</div>
				</div>

				<DialogFooter>
					<Button variant="outline" onClick={handleClose} disabled={loading || success}>
						–û—Ç–º–µ–Ω–∞
					</Button>
					<PixelButton
						onClick={handleSave}
						disabled={!units || Number.parseInt(units) <= 0}
						loading={loading}
						success={success}
						loadingText="üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ..."
						successText="‚úÖ –ì–æ—Ç–æ–≤–æ!"
						variant="default"
					>
						–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
					</PixelButton>
				</DialogFooter>
			</DialogContent>
		</Dialog>
	)
}
