const { createClient } = require('@supabase/supabase-js');

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ –∫–æ–¥–∞
const supabaseUrl = 'https://ixqjqjqjqjqjqjqjqjqj.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Iml4cWpxanFqcWpxanFqcWpxanFqIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczNDM0NzE5MSwiZXhwIjoyMDQ5OTIzMTkxfQ.Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function fixEmployeesAccess() {
	console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ employees...');

	try {
		// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å RLS
		console.log('1. –ü—Ä–æ–≤–µ—Ä—è–µ–º RLS —Å—Ç–∞—Ç—É—Å...');
		const { data: rlsStatus, error: rlsError } = await supabase
			.rpc('exec_sql', {
				sql: `
                    SELECT 
                        schemaname, 
                        tablename, 
                        rowsecurity 
                    FROM pg_tables 
                    WHERE tablename = 'employees';
                `
			});

		if (rlsError) {
			console.log('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ RLS:', rlsError);
		} else {
			console.log('RLS —Å—Ç–∞—Ç—É—Å:', rlsStatus);
		}

		// 2. –û—Ç–∫–ª—é—á–∞–µ–º RLS –Ω–∞ employees
		console.log('2. –û—Ç–∫–ª—é—á–∞–µ–º RLS –Ω–∞ employees...');
		const { error: disableError } = await supabase
			.rpc('exec_sql', {
				sql: 'ALTER TABLE employees DISABLE ROW LEVEL SECURITY;'
			});

		if (disableError) {
			console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è RLS:', disableError);
		} else {
			console.log('‚úÖ RLS –æ—Ç–∫–ª—é—á–µ–Ω –Ω–∞ employees');
		}

		// 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
		console.log('3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...');
		const { data: testEmployees, error: testError } = await supabase
			.from('employees')
			.select(`
                id,
                full_name,
                user_id,
                is_online,
                position,
                is_active,
                work_hours,
                offices(name)
            `)
			.eq('offices.name', '–†–∞—Å—Å–≤–µ—Ç')
			.eq('is_active', true);

		if (testError) {
			console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', testError);
		} else {
			console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', testEmployees?.length || 0);
			if (testEmployees && testEmployees.length > 0) {
				console.log('–ü–µ—Ä–≤—ã–µ 3 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:');
				testEmployees.slice(0, 3).forEach((emp, i) => {
					console.log(`${i + 1}. ${emp.full_name} - ${emp.position} (${emp.work_hours}—á)`);
				});
			}
		}

		// 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫–∂–µ offices —Ç–∞–±–ª–∏—Ü—É
		console.log('4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ offices...');
		const { data: offices, error: officesError } = await supabase
			.from('offices')
			.select('*')
			.eq('name', '–†–∞—Å—Å–≤–µ—Ç');

		if (officesError) {
			console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ offices:', officesError);
		} else {
			console.log('‚úÖ –û—Ñ–∏—Å "–†–∞—Å—Å–≤–µ—Ç" –Ω–∞–π–¥–µ–Ω:', offices?.length || 0);
		}

		// 5. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –æ—Ç–∫–ª—é—á–∞–µ–º RLS –∏ –Ω–∞ offices
		if (officesError) {
			console.log('5. –û—Ç–∫–ª—é—á–∞–µ–º RLS –Ω–∞ offices...');
			const { error: officesRlsError } = await supabase
				.rpc('exec_sql', {
					sql: 'ALTER TABLE offices DISABLE ROW LEVEL SECURITY;'
				});

			if (officesRlsError) {
				console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è RLS –Ω–∞ offices:', officesRlsError);
			} else {
				console.log('‚úÖ RLS –æ—Ç–∫–ª—é—á–µ–Ω –Ω–∞ offices');
			}
		}

		// 6. –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
		console.log('6. –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç...');
		const { data: finalTest, error: finalError } = await supabase
			.from('employees')
			.select(`
                id,
                full_name,
                user_id,
                is_online,
                position,
                is_active,
                work_hours,
                offices(name)
            `)
			.eq('offices.name', '–†–∞—Å—Å–≤–µ—Ç')
			.eq('is_active', true);

		if (finalError) {
			console.log('‚ùå –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', finalError);
		} else {
			console.log('üéâ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', finalTest?.length || 0);
			console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≥–æ—Ç–æ–≤—ã!');
		}

	} catch (error) {
		console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
	}
}

fixEmployeesAccess(); 