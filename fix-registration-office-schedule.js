const { createClient } = require('@supabase/supabase-js')

// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
	console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è NEXT_PUBLIC_SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY')
	process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function fixRegistrationOfficeSchedule() {
	console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ñ–∏—Å–∞ –∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...')

	try {
		// –®–ê–ì 1: –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é handle_new_user
		console.log('üìù –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é handle_new_user...')

		const newHandleUserFunction = `
        DROP FUNCTION IF EXISTS public.handle_new_user() CASCADE;

        CREATE OR REPLACE FUNCTION public.handle_new_user()
        RETURNS TRIGGER
        SECURITY DEFINER
        SET search_path = public, auth
        LANGUAGE plpgsql AS $$
        DECLARE
            user_email TEXT;
            user_name TEXT;
            user_work_schedule TEXT;
            user_office_id INTEGER;
            default_office_id INTEGER;
            work_hours_value INTEGER;
        BEGIN
            -- –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ auth.users
            user_email := COALESCE(NEW.email, 'user@example.com');
            
            -- –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ user_metadata
            user_name := COALESCE(
                NEW.raw_user_meta_data->>'full_name',
                email_to_nice_name(user_email)
            );
            
            user_work_schedule := COALESCE(
                NEW.raw_user_meta_data->>'work_schedule',
                '5/2'
            );
            
            -- –ü–æ–ª—É—á–∞–µ–º office_id –∏–∑ metadata
            user_office_id := CASE 
                WHEN NEW.raw_user_meta_data->>'office_id' IS NOT NULL 
                THEN (NEW.raw_user_meta_data->>'office_id')::INTEGER
                ELSE NULL
            END;
            
            -- –ï—Å–ª–∏ office_id –Ω–µ —É–∫–∞–∑–∞–Ω –≤ metadata, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            IF user_office_id IS NULL THEN
                SELECT id INTO default_office_id 
                FROM public.offices 
                WHERE name = '–†–∞—Å—Å–≤–µ—Ç' 
                LIMIT 1;
                
                IF default_office_id IS NULL THEN
                    SELECT id INTO default_office_id 
                    FROM public.offices 
                    ORDER BY id 
                    LIMIT 1;
                END IF;
                
                -- –°–æ–∑–¥–∞–µ–º –æ—Ñ–∏—Å –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                IF default_office_id IS NULL THEN
                    INSERT INTO public.offices (name, description)
                    VALUES ('–†–∞—Å—Å–≤–µ—Ç', '–û—Å–Ω–æ–≤–Ω–æ–π –æ—Ñ–∏—Å')
                    RETURNING id INTO default_office_id;
                END IF;
                
                user_office_id := default_office_id;
            END IF;
            
            -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥—Ä–∞—Ñ–∏–∫–∞
            work_hours_value := CASE 
                WHEN user_work_schedule = '2/2' THEN 12
                WHEN user_work_schedule = '5/2' THEN 9
                ELSE 9
            END;
            
            RAISE LOG 'handle_new_user: –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è % —Å –≥—Ä–∞—Ñ–∏–∫–æ–º % –∏ –æ—Ñ–∏—Å–æ–º %', 
                user_name, user_work_schedule, user_office_id;
            
            -- –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            INSERT INTO public.user_profiles (
                id,
                email,
                full_name,
                position,
                work_schedule,
                work_hours,
                office_id,
                is_admin,
                role,
                admin_role,
                is_active,
                is_online,
                coins,
                experience,
                level,
                achievements,
                created_at,
                updated_at,
                last_activity
            ) VALUES (
                NEW.id,
                user_email,
                user_name,
                '–°–æ—Ç—Ä—É–¥–Ω–∏–∫',
                user_work_schedule,  -- –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
                work_hours_value,    -- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —á–∞—Å—ã
                user_office_id,      -- –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ñ–∏—Å
                false,
                'user',
                'user',
                true,
                false,
                0,
                0,
                1,
                '[]'::jsonb,
                NOW(),
                NOW(),
                NOW()
            ) ON CONFLICT (id) DO UPDATE SET
                full_name = EXCLUDED.full_name,
                work_schedule = EXCLUDED.work_schedule,
                work_hours = EXCLUDED.work_hours,
                office_id = EXCLUDED.office_id,
                updated_at = NOW();
            
            RAISE LOG 'handle_new_user: –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è % –≤ –æ—Ñ–∏—Å–µ % —Å –≥—Ä–∞—Ñ–∏–∫–æ–º %', 
                user_name, user_office_id, user_work_schedule;
            
            RETURN NEW;
            
        EXCEPTION WHEN OTHERS THEN
            RAISE WARNING '–û—à–∏–±–∫–∞ –≤ handle_new_user –¥–ª—è %: %', NEW.id, SQLERRM;
            RETURN NEW;
        END $$;

        -- –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
        DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
        CREATE TRIGGER on_auth_user_created
            AFTER INSERT ON auth.users
            FOR EACH ROW 
            EXECUTE FUNCTION public.handle_new_user();
        `

		const { error: functionError } = await supabase.rpc('exec_sql', {
			sql: newHandleUserFunction
		})

		if (functionError) {
			console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏:', functionError)
			// –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ SQL
			const { error: directError } = await supabase
				.from('_temp_sql_execution')
				.select('*')
				.limit(0) // –ù–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ

			if (directError) {
				console.log('‚ö†Ô∏è –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä—è–º—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã...')
			}
		} else {
			console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è handle_new_user –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
		}

		// –®–ê–ì 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –æ—Ñ–∏—Å—ã
		console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –æ—Ñ–∏—Å—ã...')
		const { data: offices, error: officesError } = await supabase
			.from('offices')
			.select('*')
			.order('id')

		if (officesError) {
			console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ñ–∏—Å–æ–≤:', officesError)
			return
		}

		console.log('üìç –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ñ–∏—Å—ã:')
		offices.forEach(office => {
			console.log(`   ${office.id}: ${office.name} - ${office.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}`)
		})

		// –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—Ñ–∏—Å–∞–º
		console.log('üë• –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—Ñ–∏—Å–∞–º:')
		const { data: userDistribution, error: distributionError } = await supabase
			.from('user_profiles')
			.select(`
                office_id,
                full_name,
                work_schedule,
                offices!user_profiles_office_id_fkey (
                    name
                )
            `)
			.order('office_id')

		if (distributionError) {
			console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:', distributionError)
			return
		}

		// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ—Ñ–∏—Å–∞–º
		const officeGroups = {}
		userDistribution.forEach(user => {
			const officeId = user.office_id || 'null'
			const officeName = user.offices?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ñ–∏—Å'

			if (!officeGroups[officeId]) {
				officeGroups[officeId] = {
					name: officeName,
					users: []
				}
			}

			officeGroups[officeId].users.push({
				name: user.full_name,
				schedule: user.work_schedule
			})
		})

		Object.entries(officeGroups).forEach(([officeId, group]) => {
			console.log(`   üìç ${group.name} (ID: ${officeId}): ${group.users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`)
			group.users.forEach(user => {
				console.log(`      - ${user.name} (${user.schedule})`)
			})
		})

		// –®–ê–ì 4: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥—Ä—É–≥–∏—Ö –æ—Ñ–∏—Å–∞—Ö
		console.log('üîß –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ—Ñ–∏—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...')

		// –ù–∞—Ö–æ–¥–∏–º –æ—Ñ–∏—Å "–†–∞—Å—Å–≤–µ—Ç"
		const rassvietOffice = offices.find(o => o.name === '–†–∞—Å—Å–≤–µ—Ç')
		const otherOffices = offices.filter(o => o.name !== '–†–∞—Å—Å–≤–µ—Ç')

		if (rassvietOffice && otherOffices.length > 0) {
			// –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—Ñ–∏—Å–µ –†–∞—Å—Å–≤–µ—Ç
			const usersInRassvet = userDistribution.filter(u => u.office_id === rassvietOffice.id)

			if (usersInRassvet.length > 1) {
				// –ü–µ—Ä–µ–º–µ—â–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥—Ä—É–≥–∏–µ –æ—Ñ–∏—Å—ã
				const usersToMove = usersInRassvet.slice(1) // –û—Å—Ç–∞–≤–ª—è–µ–º –æ–¥–Ω–æ–≥–æ –≤ –†–∞—Å—Å–≤–µ—Ç–µ

				for (let i = 0; i < usersToMove.length; i++) {
					const user = usersToMove[i]
					const targetOffice = otherOffices[i % otherOffices.length]

					const { error: updateError } = await supabase
						.from('user_profiles')
						.update({
							office_id: targetOffice.id,
							updated_at: new Date().toISOString()
						})
						.eq('id', user.id)

					if (updateError) {
						console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è ${user.full_name}:`, updateError)
					} else {
						console.log(`‚úÖ ${user.full_name} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –æ—Ñ–∏—Å "${targetOffice.name}"`)
					}
				}
			}
		}

		// –®–ê–ì 5: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
		console.log('üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...')
		const { data: finalCheck, error: finalError } = await supabase
			.from('user_profiles')
			.select(`
                full_name,
                work_schedule,
                work_hours,
                offices!user_profiles_office_id_fkey (
                    name
                )
            `)
			.order('full_name')

		if (finalError) {
			console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:', finalError)
			return
		}

		console.log('üìä –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:')
		finalCheck.forEach(user => {
			console.log(`   üë§ ${user.full_name}: ${user.offices?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ñ–∏—Å'}, ${user.work_schedule} (${user.work_hours}—á)`)
		})

		console.log('\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
		console.log('üìù –¢–µ–ø–µ—Ä—å –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:')
		console.log('   - –û—Ñ–∏—Å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –∏–∑ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
		console.log('   - –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –∏–∑ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
		console.log('   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ –±—É–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫—É')
		console.log('\nüîÑ –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è')

	} catch (error) {
		console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
	}
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
fixRegistrationOfficeSchedule() 