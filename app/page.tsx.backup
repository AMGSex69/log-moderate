"use client"

import { useState, useEffect, useRef, useCallback, useMemo } from "react"
import { useRouter } from "next/navigation"
import { useToast } from "@/hooks/use-toast"
import { Toaster } from "@/components/ui/toaster"
import { supabase, type TaskType } from "@/lib/supabase"
import { authService } from "@/lib/auth"
import { useAuth } from "@/hooks/use-auth"
import { useActiveSessions } from "@/hooks/use-active-sessions"
import { useWorkSession } from "@/hooks/use-work-session"
import { useMultiTimer } from "@/hooks/use-multi-timer"
import TaskGroup from "@/components/task-group"
import ActiveTasksPanel from "@/components/active-tasks-panel"
import CompletionDialog from "@/components/completion-dialog"
import StatsPanel from "@/components/stats-panel"
import PixelCard from "@/components/pixel-card"
import PixelButton from "@/components/pixel-button"
import CoinDisplay from "@/components/coin-display"
import LevelDisplay from "@/components/level-display"
import AchievementPopup from "@/components/achievement-popup"
import Navigation from "@/components/navigation"
import AuthGuard from "@/components/auth/auth-guard"
import WorkSessionEnhanced from "@/components/work-session-enhanced"
import BreakControls from "@/components/break-controls"
import ScheduleSelector from "@/components/schedule-selector"
import OfficeSelector from "@/components/office-selector"
import { Clock, Trophy, LogOut, Square, Edit } from "lucide-react"
import { GAME_CONFIG } from "@/lib/game-config"
import { appCache } from "@/lib/cache"
import { RewardSystem } from "@/lib/reward-system"
import PrizeWheel, { type Prize } from "@/components/prize-wheel"
import { calculateLevel, getNextLevel } from "@/lib/level-utils"

export default function Home() {
	const router = useRouter()
	const { user, profile, signOut, loading: authLoading } = useAuth()

	// –í—Å–µ —Ö—É–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω—ã –±–µ–∑—É—Å–ª–æ–≤–Ω–æ
	const { startSession, endSession } = useActiveSessions()
	const { isWorking, updateSessionCache, forceUpdateWorkingStatus } = useWorkSession()

	const {
		activeTasks,
		timers,
		startTask,
		stopTask,
		updateUnits,
		getFormattedTime,
		getMinutes,
		pauseAllTasks,
		resumeAllTasks,
	} = useMultiTimer()

	const { toast } = useToast()

	const [taskTypes, setTaskTypes] = useState<TaskType[]>([])
	const [completingTask, setCompletingTask] = useState<any>(null)
	const [showCompletionDialog, setShowCompletionDialog] = useState(false)
	const [currentTime, setCurrentTime] = useState(new Date().toLocaleTimeString())
	const [playerCoins, setPlayerCoins] = useState(0)
	const [newAchievement, setNewAchievement] = useState<any>(null)
	const [isOnBreak, setIsOnBreak] = useState(false)
	const [needsScheduleSetup, setNeedsScheduleSetup] = useState(false)
	const [needsDistrictSetup, setNeedsDistrictSetup] = useState(false)
	const [pageLoading, setPageLoading] = useState(true)
	const [localIsWorking, setLocalIsWorking] = useState(false)
	const [localIsPaused, setLocalIsPaused] = useState(false)
	const [showPrizeWheel, setShowPrizeWheel] = useState(false)
	const [wonPrize, setWonPrize] = useState<Prize | null>(null)
	const [leaderboard, setLeaderboard] = useState<Array<{ name: string, score: string, rank: number, isCurrentUser: boolean }>>([])
	const [currentLevel, setCurrentLevel] = useState({ name: "–ó–∞–≥—Ä—É–∑–∫–∞...", level: 1, minCoins: 0, icon: "üå±" })
	const [nextLevel, setNextLevel] = useState<{ name: string; level: number; minCoins: number; icon: string } | null>(null)

	const initializingRef = useRef(false)
	const timeUpdateRef = useRef<NodeJS.Timeout | null>(null)
	const achievementTimeoutRef = useRef<NodeJS.Timeout | null>(null)
	const dataInitTimeoutRef = useRef<NodeJS.Timeout | null>(null)

	// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤–∫–ª–∞–¥–∫–∏
	useEffect(() => {
		const updateTime = () => {
			setCurrentTime(new Date().toLocaleTimeString())
		}

		const handleVisibilityChange = () => {
			if (document.hidden) {
				if (timeUpdateRef.current) {
					clearInterval(timeUpdateRef.current)
				}
			} else {
				updateTime()
				timeUpdateRef.current = setInterval(updateTime, 1000) // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
			}
		}

		document.addEventListener("visibilitychange", handleVisibilityChange)
		handleVisibilityChange()

		return () => {
			document.removeEventListener("visibilitychange", handleVisibilityChange)
			if (timeUpdateRef.current) {
				clearInterval(timeUpdateRef.current)
			}
		}
	}, [])

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ auth - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û
	useEffect(() => {
		if (!authLoading && user && profile && !initializingRef.current) {
			console.log("üöÄ Starting data initialization...")
			initializingRef.current = true
			initializeData()
		} else if (!authLoading && !user) {
			// –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å—Ä–∞–∑—É —É–±–∏—Ä–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
			setPageLoading(false)
		}
	}, [authLoading, !!user, !!profile]) // –ò—Å–ø–æ–ª—å–∑—É–µ–º !! –¥–ª—è boolean –∑–Ω–∞—á–µ–Ω–∏–π

	useEffect(() => {
		setLocalIsWorking(isWorking)
	}, [isWorking])

	// –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
	useEffect(() => {
		return () => {
			if (achievementTimeoutRef.current) {
				clearTimeout(achievementTimeoutRef.current)
			}
			if (dataInitTimeoutRef.current) {
				clearTimeout(dataInitTimeoutRef.current)
			}
		}
	}, [])

	const initializeData = useCallback(async () => {
		setPageLoading(true)

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
		dataInitTimeoutRef.current = setTimeout(() => {
			console.log("‚è∞ Data initialization timeout")
			setPageLoading(false)
		}, 8000) // 8 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º

		try {
			console.log("üìä Loading cached data...")
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
			const cachedTaskTypes = appCache.get("task_types")
			const cachedCoins = appCache.get(`player_coins_${user?.id}`)

			if (cachedTaskTypes) {
				setTaskTypes(cachedTaskTypes)
				console.log("üíæ Task types loaded from cache")
			}
			if (cachedCoins !== null) {
				setPlayerCoins(cachedCoins)
				console.log("üíæ Coins loaded from cache")
			}

			// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
			const promises = []

			if (!cachedTaskTypes) {
				promises.push(
					fetchTaskTypes().catch((error) => {
						console.error("‚ùå Task types error:", error)
						return [] // Fallback to empty array
					}),
				)
			}

			if (cachedCoins === null) {
				promises.push(
					fetchPlayerCoins().catch((error) => {
						console.error("‚ùå Player coins error:", error)
						return 0 // Fallback to 0
					}),
				)
			}

			promises.push(
				checkScheduleSetup()
			)

			promises.push(
				checkDistrictSetup()
			)

			promises.push(
				fetchLeaderboard().catch((error) => {
					console.error("‚ùå Leaderboard error:", error)
					return [] // Fallback to empty array
				})
			)

			console.log("‚è≥ Waiting for data promises...")
			await Promise.allSettled(promises)
			console.log("‚úÖ Data initialization complete")
		} catch (error) {
			console.error("‚ùå Data initialization error:", error)
		} finally {
			setPageLoading(false)
			if (dataInitTimeoutRef.current) {
				clearTimeout(dataInitTimeoutRef.current)
			}
		}
	}, [user?.id]) // –¢–æ–ª—å–∫–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

	const fetchTaskTypes = useCallback(async () => {
		try {
			console.log("üìã Fetching task types...")
			const { data, error } = await supabase.from("task_types").select("*").order("name")

			if (error) throw error

			setTaskTypes(data || [])
			appCache.set("task_types", data || [], 60) // –ö—ç—à –Ω–∞ —á–∞—Å
			console.log("‚úÖ Task types loaded:", data?.length || 0)
		} catch (error) {
			console.error("‚ùå Error loading task types:", error)
			throw error
		}
	}, [])

	const fetchPlayerCoins = useCallback(async () => {
		if (!user) return

		try {
			console.log("ü™ô Fetching player coins...")
			const { employeeId, error: empError } = await authService.getEmployeeId(user.id)
			if (empError || !employeeId) {
				console.log("‚ö†Ô∏è No employee ID found")
				return
			}

			const { data: logs, error: logsError } = await supabase
				.from("task_logs")
				.select("units_completed, task_types!inner(name)")
				.eq("employee_id", employeeId)

			if (logsError) {
				console.error("‚ùå Logs error:", logsError)
				return
			}

			let totalCoins = 0
			logs?.forEach((log: any) => {
				const taskName = log.task_types.name
				const coinsPerUnit = GAME_CONFIG.TASK_REWARDS[taskName] || 5
				totalCoins += log.units_completed * coinsPerUnit
			})

			setPlayerCoins(totalCoins)
			appCache.set(`player_coins_${user.id}`, totalCoins, 10) // –ö—ç—à –Ω–∞ 10 –º–∏–Ω—É—Ç
			console.log("‚úÖ Player coins loaded:", totalCoins)
		} catch (error) {
			console.error("‚ùå Error loading coins:", error)
			throw error
		}
	}, [user?.id])

	const checkScheduleSetup = useCallback(() => {
		console.log("üìÖ Checking schedule setup...")
		if (profile && !profile.work_schedule) {
			console.log("‚ö†Ô∏è Schedule setup needed")
			setNeedsScheduleSetup(true)
			return true
		}
		console.log("‚úÖ Schedule check complete")
		return false
	}, [profile?.work_schedule])

	const checkDistrictSetup = useCallback(async () => {
		console.log("üè¢ Checking office setup...")
		if (!user) return false

		try {
			const { employeeId, error: empError } = await authService.getEmployeeId(user.id)
			if (empError || !employeeId) {
				console.log("‚ö†Ô∏è No employee ID found")
				return false
			}

			const { data: employee, error: employeeError } = await supabase
				.from("employees")
				.select("office_id")
				.eq("id", employeeId)
				.single()

			if (employeeError) {
				console.error("‚ùå Error checking office:", employeeError)
				return false
			}

			if (!employee?.office_id) {
				console.log("‚ö†Ô∏è Office setup needed")
				setNeedsDistrictSetup(true)
				return true
			}

			console.log("‚úÖ Office check complete")
			return false
		} catch (error) {
			console.error("‚ùå Error in office check:", error)
			return false
		}
	}, [user?.id])

	const fetchLeaderboard = useCallback(async () => {
		try {
			console.log("üìã Fetching leaderboard...")

			// –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–æ–≤ —Å –æ—Ç–º–µ—Ç–∫–æ–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			const { data, error } = await supabase
				.rpc('get_leaderboard_with_current_user', {
					current_user_id: user?.id
				})

			if (error) {
				console.error("‚ùå Error loading leaderboard:", error)
				// –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
				if (error.code === 'PGRST202' || error.message?.includes('function') || error.message?.includes('not found')) {
					console.log("‚ö†Ô∏è Leaderboard function not available, using empty leaderboard")
					setLeaderboard([])
					return
				}
				throw error
			}

			const leaderboardData = (data || []).map((leader: any, index: number) => ({
				name: leader.name,
				score: leader.score,
				rank: leader.rank,
				isCurrentUser: leader.is_current_user,
			}))

			setLeaderboard(leaderboardData)
			console.log("‚úÖ Leaderboard loaded:", leaderboardData.length)
		} catch (error) {
			console.error("‚ùå Error loading leaderboard:", error)
			// Fallback –∫ –ø—É—Å—Ç–æ–º—É –º–∞—Å—Å–∏–≤—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
			setLeaderboard([])
		}
	}, [user?.id])

	const handleBreakStart = useCallback(async () => {
		// –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
		// (–¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–∞—É–∑–æ–π —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏)
		if (!localIsPaused) {
			pauseAllTasks()
		}

		setIsOnBreak(true)

		toast({
			title: "üçΩÔ∏è –ü–µ—Ä–µ—Ä—ã–≤ –Ω–∞—á–∞—Ç",
			description: "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã",
		})
	}, [localIsPaused, pauseAllTasks, toast])

	const handleBreakEnd = useCallback(async () => {
		// –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
		// (–¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è –ù–ï –Ω–∞ –ø–∞—É–∑–µ)
		if (!localIsPaused) {
			resumeAllTasks()
		}

		setIsOnBreak(false)

		toast({
			title: "üçΩÔ∏è –ü–µ—Ä–µ—Ä—ã–≤ –∑–∞–≤–µ—Ä—à–µ–Ω",
			description: localIsPaused
				? "–ó–∞–¥–∞—á–∏ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞ –ø–∞—É–∑–µ (—Ä–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞)"
				: "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω—ã",
		})
	}, [localIsPaused, resumeAllTasks, toast])

	const handleScheduleSelect = async (schedule: string, hours: number) => {
		if (!user) return

		try {
			const { error } = await supabase
				.from("user_profiles")
				.update({
					work_schedule: schedule,
					work_hours: hours,
				})
				.eq("id", user.id)

			if (error) throw error

			setNeedsScheduleSetup(false)

			// –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø—Ä–æ—Ñ–∏–ª—è
			if (profile) {
				const updatedProfile = { ...profile, work_schedule: schedule, work_hours: hours }
				appCache.set("user_profile", updatedProfile, 30)
			}

			toast({
				title: "–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
				description: `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥—Ä–∞—Ñ–∏–∫ ${schedule}`,
			})
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:", error)
			toast({
				title: "–û—à–∏–±–∫–∞",
				description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫",
				variant: "destructive",
			})
		}
	}

	const handleDistrictSelect = async (districtId: number, districtName: string) => {
		if (!user) return

		try {
			// –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ñ–∏—Å –≤ —Ç–∞–±–ª–∏—Ü–µ employees
			const { employeeId, error: empError } = await authService.getEmployeeId(user.id)
			if (empError || !employeeId) {
				throw new Error("Employee not found")
			}

			const { error: employeeError } = await supabase
				.from("employees")
				.update({ office_id: districtId })
				.eq("id", employeeId)

			if (employeeError) throw employeeError

			// –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤ user_profiles –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
			const { error: profileError } = await supabase
				.from("user_profiles")
				.update({ office_id: districtId })
				.eq("id", user.id)

			if (profileError) throw profileError

			setNeedsDistrictSetup(false)

			toast({
				title: "–û—Ñ–∏—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
				description: `–í—ã–±—Ä–∞–Ω –æ—Ñ–∏—Å: ${districtName}`,
			})
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ñ–∏—Å–∞:", error)
			toast({
				title: "–û—à–∏–±–∫–∞",
				description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ñ–∏—Å",
				variant: "destructive",
			})
		}
	}

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—á–∏ (—Ç–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏)
	const handleStartTask = useCallback(
		async (taskId: number, taskName: string) => {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
			if (!localIsWorking && !isWorking) {
				toast({
					title: "‚ö†Ô∏è –ù–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å",
					description: "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—Ç—å—Ç–µ—Å—å –Ω–∞ —Ä–∞–±–æ—Ç–µ",
					variant: "destructive",
				})
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—É–∑—É
			if (localIsPaused) {
				toast({
					title: "‚è∏Ô∏è –†–∞–±–æ—Ç–∞ –Ω–∞ –ø–∞—É–∑–µ",
					description: "–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç–µ —Ä–∞–±–æ—Ç—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∑–∞–¥–∞—á–∏",
					variant: "destructive",
				})
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ä—ã–≤
			if (isOnBreak) {
				toast({
					title: "‚òï –ü–µ—Ä–µ—Ä—ã–≤ –∞–∫—Ç–∏–≤–µ–Ω",
					description: "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∑–∞–¥–∞—á–∏",
					variant: "destructive",
				})
				return
			}

			try {
				// –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º await –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
				const success = await startTask(taskId, taskName)

				if (!success) {
					return // startTask —É–∂–µ –ø–æ–∫–∞–∑–∞–ª toast —Å –æ—à–∏–±–∫–æ–π
				}

				toast({
					title: "üéÆ –ó–∞–¥–∞—á–∞ –Ω–∞—á–∞—Ç–∞!",
					description: `–ù–∞—á–∞—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${taskName}`,
				})

				// –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
				startSession(taskId).catch((error) => {
					console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:", error)
					// –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º UI –ø—Ä–∏ –æ—à–∏–±–∫–µ
					stopTask(taskId)

					toast({
						title: "–û—à–∏–±–∫–∞",
						description: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–¥–∞—á—É",
						variant: "destructive",
					})
				})

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –º—É–ª—å—Ç–∏–∑–∞–¥–∞—á–Ω–æ—Å—Ç–∏ (—Ç–µ–ø–µ—Ä—å 4+ –∑–∞–¥–∞—á)
				if (activeTasks.length >= 4) {
					checkForMultitaskingAchievement()
				}
			} catch (error) {
				console.error("–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—á–∏:", error)
				toast({
					title: "–û—à–∏–±–∫–∞",
					description: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–¥–∞—á—É",
					variant: "destructive",
				})
			}
		},
		[localIsWorking, isWorking, localIsPaused, activeTasks.length, isOnBreak, startTask, startSession, stopTask, toast],
	)

	const handleStopTask = async (taskId: number) => {
		const task = activeTasks.find((t) => t.taskTypeId === taskId)
		if (!task) return

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –µ–¥–∏–Ω–∏—Ü
		setCompletingTask({
			taskTypeId: task.taskTypeId,
			taskName: task.taskName,
			startTime: task.startTime,
			currentUnits: task.units, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü
		})
		setShowCompletionDialog(true)
	}

	const handleSaveCompletion = async (units: number, notes: string) => {
		if (!completingTask || !user) return

		try {
			const { employeeId, error: empError } = await authService.getEmployeeId(user.id)
			if (empError || !employeeId) {
				throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
			}

			// –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–æ–Ω—É—Å–æ–≤
			const today = new Date().toISOString().split("T")[0]
			const { data: todayTasks } = await supabase
				.from("task_logs")
				.select("task_types!inner(name), units_completed, time_spent_minutes, work_date")
				.eq("employee_id", employeeId)
				.eq("work_date", today)

			const dailyTasksForBonus =
				todayTasks?.map((t: any) => ({
					taskName: t.task_types?.name,
					units: t.units_completed,
					timeMinutes: t.time_spent_minutes,
					date: t.work_date,
				})) || []

			// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
			const elapsedMinutes = Math.floor((Date.now() - completingTask.startTime.getTime()) / 60000)

			// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—á–∫–∏ —Å –±–æ–Ω—É—Å–∞–º–∏
			const rewardCalc = RewardSystem.calculateReward(
				completingTask.taskName,
				units,
				elapsedMinutes,
				dailyTasksForBonus,
			)

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
			const { error: logError } = await supabase.from("task_logs").insert({
				employee_id: employeeId,
				task_type_id: completingTask.taskTypeId,
				units_completed: units,
				time_spent_minutes: elapsedMinutes,
				work_date: new Date().toISOString().split("T")[0],
				notes: notes || null,
				is_active: false,
				started_at: completingTask.startTime.toISOString(),
			})

			if (logError) throw logError

			// –í–ê–ñ–ù–û: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É –∏ —Ç–∞–π–º–µ—Ä
			await endSession(completingTask.taskTypeId)
			stopTask(completingTask.taskTypeId)

			const coinsEarned = rewardCalc.totalPoints
			const newTotalCoins = playerCoins + coinsEarned
			setPlayerCoins(newTotalCoins)

			// –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –º–æ–Ω–µ—Ç
			appCache.set(`player_coins_${user.id}`, newTotalCoins, 10)

			const timeFormatted = `${Math.floor(elapsedMinutes / 60)}:${(elapsedMinutes % 60).toString().padStart(2, '0')}`

			toast({
				title: "üéâ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
				description: `+${coinsEarned} –æ—á–∫–æ–≤! ${rewardCalc.bonusReasons.length > 0 ? `–ë–æ–Ω—É—Å—ã: ${rewardCalc.bonusReasons.join(", ")}` : ""} –í—Ä–µ–º—è: ${timeFormatted}`,
			})

			checkForAchievements(newTotalCoins)

			setCompletingTask(null)
			setShowCompletionDialog(false)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–∏–≥—Ä—ã—à –∫–æ–ª–µ—Å–æ–º —Ñ–æ—Ä—Ç—É–Ω—ã (—Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å 5%)
			if (Math.random() < 0.05) {
				setShowPrizeWheel(true)
			}
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:", error)
			toast({
				title: "–û—à–∏–±–∫–∞",
				description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏",
				variant: "destructive",
			})
		}
	}

	const checkForAchievements = (coins: number) => {
		if (coins >= 1000 && playerCoins < 1000) {
			const achievement = GAME_CONFIG.ACHIEVEMENTS["thousand_club"]
			if (achievement) {
				setNewAchievement({ id: "thousand_club", ...achievement })
				// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä—É—Ç–∏–ª–∫—É –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
				achievementTimeoutRef.current = setTimeout(() => {
					setShowPrizeWheel(true)
				}, 2000) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –ø–æ–ø–∞–ø–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
			}
		}
	}

	const checkForMultitaskingAchievement = () => {
		const achievement = GAME_CONFIG.ACHIEVEMENTS["multitasker"]
		if (achievement) {
			setNewAchievement({ id: "multitasker", ...achievement })
		}
	}

	const handleSignOut = async () => {
		// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
		activeTasks.forEach((task) => {
			endSession(task.taskTypeId)
		})
		await signOut()
		toast({
			title: "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
			description: "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
		})
	}

	// –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
	const handleForceStopAllTasks = () => {
		console.log("üõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á:", activeTasks.length)

		activeTasks.forEach((task) => {
			console.log("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É:", task.taskName)
			stopTask(task.taskTypeId)
			endSession(task.taskTypeId)
		})

		toast({
			title: "‚èπÔ∏è –ó–∞–¥–∞—á–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã",
			description: "–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±—ã–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
			variant: "destructive",
		})
	}

	// –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
	const handleWorkSessionChange = useCallback((working: boolean, paused?: boolean) => {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞—É–∑—ã
		const wasPaused = localIsPaused
		const isPausedNow = paused || false

		setLocalIsWorking(working)
		setLocalIsPaused(isPausedNow)

		// –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—É–∑—ã –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —É–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä–∞–º–∏ –∑–∞–¥–∞—á
		if (wasPaused !== isPausedNow) {
			if (isPausedNow) {
				// –†–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É - –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –∑–∞–¥–∞—á
				pauseAllTasks()
			} else {
				// –†–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è —Å–Ω—è—Ç–∞ —Å –ø–∞—É–∑—ã - –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –∑–∞–¥–∞—á
				// –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï –Ω–∞ –æ–±–µ–¥–µ
				if (!isOnBreak) {
					resumeAllTasks()
				}
			}
		}

		// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å useWorkSession
		forceUpdateWorkingStatus(working)
	}, [localIsPaused, isOnBreak, pauseAllTasks, resumeAllTasks, forceUpdateWorkingStatus])

	const handlePrizeWon = async (prize: Prize) => {
		setWonPrize(prize)

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–π –ø—Ä–∏–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
		if (user) {
			try {
				const { employeeId } = await authService.getEmployeeId(user.id)
				if (employeeId) {
					await supabase.from("employee_prizes").insert({
						employee_id: employeeId,
						prize_name: prize.name,
						prize_description: prize.description,
						prize_icon: prize.icon,
						prize_rarity: prize.rarity,
						won_at: new Date().toISOString(),
						is_claimed: false,
					})
				}
			} catch (error) {
				console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–∑–∞:", error)
			}
		}

		toast({
			title: "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!",
			description: `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: ${prize.name}!`,
		})
	}

	const handleCloseWheel = () => {
		setShowPrizeWheel(false)
		setWonPrize(null)
	}

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
	const handleAchievementClose = () => {
		setNewAchievement(null)
		// –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
		if (achievementTimeoutRef.current) {
			clearTimeout(achievementTimeoutRef.current)
			achievementTimeoutRef.current = null
		}
	}

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º - –ú–ï–ú–û–ò–ó–ò–†–£–ï–ú
	const groupedTasks = useMemo(() => {
		return Object.entries(GAME_CONFIG.TASK_GROUPS)
			.map(([groupKey, groupData]) => ({
				key: groupKey,
				name: groupData.name,
				icon: groupData.icon,
				color: groupData.color,
				tasks: taskTypes.filter((task) => groupData.tasks.includes(task.name)),
			}))
			.filter((group) => group.tasks.length > 0) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã —Å –∑–∞–¥–∞—á–∞–º–∏
	}, [taskTypes])

	// –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å —Ç–∞–π–º–µ—Ä–∞–º–∏ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ - –ú–ï–ú–û–ò–ó–ò–†–£–ï–ú
	const activeTasksWithTimers = useMemo(() => {
		return activeTasks.map((task) => ({
			id: task.id,
			taskTypeId: task.taskTypeId,
			name: task.taskName,
			startTime: task.startTime,
			elapsedTime: task.elapsedTime,
			units: task.units,
			isActive: task.isActive,
		}))
	}, [activeTasks])

	useEffect(() => {
		if (profile) {
			// –í—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ
			const levelData = calculateLevel(playerCoins)
			const nextLevelData = getNextLevel(playerCoins)
			setCurrentLevel(levelData)
			setNextLevel(nextLevelData)
		}
	}, [profile, playerCoins])

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ auth –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ò–õ–ò –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
	if (authLoading || (user && profile && pageLoading)) {
		return (
			<AuthGuard>
				<main className="min-h-screen bg-gradient-to-br from-purple-400 via-pink-500 to-red-500 p-4 flex items-center justify-center">
					<PixelCard>
						<div className="p-8 text-center">
							<div className="text-6xl animate-bounce mb-4">üéÆ</div>
							<div className="text-2xl font-bold">{authLoading ? "–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã..." : "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."}</div>
							<div className="text-lg mt-2 opacity-80">
								{authLoading ? "–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É" : "–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å"}
							</div>
							<div className="mt-4">
								<div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-white"></div>
							</div>
						</div>
					</PixelCard>
					<Toaster />
				</main>
			</AuthGuard>
		)
	}

	// –£—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–æ–ª—å–∫–æ JSX, –Ω–µ —Ö—É–∫–æ–≤
	if (needsScheduleSetup) {
		return (
			<AuthGuard>
				<main className="min-h-screen bg-gradient-to-br from-purple-400 via-pink-500 to-red-500 p-4 flex items-center justify-center">
					<ScheduleSelector onScheduleSelect={handleScheduleSelect} loading={false} />
					<Toaster />
				</main>
			</AuthGuard>
		)
	}

	if (needsDistrictSetup) {
		return (
			<AuthGuard>
				<main className="min-h-screen bg-gradient-to-br from-purple-400 via-pink-500 to-red-500 p-4 flex items-center justify-center">
					<OfficeSelector onOfficeSelect={handleDistrictSelect} loading={false} />
					<Toaster />
				</main>
			</AuthGuard>
		)
	}

	return (
		<AuthGuard>
			<main className="min-h-screen bg-gradient-to-br from-purple-400 via-pink-500 to-red-500 p-4">
				<div className="container mx-auto py-6">
					<Navigation />

					{/* –ò–≥—Ä–æ–≤–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
					<div className="flex items-center justify-between mb-6">
						<div className="text-white">
							<h1 className="text-4xl font-bold">üéÆ –†–∞–±–æ—á–∞—è —Å—Ç–∞–Ω—Ü–∏—è</h1>
							<p className="text-xl">–ò–≥—Ä–æ–∫: {profile?.full_name || "–ó–∞–≥—Ä—É–∑–∫–∞..."}</p>
						</div>
						<div className="flex items-center gap-4">
							<PixelCard className="bg-gradient-to-r from-yellow-200 to-yellow-300">
								<div className="p-3">
									<CoinDisplay coins={playerCoins} animated />
								</div>
							</PixelCard>
							<PixelCard>
								<div className="p-3 flex items-center gap-2 text-lg font-mono">
									<Clock className="h-5 w-5" />
									{currentTime}
								</div>
							</PixelCard>
							<PixelButton onClick={handleSignOut} variant="secondary" size="sm">
								<LogOut className="h-4 w-4 mr-2" />
								–í—ã–π—Ç–∏
							</PixelButton>
						</div>
					</div>

					<div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
						{/* –ü–∞–Ω–µ–ª—å –∑–∞–¥–∞—á */}
						<div className="lg:col-span-3 space-y-6">
							{/* –ü–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á - –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å—Ç–∏–ª—å */}
							{activeTasks.length > 0 ? (
								<div className="relative">
									<div className="
										bg-gradient-to-br from-green-200 to-green-300
										border-4 border-black rounded-none
										shadow-[4px_4px_0px_0px_rgba(0,0,0,1)]
										p-4
									">
										{/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ */}
										<div className="absolute top-1 left-1 w-2 h-2 bg-yellow-400 border border-black"></div>
										<div className="absolute top-1 right-1 w-2 h-2 bg-red-400 border border-black"></div>

										<div className="flex items-center gap-3 mb-4">
											<div className="bg-white border-2 border-black p-2 shadow-[2px_2px_0px_0px_rgba(0,0,0,1)]">
												<span className="text-xl">‚ö°</span>
											</div>
											<div>
												<h3 className="font-mono font-black text-xl text-black uppercase tracking-wide">
													–ê–ö–¢–ò–í–ù–´–ï –ó–ê–î–ê–ß–ò
												</h3>
												<p className="font-mono text-sm text-black font-semibold">
													{activeTasks.length} –∏–∑ 5 —Å–ª–æ—Ç–æ–≤ –∑–∞–Ω—è—Ç—ã
												</p>
											</div>
										</div>

										{/* –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á */}
										<div className="space-y-3">
											{activeTasks.map((task) => {
												const formattedTime = getFormattedTime(task.taskTypeId)
												const minutes = getMinutes(task.taskTypeId)

												return (
													<div
														key={task.taskTypeId}
														className="bg-black border-2 border-white p-3 shadow-[2px_2px_0px_0px_rgba(0,0,0,1)]"
													>
														<div className="flex items-center justify-between">
															<div className="flex items-center gap-3">
																<div className="flex items-center gap-2">
																	<div className="w-2 h-2 bg-green-400 animate-pulse"></div>
																	<span className="font-mono font-black text-green-400 uppercase text-sm">
																		{task.taskName}
																	</span>
																</div>

																{/* –°—á–µ—Ç—á–∏–∫ –µ–¥–∏–Ω–∏—Ü —Å –∫–Ω–æ–ø–∫–∞–º–∏ */}
																<div className="flex items-center gap-1 bg-gray-800 border border-gray-600 rounded p-1">
																	<button
																		onClick={() => {
																			const newUnits = Math.max(0, task.units - 1)
																			updateUnits(task.taskTypeId, newUnits)
																		}}
																		disabled={task.units <= 0}
																		className="w-6 h-6 bg-red-600 hover:bg-red-700 disabled:bg-gray-600 border border-white text-white text-xs flex items-center justify-center"
																	>
																		-
																	</button>

																	<div className="flex items-center gap-1 min-w-[60px] justify-center">
																		<input
																			type="number"
																			min="0"
																			value={task.units}
																			onChange={(e) => {
																				const value = parseInt(e.target.value) || 0
																				updateUnits(task.taskTypeId, value)
																			}}
																			className="w-10 h-6 bg-transparent text-center text-sm text-green-400 font-mono font-black border-0 outline-none"
																		/>
																		<span className="text-xs text-gray-400">–µ–¥</span>
																	</div>

																	<button
																		onClick={() => {
																			const newUnits = task.units + 1
																			updateUnits(task.taskTypeId, newUnits)
																		}}
																		className="w-6 h-6 bg-green-600 hover:bg-green-700 border border-white text-white text-xs flex items-center justify-center"
																	>
																		+
																	</button>
																</div>
															</div>

															<div className="flex items-center gap-3">
																<div className="text-right">
																	<div className="font-mono font-black text-lg text-green-400">
																		{formattedTime}
																	</div>
																	<div className="font-mono text-xs text-gray-300">
																		{minutes} –º–∏–Ω
																	</div>
																</div>

																<button
																	onClick={() => handleStopTask(task.taskTypeId)}
																	className="
																		bg-red-500 hover:bg-red-600 
																		border-2 border-white rounded-none
																		shadow-[2px_2px_0px_0px_rgba(0,0,0,1)]
																		hover:shadow-[1px_1px_0px_0px_rgba(0,0,0,1)]
																		hover:translate-x-[1px] hover:translate-y-[1px]
																		transition-all duration-100
																		p-2
																	"
																>
																	<Square className="h-4 w-4 text-white" />
																</button>
															</div>
														</div>
													</div>
												)
											})}
										</div>

										{/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
										<div className="mt-4 bg-white border-2 border-black p-2 shadow-[2px_2px_0px_0px_rgba(0,0,0,1)]">
											<div className="font-mono text-xs text-black text-center">
												üí° –ú–∞–∫—Å–∏–º—É–º 5 –∑–∞–¥–∞—á –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
											</div>
										</div>

										{/* –ù–∏–∂–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ */}
										<div className="absolute bottom-1 left-1 w-2 h-2 bg-green-400 border border-black"></div>
										<div className="absolute bottom-1 right-1 w-2 h-2 bg-blue-400 border border-black"></div>
									</div>
									<div className="absolute inset-0 bg-black translate-x-1 translate-y-1 -z-10 rounded-none"></div>
								</div>
							) : (
								<div className="relative">
									<div className="
										bg-gradient-to-br from-gray-200 to-gray-300
										border-4 border-black rounded-none
										shadow-[4px_4px_0px_0px_rgba(0,0,0,1)]
										p-4
									">
										{/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ */}
										<div className="absolute top-1 left-1 w-2 h-2 bg-yellow-400 border border-black"></div>
										<div className="absolute top-1 right-1 w-2 h-2 bg-red-400 border border-black"></div>

										<div className="flex items-center gap-3 mb-4">
											<div className="bg-white border-2 border-black p-2 shadow-[2px_2px_0px_0px_rgba(0,0,0,1)]">
												<span className="text-xl">‚è∏Ô∏è</span>
											</div>
											<div>
												<h3 className="font-mono font-black text-xl text-black uppercase tracking-wide">
													–ê–ö–¢–ò–í–ù–´–ï –ó–ê–î–ê–ß–ò
												</h3>
												<p className="font-mono text-sm text-black font-semibold">
													–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
												</p>
											</div>
										</div>

										<div className="bg-black border-2 border-white p-6 shadow-[2px_2px_0px_0px_rgba(0,0,0,1)] text-center">
											<div className="text-4xl mb-2">üéÆ</div>
											<div className="font-mono text-white font-black">–í–´–ë–ï–†–ò–¢–ï –ó–ê–î–ê–ß–£</div>
											<div className="font-mono text-gray-300 text-sm mt-1">–ù–∞—á–Ω–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–Ω–∏–∑—É</div>
										</div>

										{/* –ù–∏–∂–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ */}
										<div className="absolute bottom-1 left-1 w-2 h-2 bg-green-400 border border-black"></div>
										<div className="absolute bottom-1 right-1 w-2 h-2 bg-blue-400 border border-black"></div>
									</div>
									<div className="absolute inset-0 bg-black translate-x-1 translate-y-1 -z-10 rounded-none"></div>
								</div>
							)}

							{/* –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã - –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å—Ç–∏–ª—å */}
							<div className="relative">
								<div className={`
									${(localIsWorking || isWorking)
										? 'bg-gradient-to-br from-green-200 to-green-300'
										: 'bg-gradient-to-br from-red-200 to-red-300'
									}
									border-4 border-black rounded-none
									shadow-[4px_4px_0px_0px_rgba(0,0,0,1)]
									p-4
								`}>
									{/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ */}
									<div className="absolute top-1 left-1 w-2 h-2 bg-yellow-400 border border-black"></div>
									<div className="absolute top-1 right-1 w-2 h-2 bg-blue-400 border border-black"></div>

									<div className="flex items-center justify-center gap-4">
										<div className="flex items-center gap-3">
											<div className="bg-white border-2 border-black p-2 shadow-[2px_2px_0px_0px_rgba(0,0,0,1)]">
												<span className="text-2xl">‚ö°</span>
											</div>
											<div>
												<h2 className="font-mono font-black text-2xl text-black uppercase tracking-wide">
													–ö–í–ï–°–¢–´
												</h2>
												<p className="font-mono text-sm text-black font-semibold">
													–ò–≥—Ä–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è
												</p>
											</div>
										</div>

										{/* –°—Ç–∞—Ç—É—Å—ã –≤ –ø–∏–∫—Å–µ–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ */}
										<div className="flex gap-2">
											{!localIsWorking && !isWorking && (
												<div className="bg-red-500 border-2 border-black px-3 py-1 shadow-[2px_2px_0px_0px_rgba(0,0,0,1)]">
													<span className="font-mono text-sm font-black text-white uppercase">–ù–ï –ù–ê –†–ê–ë–û–¢–ï</span>
												</div>
											)}
											{(localIsWorking || isWorking) && !localIsPaused && (
												<div className="bg-green-500 border-2 border-black px-3 py-1 shadow-[2px_2px_0px_0px_rgba(0,0,0,1)]">
													<span className="font-mono text-sm font-black text-white uppercase">–ù–ê –†–ê–ë–û–¢–ï</span>
												</div>
											)}
											{(localIsWorking || isWorking) && localIsPaused && (
												<div className="bg-yellow-500 border-2 border-black px-3 py-1 shadow-[2px_2px_0px_0px_rgba(0,0,0,1)]">
													<span className="font-mono text-sm font-black text-white uppercase">–ù–ê –ü–ê–£–ó–ï</span>
												</div>
											)}
											{activeTasks.length > 0 && (
												<div className="bg-blue-500 border-2 border-black px-3 py-1 shadow-[2px_2px_0px_0px_rgba(0,0,0,1)]">
													<span className="font-mono text-sm font-black text-white uppercase">
														{activeTasks.length} –ê–ö–¢–ò–í–ù–´–•
													</span>
												</div>
											)}
										</div>
									</div>

									{/* –ù–∏–∂–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ */}
									<div className="absolute bottom-1 left-1 w-2 h-2 bg-red-400 border border-black"></div>
									<div className="absolute bottom-1 right-1 w-2 h-2 bg-green-400 border border-black"></div>
								</div>
								<div className="absolute inset-0 bg-black translate-x-1 translate-y-1 -z-10 rounded-none"></div>
							</div>

							{/* –ì—Ä—É–ø–ø—ã –∑–∞–¥–∞—á */}
							{groupedTasks.map((group) => (
								<TaskGroup
									key={group.key}
									groupName={group.name}
									groupIcon={group.icon}
									groupColor={group.color}
									tasks={group.tasks}
									activeTasks={activeTasks.map((task) => task.taskTypeId)}
									onStartTask={handleStartTask}
									onStopTask={handleStopTask}
									getTaskTime={getFormattedTime}
								/>
							))}
						</div>

						{/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
						<div className="space-y-6">
							{/* –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ - –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å—Ç–∏–ª—å */}
							<div className="relative">
								<div className="
									bg-gradient-to-br from-blue-300 to-blue-400 
									border-4 border-black rounded-none
									shadow-[4px_4px_0px_0px_rgba(0,0,0,1)]
									p-4
									transition-all duration-100
									hover:translate-x-[1px] hover:translate-y-[1px] 
									hover:shadow-[3px_3px_0px_0px_rgba(0,0,0,1)]
								">
									{/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ */}
									<div className="absolute top-1 left-1 w-2 h-2 bg-yellow-400 border border-black"></div>
									<div className="absolute top-1 right-1 w-2 h-2 bg-red-400 border border-black"></div>

									{/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è —Å –∫–Ω–æ–ø–∫–æ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
									<div className="flex items-center justify-between mb-3">
										<button
											onClick={() => router.push("/profile")}
											className="flex items-center gap-3 group flex-1"
										>
											<div className="bg-white border-2 border-black p-2 shadow-[2px_2px_0px_0px_rgba(0,0,0,1)]">
												<Trophy className="h-6 w-6 text-yellow-600" />
											</div>
											<div className="text-left">
												<h3 className="font-mono font-black text-lg text-black uppercase tracking-wide">
													–ü–†–û–§–ò–õ–¨
												</h3>
												<p className="font-mono text-sm text-black font-semibold">
													–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞
												</p>
											</div>
										</button>

										{/* –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
										<PixelButton
											onClick={() => router.push("/profile")}
											size="sm"
											variant="secondary"
											className="ml-2"
										>
											<Edit className="h-4 w-4" />
										</PixelButton>
									</div>

									{/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–≤–Ω–µ - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è */}
									<div className="bg-black border-2 border-white p-3 shadow-[2px_2px_0px_0px_rgba(0,0,0,1)]">
										<div className="flex items-center justify-between">
											<div className="flex items-center gap-2">
												<span className="text-2xl">{currentLevel.icon}</span>
												<div className="text-white">
													<div className="font-mono font-black text-sm uppercase">{currentLevel.name}</div>
													<div className="font-mono text-xs">–£—Ä–æ–≤–µ–Ω—å {currentLevel.level}</div>
												</div>
											</div>

											<div className="text-right text-white">
												<div className="font-mono font-black text-lg">{playerCoins}</div>
												<div className="font-mono text-xs">–æ—á–∫–æ–≤</div>
											</div>
										</div>

										{/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –≤ –ø–∏–∫—Å–µ–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ */}
										<div className="mt-3">
											{nextLevel ? (
												<div className="space-y-1">
													<div className="text-xs text-white font-mono flex justify-between">
														<span>–î–æ {nextLevel.name}:</span>
														<span>{nextLevel.minCoins - playerCoins}</span>
													</div>
													<div className="relative h-3 bg-gray-800 border border-white">
														<div
															className="h-full bg-gradient-to-r from-yellow-400 to-yellow-600 transition-all duration-500"
															style={{
																width: `${Math.min(100, ((playerCoins - currentLevel.minCoins) / (nextLevel.minCoins - currentLevel.minCoins)) * 100)}%`
															}}
														/>
													</div>
												</div>
											) : (
												<div className="text-xs text-yellow-400 font-mono text-center">
													üèÜ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –£–†–û–í–ï–ù–¨ üèÜ
												</div>
											)}
										</div>
									</div>
								</div>
							</div>
						</div>

						{/* –†–∞–±–æ—á–∞—è —Å–º–µ–Ω–∞ - –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å—Ç–∏–ª—å */}
						<div className="relative">
							<div className={`
									${localIsWorking || isWorking
									? localIsPaused
										? 'bg-gradient-to-br from-yellow-300 to-yellow-400'  // –ñ–µ–ª—Ç—ã–π –¥–ª—è –ø–∞—É–∑—ã
										: 'bg-gradient-to-br from-green-300 to-green-400'   // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —Ä–∞–±–æ—Ç—ã
									: 'bg-gradient-to-br from-gray-300 to-gray-400'        // –°–µ—Ä—ã–π –¥–ª—è –Ω–µ —Ä–∞–±–æ—Ç—ã
								}
									border-4 border-black rounded-none
									shadow-[4px_4px_0px_0px_rgba(0,0,0,1)]
									p-4
								`}>
								{/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ */}
								<div className="absolute top-1 left-1 w-2 h-2 bg-yellow-400 border border-black"></div>
								<div className="absolute top-1 right-1 w-2 h-2 bg-red-400 border border-black"></div>

								<div className="flex items-center gap-3 mb-3">
									<div className="bg-white border-2 border-black p-2 shadow-[2px_2px_0px_0px_rgba(0,0,0,1)]">
										<span className="text-xl">
											{localIsPaused ? '‚è∏Ô∏è' : (localIsWorking || isWorking) ? 'üü¢' : 'üî¥'}
										</span>
									</div>
									<div>
										<h3 className="font-mono font-black text-base text-black uppercase tracking-wide">
											{localIsPaused ? '–ù–ê –ü–ê–£–ó–ï' : (localIsWorking || isWorking) ? '–ù–ê –†–ê–ë–û–¢–ï' : '–ù–ï –ù–ê –†–ê–ë–û–¢–ï'}
										</h3>
										<p className="font-mono text-sm text-black font-semibold">
											{localIsPaused
												? '–†–∞–±–æ—Ç–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'
												: (localIsWorking || isWorking)
													? '–ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∑–∞–¥–∞—á–∏'
													: '–í—Ä–µ–º—è –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É'
											}
										</p>
									</div>
								</div>

								<WorkSessionEnhanced
									onSessionChange={handleWorkSessionChange}
									activeTasks={activeTasks.map(task => ({
										id: task.id,
										taskTypeId: task.taskTypeId,
										taskName: task.taskName
									}))}
									onForceStopAllTasks={handleForceStopAllTasks}
								/>

								{/* –ù–∏–∂–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ */}
								<div className="absolute bottom-1 left-1 w-2 h-2 bg-green-400 border border-black"></div>
								<div className="absolute bottom-1 right-1 w-2 h-2 bg-blue-400 border border-black"></div>
							</div>
							<div className="absolute inset-0 bg-black translate-x-1 translate-y-1 -z-10 rounded-none"></div>
						</div>

						{/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ñ–∏—Å–∞ - –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å—Ç–∏–ª—å */}
						<div className="relative">
							<div className="
									bg-gradient-to-br from-purple-300 to-purple-400 
									border-4 border-black rounded-none
									shadow-[4px_4px_0px_0px_rgba(0,0,0,1)]
									p-4
								">
								{/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ */}
								<div className="absolute top-1 left-1 w-2 h-2 bg-yellow-400 border border-black"></div>
								<div className="absolute top-1 right-1 w-2 h-2 bg-red-400 border border-black"></div>

								<div className="flex items-center gap-3 mb-3">
									<div className="bg-white border-2 border-black p-2 shadow-[2px_2px_0px_0px_rgba(0,0,0,1)]">
										<span className="text-xl">üè¢</span>
									</div>
									<div>
										<h3 className="font-mono font-black text-base text-black uppercase tracking-wide">
											–û–§–ò–° {profile?.office_name || "–†–ê–°–°–í–ï–¢"}
										</h3>
										<p className="font-mono text-sm text-black font-semibold">
											–°–≤–æ–¥–∫–∞ –∫–æ–º–∞–Ω–¥—ã
										</p>
									</div>
								</div>

								{/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –ø–∏–∫—Å–µ–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ */}
								<div className="bg-black border-2 border-white p-3 shadow-[2px_2px_0px_0px_rgba(0,0,0,1)]">
									<div className="grid grid-cols-2 gap-3 text-white font-mono">
										<div>
											<div className="text-xs text-gray-300">–í–°–ï–ì–û</div>
											<div className="font-black text-lg text-green-400">
												{profile?.office_stats?.total_employees || "0"}
											</div>
										</div>
										<div>
											<div className="text-xs text-gray-300">–û–ù–õ–ê–ô–ù</div>
											<div className="font-black text-lg text-blue-400">
												{profile?.office_stats?.working_employees || "0"}
											</div>
										</div>
										<div>
											<div className="text-xs text-gray-300">–°–ï–ì–û–î–ù–Ø</div>
											<div className="font-black text-lg text-yellow-400">
												{profile?.office_stats?.total_hours_today
													? `${Math.round(profile.office_stats.total_hours_today)}—á`
													: "0—á"
												}
											</div>
										</div>
										<div>
											<div className="text-xs text-gray-300">–°–†–ï–î–ù.</div>
											<div className="font-black text-lg text-purple-400">
												{profile?.office_stats?.avg_hours_today
													? `${Math.round(profile.office_stats.avg_hours_today)}—á`
													: "0—á"
												}
											</div>
										</div>
									</div>
								</div>

								{/* –ù–∏–∂–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ */}
								<div className="absolute bottom-1 left-1 w-2 h-2 bg-green-400 border border-black"></div>
								<div className="absolute bottom-1 right-1 w-2 h-2 bg-blue-400 border border-black"></div>
							</div>
							<div className="absolute inset-0 bg-black translate-x-1 translate-y-1 -z-10 rounded-none"></div>
						</div>

						{/* –ü–µ—Ä–µ—Ä—ã–≤/–û–±–µ–¥ - –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å—Ç–∏–ª—å */}
						<div className="relative">
							<div className={`
									${isOnBreak
									? 'bg-gradient-to-br from-orange-300 to-orange-400'
									: 'bg-gradient-to-br from-gray-300 to-gray-400'
								}
									border-4 border-black rounded-none
									shadow-[4px_4px_0px_0px_rgba(0,0,0,1)]
									p-4
								`}>
								{/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ */}
								<div className="absolute top-1 left-1 w-2 h-2 bg-yellow-400 border border-black"></div>
								<div className="absolute top-1 right-1 w-2 h-2 bg-red-400 border border-black"></div>

								<div className="flex items-center gap-3 mb-3">
									<div className="bg-white border-2 border-black p-2 shadow-[2px_2px_0px_0px_rgba(0,0,0,1)]">
										<span className="text-xl">üçΩÔ∏è</span>
									</div>
									<div>
										<h3 className="font-mono font-black text-base text-black uppercase tracking-wide">
											{isOnBreak ? '–ù–ê –ü–ï–†–ï–†–´–í–ï' : '–û–ë–ï–î'}
										</h3>
										<p className="font-mono text-sm text-black font-semibold">
											{isOnBreak ? '–û—Ç–¥—ã—Ö–∞–µ–º' : '–î–æ—Å—Ç—É–ø–µ–Ω –ø–µ—Ä–µ—Ä—ã–≤'}
										</p>
									</div>
								</div>

								<BreakControls
									onBreakStart={handleBreakStart}
									onBreakEnd={handleBreakEnd}
									isOnBreak={isOnBreak}
									isWorking={localIsWorking || isWorking}
								/>

								{/* –ù–∏–∂–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ */}
								<div className="absolute bottom-1 left-1 w-2 h-2 bg-green-400 border border-black"></div>
								<div className="absolute bottom-1 right-1 w-2 h-2 bg-blue-400 border border-black"></div>
							</div>
							<div className="absolute inset-0 bg-black translate-x-1 translate-y-1 -z-10 rounded-none"></div>
						</div>

						{/* –õ–∏–¥–µ—Ä—ã –Ω–µ–¥–µ–ª–∏ - –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å—Ç–∏–ª—å */}
						<div className="relative">
							<div className="
									bg-gradient-to-br from-yellow-300 to-yellow-400 
									border-4 border-black rounded-none
									shadow-[4px_4px_0px_0px_rgba(0,0,0,1)]
									p-4
								">
								{/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ */}
								<div className="absolute top-1 left-1 w-2 h-2 bg-red-400 border border-black"></div>
								<div className="absolute top-1 right-1 w-2 h-2 bg-blue-400 border border-black"></div>

								<div className="flex items-center gap-3 mb-3">
									<div className="bg-white border-2 border-black p-2 shadow-[2px_2px_0px_0px_rgba(0,0,0,1)]">
										<span className="text-xl">üëë</span>
									</div>
									<div>
										<h3 className="font-mono font-black text-base text-black uppercase tracking-wide">
											–õ–ò–î–ï–†–´
										</h3>
										<p className="font-mono text-sm text-black font-semibold">
											–¢–æ–ø-5 –Ω–µ–¥–µ–ª–∏
										</p>
									</div>
								</div>

								{/* –°–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤ –≤ –ø–∏–∫—Å–µ–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ */}
								<div className="bg-black border-2 border-white p-3 shadow-[2px_2px_0px_0px_rgba(0,0,0,1)]">
									<div className="space-y-2">
										{leaderboard.length > 0 ? leaderboard.map((leader, index) => (
											<div key={index} className="flex items-center justify-between text-white font-mono">
												<div className="flex items-center gap-2">
													<span className={`text-sm ${leader.rank === 1 ? 'text-yellow-400' :
														leader.rank === 2 ? 'text-gray-300' :
															leader.rank === 3 ? 'text-orange-400' :
																'text-gray-400'
														}`}>
														#{leader.rank}
													</span>
													<span className={`text-sm font-black ${leader.isCurrentUser ? 'text-green-400' : 'text-white'
														}`}>
														{leader.name}
													</span>
												</div>
												<span className="text-xs text-gray-300">{leader.score}</span>
											</div>
										)) : (
											<div className="text-center py-4">
												<div className="text-2xl mb-2">üèÜ</div>
												<div className="font-mono text-gray-300 text-sm">
													–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
												</div>
												<div className="font-mono text-gray-400 text-xs mt-1">
													–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —É—á–∞—Å—Ç–∏—è
												</div>
											</div>
										)}
									</div>
								</div>

								{/* –ù–∏–∂–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ */}
								<div className="absolute bottom-1 left-1 w-2 h-2 bg-green-400 border border-black"></div>
								<div className="absolute bottom-1 right-1 w-2 h-2 bg-purple-400 border border-black"></div>
							</div>
							<div className="absolute inset-0 bg-black translate-x-1 translate-y-1 -z-10 rounded-none"></div>
						</div>
					</div>
				</div>

				{/* –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è */}
				<CompletionDialog
					isOpen={showCompletionDialog}
					onClose={() => setShowCompletionDialog(false)}
					onSave={handleSaveCompletion}
					taskName={completingTask?.taskName || ""}
					timeSpent={completingTask ? getFormattedTime(completingTask.taskTypeId) : "00:00"}
					taskId={completingTask?.taskTypeId}
					initialUnits={completingTask?.currentUnits || 1} // –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
				/>

				{/* –ü–æ–ø–∞–ø –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π */}
				<AchievementPopup achievement={newAchievement} onClose={handleAchievementClose} />
			</div>
			<Toaster />
			{/* –ö—Ä—É—Ç–∏–ª–∫–∞ –ø—Ä–∏–∑–æ–≤ */}
			<PrizeWheel isOpen={showPrizeWheel} onClose={handleCloseWheel} onPrizeWon={handlePrizeWon} />
		</main>
	</AuthGuard >
	)
}
