"use client"

import { useEffect, useState } from "react"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Button } from "@/components/ui/button"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { DetailedProfileStats } from "@/components/detailed-profile-stats"
import { supabase } from "@/lib/supabase"
import { authService } from "@/lib/auth"
import { useAuth } from "@/hooks/use-auth"
import { useFreshUserData } from "@/hooks/use-fresh-user-data"
import { formatDuration } from "@/lib/utils"
import { GAME_CONFIG, calculateLevel } from "@/lib/game-config"
import PixelCard from "@/components/pixel-card"
import PixelButton from "@/components/pixel-button"
import LevelDisplay from "@/components/level-display"
import CoinDisplay from "@/components/coin-display"
import Navigation from "@/components/navigation"
import AuthGuard from "@/components/auth/auth-guard"
import PrizeWheel from "@/components/prize-wheel"
import AvatarUploadWithCrop from "@/components/avatar-upload-with-crop"
import DailyTaskStats from "@/components/daily-task-stats"
import { Trophy, Target, Clock, TrendingUp, ArrowLeft, Edit, Users, Building, Calendar, Activity } from "lucide-react"
import { useRouter } from "next/navigation"
import { useToast } from "@/hooks/use-toast"

interface Achievement {
	id: string
	name: string
	description: string
	icon: string
	unlocked_at: string
}

interface UserStats {
	total_tasks: number
	total_time: number
	total_units: number
	total_coins: number
	current_streak: number
	achievements_count: number
	avg_time_per_task: number
	most_productive_day: string
}

interface TaskHistory {
	id: number
	task_name: string
	units_completed: number
	time_spent_minutes: number
	work_date: string
	notes?: string
}



interface OfficeStats {
	office_name: string
	total_employees: number
	working_employees: number
	total_hours_today: number
	avg_hours_today: number
}

interface Office {
	id: number
	name: string
	description: string
}

interface ProfileData {
	full_name: string
	last_name: string
	first_name: string
	middle_name: string
	position: string
	email: string
	office_name: string
	avatar_url?: string
}

export default function ProfilePage() {
	const { user, profile, refreshProfile } = useAuth()
	const { refresh: refreshUserData, ...freshUserData } = useFreshUserData()
	const router = useRouter()
	const { toast } = useToast()
	const [achievements, setAchievements] = useState<Achievement[]>([])
	const [stats, setStats] = useState<UserStats>({
		total_tasks: 0,
		total_time: 0,
		total_units: 0,
		total_coins: 0,
		current_streak: 0,
		achievements_count: 0,
		avg_time_per_task: 0,
		most_productive_day: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
	})
	const [taskHistory, setTaskHistory] = useState<TaskHistory[]>([])
	const [dailyStats, setDailyStats] = useState<Array<{
		date: string,
		units: number,
		tasks: number,
		time: number
	}>>([])
	const [officeStats, setOfficeStats] = useState<OfficeStats>({
		office_name: "–ó–∞–≥—Ä—É–∑–∫–∞...",
		total_employees: 0,
		working_employees: 0,
		total_hours_today: 0,
		avg_hours_today: 0
	})
	const [profileData, setProfileData] = useState<ProfileData>({
		full_name: "",
		last_name: "",
		first_name: "",
		middle_name: "",
		position: "",
		email: "",
		office_name: "",
		avatar_url: ""
	})
	const [editingProfile, setEditingProfile] = useState(false)
	const [loading, setLoading] = useState(true)
	const [savingProfile, setSavingProfile] = useState(false)
	const [saveSuccess, setSaveSuccess] = useState(false)
	const [showWheel, setShowWheel] = useState(false)
	const [showLevelModal, setShowLevelModal] = useState(false)
	const [offices, setOffices] = useState<Office[]>([])

	useEffect(() => {
		if (user) {
			fetchAllProfileData()
		}
	}, [user])

	// –û—Ç–¥–µ–ª—å–Ω—ã–π useEffect –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
	useEffect(() => {
		if (profile) {
			fetchProfileInfo()
		}
	}, [profile])

	// useEffect –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ freshUserData –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è profileData
	useEffect(() => {
		if (profileData.avatar_url || profileData.full_name) {
			console.log("üîÑ [SYNC] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º freshUserData —Å profileData")
			refreshUserData()
		}
	}, [profileData.avatar_url, profileData.full_name, profileData.position, profileData.office_name])

	// –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—Ñ–∏—Å–∞ –∏–∑ –∞–¥–º–∏–Ω–∫–∏
	useEffect(() => {
		if (!user) return

		const handleOfficeChange = async (event: Event) => {
			const customEvent = event as CustomEvent
			const { userId, oldOfficeId, newOfficeId } = customEvent.detail

			console.log("üè¢ [–ü–†–û–§–ò–õ–¨] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ñ–∏—Å–∞:", customEvent.detail)

			// –ï—Å–ª–∏ –∏–∑–º–µ–Ω—ë–Ω –æ—Ñ–∏—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
			if (userId === user.id) {
				console.log("‚ú® [–ü–†–û–§–ò–õ–¨] –û—Ñ–∏—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω—ë–Ω, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")

				// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				await refreshUserData()

				// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ñ–∏—Å–∞
				await fetchOfficeStats()

				// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º (–≥—Ä–∞—Ñ–∏–∫–∏)
				await fetchDailyStats()

				// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è
				await fetchProfileInfo()

				// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
				toast({
					title: "–û—Ñ–∏—Å –æ–±–Ω–æ–≤–ª—ë–Ω",
					description: "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –≥—Ä–∞—Ñ–∏–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –Ω–æ–≤—ã–º –æ—Ñ–∏—Å–æ–º",
				})
			}
		}

		// –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å
		window.addEventListener('officeChanged', handleOfficeChange)

		// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
		return () => {
			window.removeEventListener('officeChanged', handleOfficeChange)
		}
	}, [user])

	const fetchOffices = async () => {
		try {
			const { data, error } = await supabase
				.from("offices")
				.select("*")
				.order("name")

			if (error) throw error
			setOffices(data || [])
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ñ–∏—Å–æ–≤:", error)
		}
	}

	const fetchAllProfileData = async () => {
		if (!user) return

		try {
			await Promise.all([
				fetchUserStats(),
				fetchTaskHistory(),
				fetchDailyStats(),
				fetchOfficeStats(),
				fetchProfileInfo(),
				fetchOffices()
			])
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è:", error)
		} finally {
			setLoading(false)
		}
	}

	const forceSyncData = async () => {
		if (!user) return

		try {
			console.log("üîÑ [–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø] –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...")

			// –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
			const syncResponse = await fetch('/api/sync-user-data', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				}
			})

			if (syncResponse.ok) {
				const syncResult = await syncResponse.json()
				console.log("‚úÖ [–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø] –†–µ–∑—É–ª—å—Ç–∞—Ç:", syncResult)

				toast({
					title: "‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
					description: "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏",
				})
			} else {
				console.warn("‚ö†Ô∏è [–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø] –û—à–∏–±–∫–∞ API:", syncResponse.status)
			}

			// –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
			await fetchProfileInfo()
			await fetchOfficeStats()
			refreshUserData()

		} catch (error) {
			console.error("‚ùå [–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø] –û—à–∏–±–∫–∞:", error)
			toast({
				title: "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
				description: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É",
				variant: "destructive",
			})
		}
	}

	const fetchUserStats = async () => {
		const { employeeId, error: empError } = await authService.getEmployeeId(user!.id)
		if (empError || !employeeId) return

		// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ—Ñ–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		let currentOfficeId = profile?.office_id

		// –ï—Å–ª–∏ –æ—Ñ–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ª—É—á–∞–µ–º –∏–∑ employees
		if (!currentOfficeId) {
			const { data: empData } = await supabase
				.from("employees")
				.select("office_id")
				.eq("user_id", user!.id)
				.single()

			currentOfficeId = empData?.office_id
		}

		console.log("üìä [PROFILE-STATS] –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ñ–∏—Å–∞:", currentOfficeId)

		// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –æ—Ñ–∏—Å–∞
		let logsData, logsError

		if (!currentOfficeId) {
			console.warn("‚ö†Ô∏è [PROFILE-STATS] –û—Ñ–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ")
			const result = await supabase
				.from("task_logs")
				.select("time_spent_minutes, units_completed, work_date, task_types(name)")
				.eq("employee_id", employeeId)
				.order("work_date", { ascending: false })

			logsData = result.data
			logsError = result.error
		} else {
			const result = await supabase
				.from("task_logs")
				.select(`
					time_spent_minutes, 
					units_completed, 
					work_date, 
					task_types(name),
					employees!inner(office_id)
				`)
				.eq("employee_id", employeeId)
				.eq("employees.office_id", currentOfficeId) // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–∫—É—â–µ–º—É –æ—Ñ–∏—Å—É
				.order("work_date", { ascending: false })

			logsData = result.data
			logsError = result.error
		}

		if (logsError) throw logsError

		const totalTasks = logsData?.length || 0
		const totalTime = logsData?.reduce((sum, log) => sum + log.time_spent_minutes, 0) || 0
		const totalUnits = logsData?.reduce((sum, log) => sum + log.units_completed, 0) || 0

		// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã
		let totalCoins = 0
		logsData?.forEach((log: any) => {
			const taskName = log.task_types?.name
			const coinsPerUnit = GAME_CONFIG.TASK_REWARDS[taskName] || 5
			totalCoins += log.units_completed * coinsPerUnit
		})

		// –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å
		const dayStats = new Map<string, number>()
		logsData?.forEach((log) => {
			const day = log.work_date
			dayStats.set(day, (dayStats.get(day) || 0) + log.units_completed)
		})

		const mostProductiveDay = Array.from(dayStats.entries()).sort((a, b) => b[1] - a[1])[0]?.[0] || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
		const currentStreak = calculateCurrentStreak(logsData || [])
		const unlockedAchievements = getUnlockedAchievements(totalCoins, totalTasks, currentStreak)

		setStats({
			total_tasks: totalTasks,
			total_time: totalTime,
			total_units: totalUnits,
			total_coins: totalCoins,
			current_streak: currentStreak,
			achievements_count: unlockedAchievements.length,
			avg_time_per_task: totalTasks > 0 ? Math.round(totalTime / totalTasks) : 0,
			most_productive_day:
				mostProductiveDay !== "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö" ? new Date(mostProductiveDay).toLocaleDateString("ru-RU") : "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
		})

		setAchievements(unlockedAchievements)
	}

	const fetchTaskHistory = async () => {
		const { employeeId, error: empError } = await authService.getEmployeeId(user!.id)
		if (empError || !employeeId) return

		// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ—Ñ–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		let currentOfficeId = profile?.office_id

		// –ï—Å–ª–∏ –æ—Ñ–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ª—É—á–∞–µ–º –∏–∑ employees
		if (!currentOfficeId) {
			const { data: empData } = await supabase
				.from("employees")
				.select("office_id")
				.eq("user_id", user!.id)
				.single()

			currentOfficeId = empData?.office_id
		}

		console.log("üìä [PROFILE-HISTORY] –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–¥–∞—á –¥–ª—è –æ—Ñ–∏—Å–∞:", currentOfficeId)

		// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –æ—Ñ–∏—Å–∞
		let data, error

		if (!currentOfficeId) {
			console.warn("‚ö†Ô∏è [PROFILE-HISTORY] –û—Ñ–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ")
			const result = await supabase
				.from("task_logs")
				.select(`
					id,
					units_completed,
					time_spent_minutes,
					work_date,
					notes,
					task_types(name)
				`)
				.eq("employee_id", employeeId)
				.order("work_date", { ascending: false })
				.limit(20)

			data = result.data
			error = result.error
		} else {
			const result = await supabase
				.from("task_logs")
				.select(`
					id,
					units_completed,
					time_spent_minutes,
					work_date,
					notes,
					task_types(name),
					employees!inner(office_id)
				`)
				.eq("employee_id", employeeId)
				.eq("employees.office_id", currentOfficeId) // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–∫—É—â–µ–º—É –æ—Ñ–∏—Å—É
				.order("work_date", { ascending: false })
				.limit(20)

			data = result.data
			error = result.error
		}

		if (error) throw error

		const history = data?.map(log => ({
			id: log.id,
			task_name: (log.task_types as any)?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞",
			units_completed: log.units_completed,
			time_spent_minutes: log.time_spent_minutes,
			work_date: log.work_date,
			notes: log.notes
		})) || []

		setTaskHistory(history)
	}

	const fetchDailyStats = async () => {
		try {
			const { employeeId, error: empError } = await authService.getEmployeeId(user!.id)
			if (empError || !employeeId) return

			// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
			const sevenDaysAgo = new Date()
			sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7)
			const startDate = sevenDaysAgo.toISOString().split('T')[0]

			// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ—Ñ–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
			let currentOfficeId = profile?.office_id

			// –ï—Å–ª–∏ –æ—Ñ–∏—Å –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ª—É—á–∞–µ–º –∏–∑ employees
			if (!currentOfficeId) {
				const { data: empData } = await supabase
					.from("employees")
					.select("office_id")
					.eq("user_id", user!.id)
					.single()

				currentOfficeId = empData?.office_id
			}

			console.log("üìä [PROFILE-DAILY] –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º –¥–ª—è –æ—Ñ–∏—Å–∞:", currentOfficeId)

			// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –æ—Ñ–∏—Å–∞
			let data, error

			if (!currentOfficeId) {
				console.warn("‚ö†Ô∏è [PROFILE-DAILY] –û—Ñ–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ")
				const result = await supabase
					.from("task_logs")
					.select("work_date, units_completed, time_spent_minutes")
					.eq("employee_id", employeeId)
					.gte("work_date", startDate)
					.order("work_date", { ascending: true })

				data = result.data
				error = result.error
			} else {
				// –ó–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –æ—Ñ–∏—Å—É —á–µ—Ä–µ–∑ JOIN —Å employees
				const result = await supabase
					.from("task_logs")
					.select(`
					work_date, 
					units_completed, 
					time_spent_minutes,
					employees!inner(office_id)
				`)
					.eq("employee_id", employeeId)
					.eq("employees.office_id", currentOfficeId) // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–∫—É—â–µ–º—É –æ—Ñ–∏—Å—É
					.gte("work_date", startDate)
					.order("work_date", { ascending: true })

				data = result.data
				error = result.error
			}

			if (error) throw error

			// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
			const dailyStatsMap = new Map<string, { units: number, tasks: number, time: number }>()

			data?.forEach((log: any) => {
				const date = log.work_date
				const existing = dailyStatsMap.get(date) || { units: 0, tasks: 0, time: 0 }

				existing.units += log.units_completed
				existing.tasks += 1
				existing.time += log.time_spent_minutes

				dailyStatsMap.set(date, existing)
			})

			// –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π (–≤–∫–ª—é—á–∞—è –¥–Ω–∏ –±–µ–∑ —Ä–∞–±–æ—Ç—ã)
			const statsArray = []
			for (let i = 6; i >= 0; i--) {
				const date = new Date()
				date.setDate(date.getDate() - i)
				const dateStr = date.toISOString().split('T')[0]
				const stats = dailyStatsMap.get(dateStr) || { units: 0, tasks: 0, time: 0 }

				statsArray.push({
					date: dateStr,
					...stats
				})
			}

			setDailyStats(statsArray)
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–Ω—è–º:", error)
			setDailyStats([])
		}
	}

	const fetchOfficeStats = async () => {
		try {
			const { data, error } = await supabase
				.rpc('get_office_statistics', {
					requesting_user_uuid: user!.id
				})

			if (error) throw error

			if (data && data.length > 0) {
				const stats = data[0]
				setOfficeStats({
					office_name: stats.office_name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ñ–∏—Å",
					total_employees: stats.total_employees || 0,
					working_employees: stats.working_employees || 0,
					total_hours_today: parseFloat(stats.total_hours_today) || 0,
					avg_hours_today: parseFloat(stats.avg_hours_today) || 0
				})
			}
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ñ–∏—Å–∞:", error)
		}
	}

	const loadFreshProfileDataForEditing = async () => {
		if (!user) return

		console.log("üîÑ [EDIT-LOAD] –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")

		try {
			// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ employees —Ç–∞–±–ª–∏—Ü—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ offices
			const { data: employeeData, error: employeeError } = await supabase
				.from("employees")
				.select(`
					*,
					offices(name)
				`)
				.eq("user_id", user.id)
				.maybeSingle()

			if (!employeeError && employeeData) {
				console.log("‚úÖ [EDIT-LOAD] Employee data loaded:", employeeData)

				// –ü–∞—Ä—Å–∏–º –ø–æ–ª–Ω–æ–µ –∏–º—è –Ω–∞ —á–∞—Å—Ç–∏
				const nameParts = (employeeData.full_name || "").split(' ')
				const lastName = nameParts[0] || ""
				const firstName = nameParts[1] || ""
				const middleName = nameParts[2] || ""

				const freshProfileData = {
					full_name: employeeData.full_name || "",
					last_name: lastName,
					first_name: firstName,
					middle_name: middleName,
					position: employeeData.position || "–°–æ—Ç—Ä—É–¥–Ω–∏–∫",
					email: user.email || "",
					office_name: employeeData.offices?.name || employeeData.office_name || "–ù–µ —É–∫–∞–∑–∞–Ω",
					avatar_url: employeeData.avatar_url || ""
				}

				console.log("üìã [EDIT-LOAD] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º—É:", freshProfileData)
				setProfileData(freshProfileData)
				return
			}

			console.log("üîÑ [EDIT-LOAD] Employee not found, trying user_profiles...")

			// Fallback –Ω–∞ user_profiles
			const { data: profileData, error: profileError } = await supabase
				.from("user_profiles")
				.select("*")
				.eq("id", user.id)
				.maybeSingle()

			if (!profileError && profileData) {
				console.log("‚úÖ [EDIT-LOAD] Profile data loaded:", profileData)

				const nameParts = (profileData.full_name || "").split(' ')
				const lastName = nameParts[0] || ""
				const firstName = nameParts[1] || ""
				const middleName = nameParts[2] || ""

				const freshProfileData = {
					full_name: profileData.full_name || "",
					last_name: lastName,
					first_name: firstName,
					middle_name: middleName,
					position: profileData.position || "–°–æ—Ç—Ä—É–¥–Ω–∏–∫",
					email: user.email || "",
					office_name: profileData.office_name || "–ù–µ —É–∫–∞–∑–∞–Ω",
					avatar_url: profileData.avatar_url || ""
				}

				console.log("üìã [EDIT-LOAD] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ñ–æ—Ä–º—É:", freshProfileData)
				setProfileData(freshProfileData)
			} else {
				console.warn("‚ö†Ô∏è [EDIT-LOAD] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
			}
		} catch (error) {
			console.error("‚ùå [EDIT-LOAD] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", error)
		}
	}

	const fetchProfileInfo = async () => {
		if (!user) return

		console.log("üîÑ [PROFILE] –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ –ë–î...")

		try {
			// –ü–†–ò–û–†–ò–¢–ï–¢: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ employees (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
			const { data: employeeData, error: employeeError } = await supabase
				.from("employees")
				.select(`
					*,
					offices(name)
				`)
				.eq("user_id", user.id)
				.maybeSingle()

			console.log("üìä [PROFILE] employees result:", { employeeData, employeeError })

			let profileSource = null
			if (!employeeError && employeeData) {
				// –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ employees –∫–∞–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ
				profileSource = {
					...employeeData,
					office_name: employeeData.offices?.name || employeeData.office_name || "–ù–µ —É–∫–∞–∑–∞–Ω"
				}
				console.log("‚úÖ [PROFILE] –ò—Å–ø–æ–ª—å–∑–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ employees (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)")
			} else {
				console.log("üîÑ [PROFILE] Employees –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º user_profiles...")

				// Fallback –Ω–∞ user_profiles
				const { data: userProfileData, error: userProfileError } = await supabase
					.from("user_profiles")
					.select("*")
					.eq("id", user.id)
					.maybeSingle()

				console.log("üìä [PROFILE] user_profiles result:", { userProfileData, userProfileError })

				if (!userProfileError && userProfileData) {
					profileSource = userProfileData
					console.log("‚úÖ [PROFILE] –ò—Å–ø–æ–ª—å–∑–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ user_profiles (fallback)")
				}
			}

			if (profileSource) {
				// –ü–∞—Ä—Å–∏–º –ø–æ–ª–Ω–æ–µ –∏–º—è –Ω–∞ —á–∞—Å—Ç–∏
				const nameParts = (profileSource.full_name || "").split(' ')
				const lastName = nameParts[0] || ""
				const firstName = nameParts[1] || ""
				const middleName = nameParts[2] || ""

				const newProfileData = {
					full_name: profileSource.full_name || "",
					last_name: lastName,
					first_name: firstName,
					middle_name: middleName,
					position: profileSource.position || "–°–æ—Ç—Ä—É–¥–Ω–∏–∫",
					email: user.email || "",
					office_name: profileSource.office_name || "–ù–µ —É–∫–∞–∑–∞–Ω",
					avatar_url: profileSource.avatar_url || ""
				}

				console.log("üìã [PROFILE] –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è:", newProfileData)
				setProfileData(newProfileData)
			} else {
				console.warn("‚ö†Ô∏è [PROFILE] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è")
				// –§–æ–ª–ª–±—ç–∫ –Ω–∞ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ profile
				if (profile) {
					const nameParts = (profile.full_name || "").split(' ')
					const lastName = nameParts[0] || ""
					const firstName = nameParts[1] || ""
					const middleName = nameParts[2] || ""

					setProfileData({
						full_name: profile.full_name || "",
						last_name: lastName,
						first_name: firstName,
						middle_name: middleName,
						position: profile.position || "–°–æ—Ç—Ä—É–¥–Ω–∏–∫",
						email: user.email || "",
						office_name: profile.office_name || "–ù–µ —É–∫–∞–∑–∞–Ω",
						avatar_url: profile.avatar_url || ""
					})
				}
			}
		} catch (error) {
			console.error("‚ùå [PROFILE] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error)
		}
	}

	const handleSaveProfile = async () => {
		console.log("üöÄ [–°–û–•–†–ê–ù–ï–ù–ò–ï] –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è...")
		console.log("üìã [–î–ê–ù–ù–´–ï] –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è:", profileData)
		console.log("üë§ [–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨] ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user?.id)

		setSavingProfile(true)
		setSaveSuccess(false)

		try {
			console.log("üì§ [API] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ authService.updateProfile...")

			// –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–æ—Ñ–∏—Å –∏—Å–∫–ª—é—á–∞–µ—Ç—Å—è - –∏–∑–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É)
			const updateData: any = {
				full_name: profileData.full_name?.trim() || undefined,
				position: profileData.position?.trim() || undefined,
			}

			// –î–æ–±–∞–≤–ª—è–µ–º avatar_url —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
			if (profileData.avatar_url) {
				updateData.avatar_url = profileData.avatar_url
			}

			console.log("üì§ [–î–ê–ù–ù–´–ï] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:", updateData)

			// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
			const { data: updatedProfile, error } = await authService.updateProfile(user!.id, updateData)

			console.log("üì® [–û–¢–í–ï–¢] –†–µ–∑—É–ª—å—Ç–∞—Ç authService.updateProfile:", { updatedProfile, error })

			if (error) {
				console.error("‚ùå [–û–®–ò–ë–ö–ê] –û—à–∏–±–∫–∞ –≤ authService.updateProfile:", error)

				// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
				const errorMessage = (error as any)?.message || String(error)
				toast({
					title: "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
					description: `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: ${errorMessage}`,
					variant: "destructive",
				})
				return
			}

			console.log("‚úÖ [–£–°–ü–ï–•] authService.updateProfile –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")

			// Email –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è - —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É

			console.log("üéâ [–£–°–ü–ï–•] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ")
			setSaveSuccess(true)
			console.log("‚úÖ [–ê–ù–ò–ú–ê–¶–ò–Ø] setSaveSuccess(true) - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—Ö–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
			toast({
				title: "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω",
				description: "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ",
			})

			console.log("üîÑ [–û–ë–ù–û–í–õ–ï–ù–ò–ï] –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ...")
			// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ auth
			await refreshProfile()
			console.log("‚úÖ [–û–ë–ù–û–í–õ–ï–ù–ò–ï] –ü—Ä–æ—Ñ–∏–ª—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω")

			console.log("üîÑ [–û–ë–ù–û–í–õ–ï–ù–ò–ï] –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ...")
			// –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			refreshUserData()
			console.log("‚úÖ [–û–ë–ù–û–í–õ–ï–ù–ò–ï] –°–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

			console.log("üîÑ [–û–ë–ù–û–í–õ–ï–ù–ò–ï] –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
			// –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
			try {
				console.log("üîÑ [–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")

				// –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
				const syncResponse = await fetch('/api/sync-user-data', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					}
				})

				if (syncResponse.ok) {
					const syncResult = await syncResponse.json()
					console.log("‚úÖ [–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø] API —Ä–µ–∑—É–ª—å—Ç–∞—Ç:", syncResult)
				} else {
					console.warn("‚ö†Ô∏è [–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø] API –æ—à–∏–±–∫–∞:", syncResponse.status)

					// Fallback –Ω–∞ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ RPC
					const { data: rpcResult, error: rpcError } = await supabase
						.rpc('sync_employee_to_userprofile', {
							target_user_id: user!.id
						})

					if (rpcError) {
						console.warn("‚ö†Ô∏è [–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø] RPC –æ—à–∏–±–∫–∞:", rpcError)
					} else {
						console.log("‚úÖ [–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø] RPC —Ä–µ–∑—É–ª—å—Ç–∞—Ç:", rpcResult)
					}
				}
			} catch (syncErr) {
				console.warn("‚ö†Ô∏è [–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", syncErr)
			}

			// –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
			await fetchProfileInfo()
			console.log("‚úÖ [–û–ë–ù–û–í–õ–ï–ù–ò–ï] –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ñ–∏—Å–∞ (–æ—Ñ–∏—Å –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É)
			console.log("üè¢ [–û–ë–ù–û–í–õ–ï–ù–ò–ï] –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ñ–∏—Å–∞...")
			await fetchOfficeStats()
			console.log("‚úÖ [–û–ë–ù–û–í–õ–ï–ù–ò–ï] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ñ–∏—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

			console.log("üîÑ [–û–ë–ù–û–í–õ–ï–ù–ò–ï] –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
			// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
			setTimeout(() => {
				console.log("üîÑ [–ê–ù–ò–ú–ê–¶–ò–Ø] –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º success")
				setEditingProfile(false)
				setSaveSuccess(false) // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—Ö–∞
			}, 2500)

		} catch (error) {
			console.error("‚ùå [–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê] –û—à–∏–±–∫–∞ –≤ handleSaveProfile:", error)
			console.log("üìã [–û–¢–õ–ê–î–ö–ê] –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:", error)

			toast({
				title: "‚ùå –û—à–∏–±–∫–∞",
				description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
				variant: "destructive",
			})
		} finally {
			setSavingProfile(false)
		}

		console.log("üèÅ [–ó–ê–í–ï–†–®–ï–ù–ò–ï] handleSaveProfile –∑–∞–≤–µ—Ä—à–µ–Ω")
	}

	const calculateCurrentStreak = (logs: any[]) => {
		if (!logs.length) return 0

		const uniqueDays = [...new Set(logs.map((log) => log.work_date))].sort().reverse()
		let streak = 0

		for (let i = 0; i < uniqueDays.length; i++) {
			const day = uniqueDays[i]
			const expectedDate = new Date()
			expectedDate.setDate(expectedDate.getDate() - i)

			if (day === expectedDate.toISOString().split("T")[0]) {
				streak++
			} else {
				break
			}
		}

		return streak
	}

	// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –∏–≥—Ä–æ–∫–∞ –æ—Ç 1 –¥–æ 100


	const getUnlockedAchievements = (coins: number, tasks: number, streak: number) => {
		const unlocked = []

		if (tasks >= 1) {
			unlocked.push({
				id: "first_task",
				name: "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏",
				description: "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É",
				icon: "üéØ",
				unlocked_at: new Date().toISOString(),
			})
		}

		if (coins >= 1000) {
			unlocked.push({
				id: "thousand_club",
				name: "–ö–ª—É–± —Ç—ã—Å—è—á–∏",
				description: "–ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ 1000+ –æ—á–∫–æ–≤",
				icon: "üíé",
				unlocked_at: new Date().toISOString(),
			})
		}

		if (streak >= 7) {
			unlocked.push({
				id: "week_streak",
				name: "–ù–µ–¥–µ–ª—è –ø–æ–¥—Ä—è–¥",
				description: "–†–∞–±–æ—Ç–∞–π—Ç–µ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
				icon: "üî•",
				unlocked_at: new Date().toISOString(),
			})
		}

		if (tasks >= 50) {
			unlocked.push({
				id: "fifty_tasks",
				name: "–ü–æ–ª—Ç–∏–Ω–Ω–∏–∫",
				description: "–í—ã–ø–æ–ª–Ω–∏—Ç–µ 50 –∑–∞–¥–∞—á",
				icon: "üèÜ",
				unlocked_at: new Date().toISOString(),
			})
		}

		return unlocked
	}

	const currentLevel = calculateLevel(stats.total_coins)

	if (loading) {
		return (
			<AuthGuard>
				<main className="min-h-screen bg-gradient-to-br from-purple-400 via-pink-500 to-red-500 p-4">
					<div className="container mx-auto py-6">
						<Navigation />
						<PixelCard className="mt-6">
							<div className="p-8 text-center">
								<div className="text-4xl mb-4">‚è≥</div>
								<div className="text-2xl font-bold">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...</div>
							</div>
						</PixelCard>
					</div>
				</main>
			</AuthGuard>
		)
	}

	return (
		<AuthGuard>
			<main className="min-h-screen bg-gradient-to-br from-purple-400 via-pink-500 to-red-500 p-4">
				<div className="container mx-auto py-6 space-y-6">
					<Navigation />

					{/* –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –ø–∞–Ω–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—è */}
					<div className="relative">
						<div className="bg-gradient-to-br from-purple-300 to-pink-300 border-4 border-black rounded-none shadow-[4px_4px_0px_0px_rgba(0,0,0,1)] p-4">
							{/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ */}
							<div className="absolute top-1 left-1 w-2 h-2 bg-yellow-400 border border-black"></div>
							<div className="absolute top-1 right-1 w-2 h-2 bg-red-400 border border-black"></div>

							<div className="flex items-center justify-between">
								<div className="flex items-center gap-4">
									<Avatar className="h-16 w-16 border-3 border-yellow-400 shadow-lg">
										<AvatarImage src={freshUserData.avatar_url || profileData.avatar_url} />
										<AvatarFallback className="bg-gradient-to-r from-blue-400 to-purple-500 text-white text-xl font-bold">
											{(freshUserData.full_name || profileData.full_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å').split(' ').map(n => n[0]).join('').toUpperCase() || '–ü'}
										</AvatarFallback>
									</Avatar>
									<div>
										<h1 className="font-mono font-black text-2xl text-black uppercase tracking-wide">
											{freshUserData.full_name || profileData.full_name || "–ó–ê–ì–†–£–ó–ö–ê..."}
										</h1>
										<div className="bg-white border border-black px-2 py-1 shadow-[1px_1px_0px_0px_rgba(0,0,0,1)]">
											<span className="font-mono text-sm font-semibold text-black uppercase">{freshUserData.position || profileData.position || "–°–æ—Ç—Ä—É–¥–Ω–∏–∫"}</span>
										</div>
									</div>
								</div>

								{/* –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ñ–∏—Å–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ */}
								<div className="flex-1 flex justify-center">
									<div className="bg-gradient-to-r from-indigo-400 to-purple-500 border-2 border-white px-4 py-2 shadow-[2px_2px_0px_0px_rgba(0,0,0,1)]">
										<div className="flex items-center gap-2">
											<span className="text-xl">üè¢</span>
											<div className="text-white">
												<div className="font-mono font-black text-xs uppercase">–û–§–ò–°</div>
												<div className="font-mono font-black text-lg">{freshUserData.office_name || profileData.office_name || "–†–∞—Å—Å–≤–µ—Ç"}</div>
											</div>
										</div>
									</div>
								</div>

								<div className="flex items-center gap-3">
									{/* –ö—Ä–∞—Å–∏–≤—ã–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã */}
									<div className="bg-gradient-to-br from-yellow-300 via-yellow-400 to-yellow-600 border-2 border-yellow-800 px-4 py-3 shadow-[3px_3px_0px_0px_rgba(0,0,0,1)] rounded-lg">
										<div className="flex items-center gap-3">
											<CoinDisplay coins={stats.total_coins} animated={true} />
										</div>
									</div>

									{/* –ö—Ä–∞—Å–∏–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º */}
									<div
										className={`px-4 py-3 border-2 shadow-[3px_3px_0px_0px_rgba(0,0,0,1)] cursor-pointer hover:scale-105 transition-all duration-200 rounded-lg ${calculateLevel(stats.total_coins).level >= 91
											? "bg-gradient-to-br from-yellow-400 via-yellow-500 to-orange-500 border-yellow-700"
											: calculateLevel(stats.total_coins).level >= 71
												? "bg-gradient-to-br from-purple-400 via-purple-500 to-pink-500 border-purple-700"
												: calculateLevel(stats.total_coins).level >= 51
													? "bg-gradient-to-br from-blue-400 via-blue-500 to-indigo-500 border-blue-700"
													: calculateLevel(stats.total_coins).level >= 31
														? "bg-gradient-to-br from-green-400 via-green-500 to-emerald-500 border-green-700"
														: "bg-gradient-to-br from-gray-400 via-gray-500 to-gray-600 border-gray-700"
											}`}
										onClick={() => setShowLevelModal(true)}
									>
										<div className="flex items-center gap-3">
											<div className="relative">
												<span className="text-2xl drop-shadow-lg">
													{calculateLevel(stats.total_coins).icon}
												</span>
												{/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π */}
												{calculateLevel(stats.total_coins).level >= 71 && (
													<div className="absolute inset-0 animate-pulse">
														<span className="text-2xl opacity-50">
															{calculateLevel(stats.total_coins).icon}
														</span>
													</div>
												)}
											</div>
											<div className="text-white drop-shadow-lg">
												<div className="font-mono font-black text-xs uppercase tracking-wider">
													{calculateLevel(stats.total_coins).name}
												</div>
												<div className="font-mono font-black text-xl">
													LVL {calculateLevel(stats.total_coins).level}
												</div>
											</div>
										</div>
									</div>

									{/* –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
									<PixelButton
										onClick={async () => {
											if (!editingProfile) {
												console.log("üîÑ [EDIT] –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ...")
												// –ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º—ã
												await loadFreshProfileDataForEditing()
												// –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º freshUserData –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
												await refreshUserData()
												console.log("‚úÖ [EDIT] –°–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
											}
											setEditingProfile(!editingProfile)
										}}
										variant={editingProfile ? "danger" : "default"}
										className="px-3 py-2"
									>
										{editingProfile ? "‚ùå" : "‚úèÔ∏è"}
									</PixelButton>
								</div>
							</div>

							{/* –ù–∏–∂–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ */}
							<div className="absolute bottom-1 left-1 w-2 h-2 bg-green-400 border border-black"></div>
							<div className="absolute bottom-1 right-1 w-2 h-2 bg-blue-400 border border-black"></div>
						</div>
						<div className="absolute inset-0 bg-black translate-x-1 translate-y-1 -z-10 rounded-none"></div>
					</div>

					{/* –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è - –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å—Ç–∏–ª—å */}
					{editingProfile && (
						<div className="relative">
							<div className="bg-gradient-to-br from-yellow-300 to-orange-300 border-4 border-black rounded-none shadow-[4px_4px_0px_0px_rgba(0,0,0,1)] p-6 space-y-6">
								{/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ */}
								<div className="absolute top-1 left-1 w-2 h-2 bg-yellow-400 border border-black"></div>
								<div className="absolute top-1 right-1 w-2 h-2 bg-red-400 border border-black"></div>

								<div className="flex items-center gap-3 mb-6">
									<div className="bg-white border-2 border-black p-2 shadow-[2px_2px_0px_0px_rgba(0,0,0,1)]">
										<span className="text-xl">‚úèÔ∏è</span>
									</div>
									<div>
										<h3 className="font-mono font-black text-2xl text-black uppercase tracking-wide">
											–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–§–ò–õ–Ø
										</h3>
										<p className="font-mono text-sm text-black font-semibold">
											–û–±–Ω–æ–≤–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
										</p>
									</div>
								</div>

								{/* –ê–≤–∞—Ç–∞—Ä */}
								<div>
									<AvatarUploadWithCrop
										currentUrl={profileData.avatar_url || ''}
										fullName={profileData.full_name}
										onAvatarChange={(newUrl: string) => setProfileData(prev => ({ ...prev, avatar_url: newUrl }))}
									/>
								</div>

								{/* –§–ò–û - –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è */}
								<div className="bg-white border-2 border-black p-4 shadow-[2px_2px_0px_0px_rgba(0,0,0,1)] space-y-3">
									<Label className="font-mono font-black text-black uppercase mb-2 block">
										üë§ –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï
									</Label>

									<div className="grid grid-cols-1 md:grid-cols-3 gap-3">
										<div>
											<Label htmlFor="lastname" className="font-mono text-xs text-black uppercase mb-1 block">
												–§–∞–º–∏–ª–∏—è
											</Label>
											<Input
												id="lastname"
												value={profileData.last_name}
												onChange={(e) => {
													const newLastName = e.target.value
													setProfileData(prev => ({
														...prev,
														last_name: newLastName,
														full_name: `${newLastName} ${prev.first_name} ${prev.middle_name}`.trim()
													}))
												}}
												placeholder="–ò–≤–∞–Ω–æ–≤"
												className="border-2 border-black font-mono text-sm p-2 w-full"
											/>
										</div>

										<div>
											<Label htmlFor="firstname" className="font-mono text-xs text-black uppercase mb-1 block">
												–ò–º—è
											</Label>
											<Input
												id="firstname"
												value={profileData.first_name}
												onChange={(e) => {
													const newFirstName = e.target.value
													setProfileData(prev => ({
														...prev,
														first_name: newFirstName,
														full_name: `${prev.last_name} ${newFirstName} ${prev.middle_name}`.trim()
													}))
												}}
												placeholder="–ò–≤–∞–Ω"
												className="border-2 border-black font-mono text-sm p-2 w-full"
											/>
										</div>

										<div>
											<Label htmlFor="middlename" className="font-mono text-xs text-black uppercase mb-1 block">
												–û—Ç—á–µ—Å—Ç–≤–æ
											</Label>
											<Input
												id="middlename"
												value={profileData.middle_name}
												onChange={(e) => {
													const newMiddleName = e.target.value
													setProfileData(prev => ({
														...prev,
														middle_name: newMiddleName,
														full_name: `${prev.last_name} ${prev.first_name} ${newMiddleName}`.trim()
													}))
												}}
												placeholder="–ò–≤–∞–Ω–æ–≤–∏—á"
												className="border-2 border-black font-mono text-sm p-2 w-full"
											/>
										</div>
									</div>
								</div>

								{/* –î–æ–ª–∂–Ω–æ—Å—Ç—å */}
								<div className="bg-white border-2 border-black p-4 shadow-[2px_2px_0px_0px_rgba(0,0,0,1)]">
									<Label htmlFor="position" className="font-mono font-black text-black uppercase mb-2 block">
										üíº –î–û–õ–ñ–ù–û–°–¢–¨
									</Label>
									<Input
										id="position"
										value={profileData.position}
										onChange={(e) => setProfileData(prev => ({
											...prev,
											position: e.target.value
										}))}
										placeholder="–í–∞—à–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å"
										className="border-2 border-black font-mono text-sm p-2 w-full"
									/>
								</div>

								{/* –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
								<div className="bg-gray-100 border-2 border-black p-4 shadow-[2px_2px_0px_0px_rgba(0,0,0,1)] space-y-3">
									<Label className="font-mono font-black text-black uppercase mb-2 block">
										üìã –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
										{user?.email === 'egordolgih@mail.ru' && (
											<span className="text-red-600 ml-2 text-xs">üëë –ê–î–ú–ò–ù</span>
										)}
									</Label>

									<div className="grid grid-cols-1 md:grid-cols-2 gap-3">
										<div>
											<Label className="font-mono text-xs text-gray-600 uppercase mb-1 block">
												üìß Email
											</Label>
											{user?.email === 'egordolgih@mail.ru' ? (
												<Input
													value={profileData.email}
													onChange={(e) => setProfileData(prev => ({
														...prev,
														email: e.target.value
													}))}
													placeholder="–í–∞—à email"
													className="border-2 border-black font-mono text-sm p-2 w-full"
												/>
											) : (
												<div className="bg-gray-200 border-2 border-gray-400 font-mono text-sm p-2 text-gray-700">
													{profileData.email || "–ù–µ —É–∫–∞–∑–∞–Ω"}
												</div>
											)}
										</div>

										<div>
											<Label className="font-mono text-xs text-gray-600 uppercase mb-1 block">
												üè¢ –û—Ñ–∏—Å
											</Label>
											<div className="bg-gradient-to-r from-blue-50 to-indigo-50 border-2 border-blue-300 font-mono text-sm p-3 rounded-lg flex items-center gap-2">
												<span className="text-lg">
													{(() => {
														switch (profileData.office_name) {
															case '–†–∞—Å—Å–≤–µ—Ç': return 'üåÖ'
															case '–ë—É–¥–∞–ø–µ—à—Ç': return 'üè¢'
															case '–Ø–Ω—Ç–∞—Ä—å': return 'üíé'
															case '–°–∞—è–Ω—ã': return 'üèîÔ∏è'
															case '–ë–∏—Ä—é—Å–∏–Ω–∫–∞': return 'üíß'
															case '–í–∏—Ç—è–∑—å': return '‚öîÔ∏è'
															case '–ü–ª–∞–Ω–µ—Ç–∞': return 'üåç'
															case '–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥': return 'üå≤'
															case '–¢—É–ª—å—Å–∫–∞—è': return 'üöá'
															case '–ß–∏—Å—Ç—ã–µ –ø—Ä—É–¥—ã': return 'üíé'
															default: return 'üè¢'
														}
													})()}
												</span>
												<div className="flex flex-col">
													<span className="font-bold text-blue-800">
														{profileData.office_name || "–ù–µ —É–∫–∞–∑–∞–Ω"}
													</span>
													<span className="text-xs text-blue-600">
														–û—Ñ–∏—Å –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
													</span>
												</div>
											</div>
										</div>
									</div>

									<p className="text-xs text-gray-500 font-mono mt-2">
										{user?.email === 'egordolgih@mail.ru'
											? "üëë –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–æ–ª—è"
											: "‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –ø–æ–ª—è –∏–∑–º–µ–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å–∏—Å—Ç–µ–º—ã"
										}
									</p>
								</div>

								{/* –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
								<div className="flex gap-4 pt-4">
									<PixelButton
										onClick={handleSaveProfile}
										loading={savingProfile}
										success={saveSuccess}
										loadingText="üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ..."
										successText="‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!"
										className="shadow-lg hover:shadow-xl transition-shadow"
									>
										üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
									</PixelButton>
									<PixelButton
										variant="secondary"
										onClick={() => {
											setEditingProfile(false)
											fetchProfileInfo() // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
										}}
										className="shadow-lg hover:shadow-xl transition-shadow"
									>
										üîÑ –û—Ç–º–µ–Ω–∏—Ç—å
									</PixelButton>
								</div>

								{/* –ù–∏–∂–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ */}
								<div className="absolute bottom-1 left-1 w-2 h-2 bg-green-400 border border-black"></div>
								<div className="absolute bottom-1 right-1 w-2 h-2 bg-blue-400 border border-black"></div>
							</div>
							<div className="absolute inset-0 bg-black translate-x-1 translate-y-1 -z-10 rounded-none"></div>
						</div>
					)}

					{/* –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
					<div className="grid grid-cols-2 md:grid-cols-4 gap-4">
						<PixelCard className="bg-gradient-to-r from-green-200 to-green-300">
							<div className="p-4 text-center">
								<Target className="h-8 w-8 mx-auto mb-2 text-green-700" />
								<div className="text-2xl font-bold text-green-800">{stats.total_tasks}</div>
								<div className="text-sm font-medium text-green-700">–ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ</div>
							</div>
						</PixelCard>

						<PixelCard className="bg-gradient-to-r from-blue-200 to-blue-300">
							<div className="p-4 text-center">
								<Clock className="h-8 w-8 mx-auto mb-2 text-blue-700" />
								<div className="text-xl font-bold text-blue-800">{formatDuration(stats.total_time)}</div>
								<div className="text-sm font-medium text-blue-700">–û–±—â–µ–µ –≤—Ä–µ–º—è</div>
							</div>
						</PixelCard>

						<PixelCard className="bg-gradient-to-r from-orange-200 to-orange-300">
							<div className="p-4 text-center">
								<TrendingUp className="h-8 w-8 mx-auto mb-2 text-orange-700" />
								<div className="text-2xl font-bold text-orange-800">{stats.current_streak}</div>
								<div className="text-sm font-medium text-orange-700">–î–Ω–µ–π –ø–æ–¥—Ä—è–¥</div>
							</div>
						</PixelCard>

						<PixelCard className="bg-gradient-to-r from-yellow-200 to-yellow-300">
							<div className="p-4 text-center">
								<Trophy className="h-8 w-8 mx-auto mb-2 text-yellow-700" />
								<div className="text-2xl font-bold text-yellow-800">{stats.achievements_count}</div>
								<div className="text-sm font-medium text-yellow-700">–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π</div>
							</div>
						</PixelCard>
					</div>

					{/* –ì–ª–∞–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ */}
					<PixelCard>
						<div className="p-6">
							<Tabs defaultValue="tasks" className="w-full">
								<TabsList className="grid w-full grid-cols-4 border-2 border-black">
									<TabsTrigger value="tasks" className="border-2 border-black text-xs md:text-sm">
										üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏
									</TabsTrigger>
									<TabsTrigger value="office" className="border-2 border-black text-xs md:text-sm">
										üè¢ –û—Ñ–∏—Å
									</TabsTrigger>
									<TabsTrigger value="achievements" className="border-2 border-black text-xs md:text-sm">
										üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
									</TabsTrigger>
									<TabsTrigger value="wheel" className="border-2 border-black text-xs md:text-sm">
										üé∞ –ö—Ä—É—Ç–∏–ª–∫–∞
									</TabsTrigger>
								</TabsList>

								{/* –í–∫–ª–∞–¥–∫–∞ "–ú–æ–∏ –∑–∞–¥–∞—á–∏" */}
								<TabsContent value="tasks" className="mt-6 space-y-6">
									<DailyTaskStats userId={user!.id} />
								</TabsContent>

								{/* –í–∫–ª–∞–¥–∫–∞ "–û—Ñ–∏—Å" */}
								<TabsContent value="office" className="mt-6 space-y-6">
									<PixelCard className="bg-gradient-to-r from-blue-100 to-indigo-100">
										<div className="p-6">
											<h3 className="text-xl font-bold mb-4 flex items-center gap-2">
												<Building className="h-5 w-5" />
												–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ñ–∏—Å–∞ "{officeStats.office_name}"
											</h3>

											<div className="grid grid-cols-2 md:grid-cols-4 gap-4">
												<div className="text-center">
													<div className="text-2xl font-bold text-blue-600">{officeStats.total_employees}</div>
													<div className="text-sm text-muted-foreground">–í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</div>
												</div>
												<div className="text-center">
													<div className="text-2xl font-bold text-green-600">{officeStats.working_employees}</div>
													<div className="text-sm text-muted-foreground">–†–∞–±–æ—Ç–∞—é—Ç —Å–µ–π—á–∞—Å</div>
												</div>
												<div className="text-center">
													<div className="text-xl font-bold text-orange-600">{officeStats.total_hours_today.toFixed(1)}—á</div>
													<div className="text-sm text-muted-foreground">–ß–∞—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è</div>
												</div>
												<div className="text-center">
													<div className="text-xl font-bold text-purple-600">{officeStats.avg_hours_today.toFixed(1)}—á</div>
													<div className="text-sm text-muted-foreground">–°—Ä–µ–¥–Ω–µ–µ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞</div>
												</div>
											</div>
										</div>
									</PixelCard>

									<PixelCard>
										<div className="p-6">
											<h3 className="text-xl font-bold mb-4 flex items-center gap-2">
												<Users className="h-5 w-5" />
												–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
											</h3>

											{dailyStats.length > 0 ? (
												<div className="space-y-6">
													{/* –ì—Ä–∞—Ñ–∏–∫ –µ–¥–∏–Ω–∏—Ü */}
													<div>
														<h4 className="font-semibold mb-2">üìä –ï–¥–∏–Ω–∏—Ü—ã —Ä–∞–±–æ—Ç—ã</h4>
														<div className="relative h-32 bg-gray-50 p-4 rounded border-2 border-black">
															<svg className="w-full h-full" viewBox="0 0 100 100" preserveAspectRatio="none">
																{/* –°–µ—Ç–∫–∞ */}
																<defs>
																	<pattern id="grid" width="10" height="10" patternUnits="userSpaceOnUse">
																		<path d="M 10 0 L 0 0 0 10" fill="none" stroke="#e5e7eb" strokeWidth="0.5" />
																	</pattern>
																</defs>
																<rect width="100" height="100" fill="url(#grid)" />

																{/* –õ–∏–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ */}
																<polyline
																	fill="none"
																	stroke="#3b82f6"
																	strokeWidth="2"
																	points={dailyStats.map((day, index) => {
																		const maxUnits = Math.max(...dailyStats.map(d => d.units), 1)
																		const x = (index / (dailyStats.length - 1)) * 100
																		const y = 100 - (day.units / maxUnits) * 80
																		return `${x},${y}`
																	}).join(' ')}
																/>

																{/* –¢–æ—á–∫–∏ */}
																{dailyStats.map((day, index) => {
																	const maxUnits = Math.max(...dailyStats.map(d => d.units), 1)
																	const x = (index / (dailyStats.length - 1)) * 100
																	const y = 100 - (day.units / maxUnits) * 80
																	return (
																		<circle
																			key={index}
																			cx={x}
																			cy={y}
																			r="2"
																			fill="#3b82f6"
																			className="hover:r-3 transition-all cursor-pointer"
																		>
																			<title>{`${day.units} –µ–¥–∏–Ω–∏—Ü`}</title>
																		</circle>
																	)
																})}
															</svg>

															{/* –ü–æ–¥–ø–∏—Å–∏ –¥–∞—Ç */}
															<div className="flex justify-between mt-2">
																{dailyStats.map((day, index) => (
																	<div key={index} className="text-xs text-center">
																		<div>{new Date(day.date).toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' })}</div>
																		<div className="font-bold text-blue-600">{day.units}</div>
																	</div>
																))}
															</div>
														</div>
													</div>

													{/* –ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ */}
													<div>
														<h4 className="font-semibold mb-2">‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã (–º–∏–Ω)</h4>
														<div className="relative h-32 bg-gray-50 p-4 rounded border-2 border-black">
															<svg className="w-full h-full" viewBox="0 0 100 100" preserveAspectRatio="none">
																{/* –°–µ—Ç–∫–∞ */}
																<rect width="100" height="100" fill="url(#grid)" />

																{/* –õ–∏–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ */}
																<polyline
																	fill="none"
																	stroke="#10b981"
																	strokeWidth="2"
																	points={dailyStats.map((day, index) => {
																		const maxTime = Math.max(...dailyStats.map(d => d.time), 1)
																		const x = (index / (dailyStats.length - 1)) * 100
																		const y = 100 - (day.time / maxTime) * 80
																		return `${x},${y}`
																	}).join(' ')}
																/>

																{/* –¢–æ—á–∫–∏ */}
																{dailyStats.map((day, index) => {
																	const maxTime = Math.max(...dailyStats.map(d => d.time), 1)
																	const x = (index / (dailyStats.length - 1)) * 100
																	const y = 100 - (day.time / maxTime) * 80
																	return (
																		<circle
																			key={index}
																			cx={x}
																			cy={y}
																			r="2"
																			fill="#10b981"
																			className="hover:r-3 transition-all cursor-pointer"
																		>
																			<title>{`${day.time} –º–∏–Ω—É—Ç`}</title>
																		</circle>
																	)
																})}
															</svg>

															{/* –ü–æ–¥–ø–∏—Å–∏ –¥–∞—Ç */}
															<div className="flex justify-between mt-2">
																{dailyStats.map((day, index) => (
																	<div key={index} className="text-xs text-center">
																		<div>{new Date(day.date).toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' })}</div>
																		<div className="font-bold text-green-600">{day.time}</div>
																	</div>
																))}
															</div>
														</div>
													</div>

													{/* –ì—Ä–∞—Ñ–∏–∫ –∑–∞–¥–∞—á */}
													<div>
														<h4 className="font-semibold mb-2">üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á</h4>
														<div className="relative h-32 bg-gray-50 p-4 rounded border-2 border-black">
															<svg className="w-full h-full" viewBox="0 0 100 100" preserveAspectRatio="none">
																{/* –°–µ—Ç–∫–∞ */}
																<rect width="100" height="100" fill="url(#grid)" />

																{/* –õ–∏–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ */}
																<polyline
																	fill="none"
																	stroke="#8b5cf6"
																	strokeWidth="2"
																	points={dailyStats.map((day, index) => {
																		const maxTasks = Math.max(...dailyStats.map(d => d.tasks), 1)
																		const x = (index / (dailyStats.length - 1)) * 100
																		const y = 100 - (day.tasks / maxTasks) * 80
																		return `${x},${y}`
																	}).join(' ')}
																/>

																{/* –¢–æ—á–∫–∏ */}
																{dailyStats.map((day, index) => {
																	const maxTasks = Math.max(...dailyStats.map(d => d.tasks), 1)
																	const x = (index / (dailyStats.length - 1)) * 100
																	const y = 100 - (day.tasks / maxTasks) * 80
																	return (
																		<circle
																			key={index}
																			cx={x}
																			cy={y}
																			r="2"
																			fill="#8b5cf6"
																			className="hover:r-3 transition-all cursor-pointer"
																		>
																			<title>{`${day.tasks} –∑–∞–¥–∞—á`}</title>
																		</circle>
																	)
																})}
															</svg>

															{/* –ü–æ–¥–ø–∏—Å–∏ –¥–∞—Ç */}
															<div className="flex justify-between mt-2">
																{dailyStats.map((day, index) => (
																	<div key={index} className="text-xs text-center">
																		<div>{new Date(day.date).toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' })}</div>
																		<div className="font-bold text-purple-600">{day.tasks}</div>
																	</div>
																))}
															</div>
														</div>
													</div>
												</div>
											) : (
												<div className="text-center py-8">
													<div className="text-4xl mb-2">üìà</div>
													<div className="text-lg font-semibold">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>
													<div className="text-muted-foreground">–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–Ω—è–º</div>
												</div>
											)}
										</div>
									</PixelCard>
								</TabsContent>

								{/* –í–∫–ª–∞–¥–∫–∞ "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è" */}
								<TabsContent value="achievements" className="mt-6">
									<div className="space-y-6">
										<h3 className="text-2xl font-bold flex items-center gap-2">
											<Trophy className="h-6 w-6" />
											–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è ({achievements.length})
										</h3>

										<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
											{achievements.map((achievement) => (
												<PixelCard
													key={achievement.id}
													className="bg-gradient-to-r from-yellow-200 to-yellow-300"
													glowing
												>
													<div className="p-4">
														<div className="flex items-center gap-3">
															<div className="text-3xl">{achievement.icon}</div>
															<div className="flex-1">
																<div className="font-bold text-lg">{achievement.name}</div>
																<div className="text-sm text-muted-foreground">{achievement.description}</div>
																<div className="text-xs text-muted-foreground mt-1">
																	–ü–æ–ª—É—á–µ–Ω–æ: {new Date(achievement.unlocked_at).toLocaleDateString("ru-RU")}
																</div>
															</div>
														</div>
													</div>
												</PixelCard>
											))}
										</div>

										{achievements.length === 0 && (
											<PixelCard>
												<div className="p-8 text-center">
													<div className="text-6xl mb-4">üéØ</div>
													<div className="text-xl font-bold mb-2">–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π</div>
													<div className="text-muted-foreground">–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –∏—Ö –ø–æ–ª—É—á–∏—Ç—å!</div>
												</div>
											</PixelCard>
										)}

										{/* –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è */}
										<div className="mt-8">
											<h4 className="text-xl font-bold mb-4">üéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h4>
											<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
												{Object.entries(GAME_CONFIG.ACHIEVEMENTS).map(([achievementId, achievement]) => {
													const isUnlocked = achievements.some((a) => a.id === achievementId)
													return (
														<PixelCard
															key={achievementId}
															className={isUnlocked ? "opacity-50" : "bg-gradient-to-r from-gray-200 to-gray-300"}
														>
															<div className="p-4">
																<div className="flex items-center gap-3">
																	<div className="text-2xl">{achievement.badge}</div>
																	<div className="flex-1">
																		<div className="font-bold">{achievement.name}</div>
																		<div className="text-sm text-muted-foreground">{achievement.description}</div>
																		{achievement.points > 0 && (
																			<div className="text-xs text-yellow-600 font-bold">
																				–ù–∞–≥—Ä–∞–¥–∞: +{achievement.points} –æ—á–∫–æ–≤
																			</div>
																		)}
																	</div>
																	{isUnlocked && <Badge className="bg-green-500 text-white">‚úì</Badge>}
																</div>
															</div>
														</PixelCard>
													)
												})}
											</div>
										</div>
									</div>
								</TabsContent>

								{/* –í–∫–ª–∞–¥–∫–∞ "–ö—Ä—É—Ç–∏–ª–∫–∞" */}
								<TabsContent value="wheel" className="mt-6">
									<PixelCard>
										<div className="p-6 text-center">
											<h3 className="text-2xl font-bold mb-4 flex items-center justify-center gap-2">
												üé∞ –ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã
											</h3>
											<p className="text-muted-foreground mb-6">
												–ü–æ—Ç—Ä–∞—Ç—å—Ç–µ –æ—á–∫–∏ –Ω–∞ –≤—Ä–∞—â–µ–Ω–∏–µ –∫–æ–ª–µ—Å–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏–∑—ã!
											</p>

											<div className="mb-6">
												<CoinDisplay coins={stats.total_coins} animated />
											</div>

											<PixelButton
												onClick={() => setShowWheel(true)}
												disabled={stats.total_coins < 100}
												className="text-lg px-8 py-4"
											>
												{stats.total_coins >= 100 ? "üé≤ –ö—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ (100 –æ—á–∫–æ–≤)" : "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤"}
											</PixelButton>

											{stats.total_coins < 100 && (
												<p className="text-sm text-muted-foreground mt-4">
													–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 100 –æ—á–∫–æ–≤ –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è
												</p>
											)}
										</div>
									</PixelCard>

									{showWheel && (
										<PrizeWheel
											currentCoins={stats.total_coins}
											onClose={() => setShowWheel(false)}
											onPrizeWon={(prize) => {
												console.log("–í—ã–∏–≥—Ä–∞–Ω –ø—Ä–∏–∑:", prize)
											}}
											onCoinsSpent={(amount) => {
												setStats(prev => ({
													...prev,
													total_coins: prev.total_coins - amount
												}))
											}}
										/>
									)}
								</TabsContent>


							</Tabs>
						</div>
					</PixelCard>
				</div>

				{/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —É—Ä–æ–≤–Ω—è–º–∏ */}
				{showLevelModal && (
					<div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4">
						<div className="bg-gradient-to-br from-purple-200 to-pink-200 border-4 border-black shadow-[8px_8px_0px_0px_rgba(0,0,0,1)] max-w-4xl w-full max-h-[80vh] overflow-hidden">
							{/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª–∫–∏ */}
							<div className="bg-black text-white p-4 border-b-4 border-white">
								<div className="flex items-center justify-between">
									<h2 className="font-mono font-black text-xl uppercase">üéØ –°–ò–°–¢–ï–ú–ê –£–†–û–í–ù–ï–ô</h2>
									<button
										onClick={() => setShowLevelModal(false)}
										className="bg-red-500 hover:bg-red-600 border-2 border-white text-white font-mono font-black px-3 py-1 transition-colors"
									>
										‚ùå
									</button>
								</div>
							</div>

							{/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ */}
							<div className="p-6 overflow-y-auto max-h-[60vh]">
								{/* –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
								<div className="mb-6 bg-yellow-300 border-2 border-black p-4 shadow-[2px_2px_0px_0px_rgba(0,0,0,1)]">
									<div className="flex items-center gap-4">
										<span className="text-4xl">
											{calculateLevel(stats.total_coins).icon}
										</span>
										<div>
											<div className="font-mono font-black text-2xl text-black">
												–í–ê–®–ò –¢–ï–ö–£–©–ò–ô –£–†–û–í–ï–ù–¨: {calculateLevel(stats.total_coins).level} - {calculateLevel(stats.total_coins).name}
											</div>
											<div className="font-mono text-sm text-black">
												–ó–∞–¥–∞—á: {stats.total_tasks} | –ú–æ–Ω–µ—Ç—ã: {stats.total_coins} | –°–µ—Ä–∏—è: {stats.current_streak}
											</div>
										</div>
									</div>
								</div>

								{/* –¢–∞–±–ª–∏—Ü–∞ —É—Ä–æ–≤–Ω–µ–π */}
								<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
									{[
										{ range: "1-5", icon: "üå±", title: "–ù–û–í–ò–ß–û–ö", color: "bg-green-200", desc: "–ò–∑—É—á–∞–µ—Ç–µ –æ—Å–Ω–æ–≤—ã —Ä–∞–±–æ—Ç—ã" },
										{ range: "6-10", icon: "üìö", title: "–°–¢–ê–ñ–ï–†", color: "bg-blue-200", desc: "–û—Å–≤–∞–∏–≤–∞–µ—Ç–µ —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã" },
										{ range: "11-20", icon: "üíº", title: "–†–ê–ë–û–¢–ù–ò–ö", color: "bg-gray-200", desc: "–°—Ç–∞–±–∏–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ –∑–∞–¥–∞—á–∏" },
										{ range: "21-30", icon: "üîß", title: "–°–ü–ï–¶–ò–ê–õ–ò–°–¢", color: "bg-yellow-200", desc: "–û–ø—ã—Ç–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫" },
										{ range: "31-40", icon: "üéØ", title: "–≠–ö–°–ü–ï–†–¢", color: "bg-orange-200", desc: "–í—ã—Å–æ–∫–∞—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è" },
										{ range: "41-50", icon: "‚ö°", title: "–ú–ê–°–¢–ï–†", color: "bg-red-200", desc: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª —Å–≤–æ–µ–≥–æ –¥–µ–ª–∞" },
										{ range: "51-60", icon: "üé®", title: "–í–ò–†–¢–£–û–ó", color: "bg-purple-200", desc: "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–∞–±–æ—Ç–µ" },
										{ range: "61-70", icon: "üß†", title: "–ì–ï–ù–ò–ô", color: "bg-indigo-200", desc: "–í—ã–¥–∞—é—â–∏–µ—Å—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏" },
										{ range: "71-80", icon: "üèÜ", title: "–õ–ï–ì–ï–ù–î–ê", color: "bg-pink-200", desc: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è" },
										{ range: "81-90", icon: "üíé", title: "–¢–ò–¢–ê–ù", color: "bg-cyan-200", desc: "–¢–∏—Ç–∞–Ω–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞" },
										{ range: "91-100", icon: "üëë", title: "–ë–û–ì", color: "bg-gradient-to-r from-yellow-300 to-yellow-400", desc: "–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ" }
									].map((group, index) => (
										<div key={index} className={`${group.color} border-2 border-black p-4 shadow-[2px_2px_0px_0px_rgba(0,0,0,1)]`}>
											<div className="flex items-center gap-3 mb-2">
												<span className="text-2xl">{group.icon}</span>
												<div>
													<div className="font-mono font-black text-lg text-black">{group.title}</div>
													<div className="font-mono text-sm text-black">–£—Ä–æ–≤–Ω–∏ {group.range}</div>
												</div>
											</div>
											<div className="font-mono text-xs text-black">
												{group.desc}
											</div>
										</div>
									))}
								</div>

								{/* –§–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞ */}
								<div className="mt-6 bg-white border-2 border-black p-4 shadow-[2px_2px_0px_0px_rgba(0,0,0,1)]">
									<div className="font-mono font-black text-lg text-black mb-2">üìä –§–û–†–ú–£–õ–ê –†–ê–°–ß–ï–¢–ê –£–†–û–í–ù–Ø:</div>
									<div className="font-mono text-sm text-black space-y-1">
										<div>‚Ä¢ –û–ø—ã—Ç –∑–∞ –∑–∞–¥–∞—á–∏: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á √ó 10</div>
										<div>‚Ä¢ –û–ø—ã—Ç –∑–∞ –º–æ–Ω–µ—Ç—ã: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç √ó 0.5</div>
										<div>‚Ä¢ –ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é: –¥–Ω–∏ –ø–æ–¥—Ä—è–¥ √ó 50</div>
										<div>‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ –æ–ø—ã—Ç–∞</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				)}
			</main>
		</AuthGuard>
	)
}
