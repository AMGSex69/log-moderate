"use client"

import { useState, useEffect, useRef, useCallback } from "react"
import { useRouter } from "next/navigation"
import { useToast } from "@/hooks/use-toast"
import { Toaster } from "@/components/ui/toaster"
import { supabase, type TaskType } from "@/lib/supabase"
import { authService } from "@/lib/auth"
import { useAuth } from "@/hooks/use-auth"
import { useActiveSessions } from "@/hooks/use-active-sessions"
import { useWorkSession } from "@/hooks/use-work-session"
import { useMultiTimer } from "@/hooks/use-multi-timer"
import TaskGroup from "@/components/task-group"
import ActiveTasksPanel from "@/components/active-tasks-panel"
import CompletionDialog from "@/components/completion-dialog"
import StatsPanel from "@/components/stats-panel"
import PixelCard from "@/components/pixel-card"
import PixelButton from "@/components/pixel-button"
import CoinDisplay from "@/components/coin-display"
import LevelDisplay from "@/components/level-display"
import AchievementPopup from "@/components/achievement-popup"
import Navigation from "@/components/navigation"
import AuthGuard from "@/components/auth/auth-guard"
import WorkSessionEnhanced from "@/components/work-session-enhanced"
import BreakControls from "@/components/break-controls"
import ScheduleSelector from "@/components/schedule-selector"
import { Clock, Trophy, LogOut } from "lucide-react"
import { GAME_CONFIG } from "@/lib/game-config"
import { appCache } from "@/lib/cache"
import { RewardSystem } from "@/lib/reward-system"
import PrizeWheel, { type Prize } from "@/components/prize-wheel"

export default function Home() {
	const router = useRouter()
	const { user, profile, signOut, loading: authLoading } = useAuth()

	// –í—Å–µ —Ö—É–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω—ã –±–µ–∑—É—Å–ª–æ–≤–Ω–æ
	const { startSession, endSession } = useActiveSessions()
	const { isWorking, updateSessionCache } = useWorkSession()
	const {
		activeTasks,
		startTask,
		stopTask,
		removeTask,
		stopAllTasks,
		startAllTasks,
		getTaskTimer,
		getActiveTasksWithTimers,
	} = useMultiTimer()
	const { toast } = useToast()

	const [taskTypes, setTaskTypes] = useState<TaskType[]>([])
	const [completingTask, setCompletingTask] = useState<any>(null)
	const [showCompletionDialog, setShowCompletionDialog] = useState(false)
	const [currentTime, setCurrentTime] = useState(new Date().toLocaleTimeString())
	const [playerCoins, setPlayerCoins] = useState(0)
	const [newAchievement, setNewAchievement] = useState<any>(null)
	const [isOnBreak, setIsOnBreak] = useState(false)
	const [needsScheduleSetup, setNeedsScheduleSetup] = useState(false)
	const [pageLoading, setPageLoading] = useState(true)
	const [localIsWorking, setLocalIsWorking] = useState(false)
	const [showPrizeWheel, setShowPrizeWheel] = useState(false)
	const [wonPrize, setWonPrize] = useState<Prize | null>(null)

	const initializingRef = useRef(false)
	const timeUpdateRef = useRef<NodeJS.Timeout | null>(null)
	const achievementTimeoutRef = useRef<NodeJS.Timeout | null>(null)
	const dataInitTimeoutRef = useRef<NodeJS.Timeout | null>(null)

	// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤–∫–ª–∞–¥–∫–∏
	useEffect(() => {
		const updateTime = () => {
			setCurrentTime(new Date().toLocaleTimeString())
		}

		const handleVisibilityChange = () => {
			if (document.hidden) {
				if (timeUpdateRef.current) {
					clearInterval(timeUpdateRef.current)
				}
			} else {
				updateTime()
				timeUpdateRef.current = setInterval(updateTime, 60000) // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
			}
		}

		document.addEventListener("visibilitychange", handleVisibilityChange)
		handleVisibilityChange()

		return () => {
			document.removeEventListener("visibilitychange", handleVisibilityChange)
			if (timeUpdateRef.current) {
				clearInterval(timeUpdateRef.current)
			}
		}
	}, [])

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ auth
	useEffect(() => {
		if (!authLoading && user && profile && !initializingRef.current) {
			console.log("üöÄ Starting data initialization...")
			initializingRef.current = true
			initializeData()
		} else if (!authLoading && !user) {
			// –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å—Ä–∞–∑—É —É–±–∏—Ä–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
			setPageLoading(false)
		}
	}, [authLoading, user, profile])

	useEffect(() => {
		setLocalIsWorking(isWorking)
	}, [isWorking])

	// –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
	useEffect(() => {
		return () => {
			if (achievementTimeoutRef.current) {
				clearTimeout(achievementTimeoutRef.current)
			}
			if (dataInitTimeoutRef.current) {
				clearTimeout(dataInitTimeoutRef.current)
			}
		}
	}, [])

	const initializeData = async () => {
		setPageLoading(true)

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
		dataInitTimeoutRef.current = setTimeout(() => {
			console.log("‚è∞ Data initialization timeout")
			setPageLoading(false)
		}, 8000) // 8 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º

		try {
			console.log("üìä Loading cached data...")
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
			const cachedTaskTypes = appCache.get("task_types")
			const cachedCoins = appCache.get(`player_coins_${user?.id}`)

			if (cachedTaskTypes) {
				setTaskTypes(cachedTaskTypes)
				console.log("üíæ Task types loaded from cache")
			}
			if (cachedCoins !== null) {
				setPlayerCoins(cachedCoins)
				console.log("üíæ Coins loaded from cache")
			}

			// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
			const promises = []

			if (!cachedTaskTypes) {
				promises.push(
					fetchTaskTypes().catch((error) => {
						console.error("‚ùå Task types error:", error)
						return [] // Fallback to empty array
					}),
				)
			}

			if (cachedCoins === null) {
				promises.push(
					fetchPlayerCoins().catch((error) => {
						console.error("‚ùå Player coins error:", error)
						return 0 // Fallback to 0
					}),
				)
			}

			promises.push(
				checkScheduleSetup()
			)

			console.log("‚è≥ Waiting for data promises...")
			await Promise.allSettled(promises)
			console.log("‚úÖ Data initialization complete")
		} catch (error) {
			console.error("‚ùå Data initialization error:", error)
		} finally {
			setPageLoading(false)
			if (dataInitTimeoutRef.current) {
				clearTimeout(dataInitTimeoutRef.current)
			}
		}
	}

	const fetchTaskTypes = async () => {
		try {
			console.log("üìã Fetching task types...")
			const { data, error } = await supabase.from("task_types").select("*").order("name")

			if (error) throw error

			setTaskTypes(data || [])
			appCache.set("task_types", data || [], 60) // –ö—ç—à –Ω–∞ —á–∞—Å
			console.log("‚úÖ Task types loaded:", data?.length || 0)
		} catch (error) {
			console.error("‚ùå Error loading task types:", error)
			throw error
		}
	}

	const fetchPlayerCoins = async () => {
		if (!user) return

		try {
			console.log("ü™ô Fetching player coins...")
			const { employeeId, error: empError } = await authService.getEmployeeId(user.id)
			if (empError || !employeeId) {
				console.log("‚ö†Ô∏è No employee ID found")
				return
			}

			const { data: logs, error: logsError } = await supabase
				.from("task_logs")
				.select("units_completed, task_types!inner(name)")
				.eq("employee_id", employeeId)

			if (logsError) {
				console.error("‚ùå Logs error:", logsError)
				return
			}

			let totalCoins = 0
			logs?.forEach((log: any) => {
				const taskName = log.task_types.name
				const coinsPerUnit = GAME_CONFIG.TASK_REWARDS[taskName] || 5
				totalCoins += log.units_completed * coinsPerUnit
			})

			setPlayerCoins(totalCoins)
			appCache.set(`player_coins_${user.id}`, totalCoins, 10) // –ö—ç—à –Ω–∞ 10 –º–∏–Ω—É—Ç
			console.log("‚úÖ Player coins loaded:", totalCoins)
		} catch (error) {
			console.error("‚ùå Error loading coins:", error)
			throw error
		}
	}

	const checkScheduleSetup = () => {
		console.log("üìÖ Checking schedule setup...")
		if (profile && !profile.work_schedule) {
			console.log("‚ö†Ô∏è Schedule setup needed")
			setNeedsScheduleSetup(true)
			return true
		}
		console.log("‚úÖ Schedule check complete")
		return false
	}

	const handleBreakStart = async () => {
		// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
		stopAllTasks()
		activeTasks.forEach((task) => {
			endSession(task.id)
		})
		setIsOnBreak(true)
	}

	const handleBreakEnd = async () => {
		setIsOnBreak(false)
		// –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
		startAllTasks()
		activeTasks.forEach((task) => {
			startSession(task.id)
		})
	}

	const handleScheduleSelect = async (schedule: string, hours: number) => {
		if (!user) return

		try {
			const { error } = await supabase
				.from("user_profiles")
				.update({
					work_schedule: schedule,
					work_hours: hours,
				})
				.eq("id", user.id)

			if (error) throw error

			setNeedsScheduleSetup(false)

			// –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø—Ä–æ—Ñ–∏–ª—è
			if (profile) {
				const updatedProfile = { ...profile, work_schedule: schedule, work_hours: hours }
				appCache.set("user_profile", updatedProfile, 30)
			}

			toast({
				title: "–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
				description: `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥—Ä–∞—Ñ–∏–∫ ${schedule}`,
			})
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:", error)
			toast({
				title: "–û—à–∏–±–∫–∞",
				description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫",
				variant: "destructive",
			})
		}
	}

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—á–∏ (—Ç–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏)
	const handleStartTask = useCallback(
		async (taskId: number, taskName: string) => {
			if (!localIsWorking && !isWorking) {
				toast({
					title: "–ù–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ",
					description: "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—Ç—å—Ç–µ—Å—å –Ω–∞ —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ",
					variant: "destructive",
				})
				return
			}

			if (isOnBreak) {
				toast({
					title: "–ü–µ—Ä–µ—Ä—ã–≤",
					description: "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–±–µ–¥",
					variant: "destructive",
				})
				return
			}

			try {
				// –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞—á–∞—Ç—å –∑–∞–¥–∞—á—É
				const success = startTask(taskId, taskName)

				if (!success) {
					toast({
						title: "–í–Ω–∏–º–∞–Ω–∏–µ",
						description: "–≠—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞",
						variant: "destructive",
					})
					return
				}

				toast({
					title: "üéÆ –ó–∞–¥–∞—á–∞ –Ω–∞—á–∞—Ç–∞!",
					description: `–ù–∞—á–∞—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${taskName}`,
				})

				// –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
				startSession(taskId).catch((error) => {
					console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:", error)
					// –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º UI –ø—Ä–∏ –æ—à–∏–±–∫–µ
					removeTask(taskId)

					toast({
						title: "–û—à–∏–±–∫–∞",
						description: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–¥–∞—á—É",
						variant: "destructive",
					})
				})

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –º—É–ª—å—Ç–∏–∑–∞–¥–∞—á–Ω–æ—Å—Ç–∏
				if (activeTasks.length >= 2) {
					// +1 –∑–∞ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É = 3
					checkForMultitaskingAchievement()
				}
			} catch (error) {
				console.error("–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—á–∏:", error)
				toast({
					title: "–û—à–∏–±–∫–∞",
					description: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–¥–∞—á—É",
					variant: "destructive",
				})
			}
		},
		[localIsWorking, isWorking, activeTasks, isOnBreak, startTask, startSession, removeTask, toast],
	)

	const handleStopTask = async (taskId: number) => {
		const task = stopTask(taskId)
		if (!task) return

		const timer = getTaskTimer(taskId)
		if (!timer) return

		await endSession(taskId)

		setCompletingTask({
			...task,
			timer,
		})
		setShowCompletionDialog(true)
	}

	const handleSaveCompletion = async (units: number, notes: string) => {
		if (!completingTask || !user) return

		try {
			const { employeeId, error: empError } = await authService.getEmployeeId(user.id)
			if (empError || !employeeId) {
				throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
			}

			// –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–æ–Ω—É—Å–æ–≤
			const today = new Date().toISOString().split("T")[0]
			const { data: todayTasks } = await supabase
				.from("task_logs")
				.select("task_types!inner(name), units_completed, time_spent_minutes, work_date")
				.eq("employee_id", employeeId)
				.eq("work_date", today)

			const dailyTasksForBonus =
				todayTasks?.map((t: any) => ({
					taskName: t.task_types?.name,
					units: t.units_completed,
					timeMinutes: t.time_spent_minutes,
					date: t.work_date,
				})) || []

			// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—á–∫–∏ —Å –±–æ–Ω—É—Å–∞–º–∏
			const rewardCalc = RewardSystem.calculateReward(
				completingTask.name,
				units,
				completingTask.timer.getMinutes(),
				dailyTasksForBonus,
			)

			const { error: logError } = await supabase.from("task_logs").insert({
				employee_id: employeeId,
				task_type_id: completingTask.id,
				units_completed: units,
				time_spent_minutes: completingTask.timer.getMinutes(),
				work_date: new Date().toISOString().split("T")[0],
				notes: notes || null,
				is_active: false,
				started_at: completingTask.startTime.toISOString(),
			})

			if (logError) throw logError

			const coinsEarned = rewardCalc.totalPoints
			const newTotalCoins = playerCoins + coinsEarned
			setPlayerCoins(newTotalCoins)

			// –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –º–æ–Ω–µ—Ç
			appCache.set(`player_coins_${user.id}`, newTotalCoins, 10)

			toast({
				title: "üéâ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
				description: `+${coinsEarned} –æ—á–∫–æ–≤! ${rewardCalc.bonusReasons.length > 0 ? `–ë–æ–Ω—É—Å—ã: ${rewardCalc.bonusReasons.join(", ")}` : ""} –í—Ä–µ–º—è: ${completingTask.timer.formatTime()}`,
			})

			checkForAchievements(newTotalCoins)

			// –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
			removeTask(completingTask.id)
			setCompletingTask(null)
			setShowCompletionDialog(false)
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", error)
			toast({
				title: "–û—à–∏–±–∫–∞",
				description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
				variant: "destructive",
			})
		}
	}

	const checkForAchievements = (coins: number) => {
		if (coins >= 1000 && playerCoins < 1000) {
			const achievement = GAME_CONFIG.ACHIEVEMENTS["thousand_club"]
			if (achievement) {
				setNewAchievement({ id: "thousand_club", ...achievement })
				// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä—É—Ç–∏–ª–∫—É –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
				achievementTimeoutRef.current = setTimeout(() => {
					setShowPrizeWheel(true)
				}, 2000) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –ø–æ–ø–∞–ø–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
			}
		}
	}

	const checkForMultitaskingAchievement = () => {
		const achievement = GAME_CONFIG.ACHIEVEMENTS["multitasker"]
		if (achievement) {
			setNewAchievement({ id: "multitasker", ...achievement })
		}
	}

	const handleSignOut = async () => {
		// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
		activeTasks.forEach((task) => {
			endSession(task.id)
		})
		await signOut()
		toast({
			title: "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
			description: "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
		})
	}

	const handleWorkSessionChange = useCallback((working: boolean) => {
		setLocalIsWorking(working)
	}, [])

	const handlePrizeWon = async (prize: Prize) => {
		setWonPrize(prize)

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–π –ø—Ä–∏–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
		if (user) {
			try {
				const { employeeId } = await authService.getEmployeeId(user.id)
				if (employeeId) {
					await supabase.from("employee_prizes").insert({
						employee_id: employeeId,
						prize_name: prize.name,
						prize_description: prize.description,
						prize_icon: prize.icon,
						prize_rarity: prize.rarity,
						won_at: new Date().toISOString(),
						is_claimed: false,
					})
				}
			} catch (error) {
				console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–∑–∞:", error)
			}
		}

		toast({
			title: "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!",
			description: `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: ${prize.name}!`,
		})
	}

	const handleCloseWheel = () => {
		setShowPrizeWheel(false)
		setWonPrize(null)
	}

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
	const handleAchievementClose = () => {
		setNewAchievement(null)
		// –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
		if (achievementTimeoutRef.current) {
			clearTimeout(achievementTimeoutRef.current)
			achievementTimeoutRef.current = null
		}
	}

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
	const groupedTasks = Object.entries(GAME_CONFIG.TASK_GROUPS).map(([groupName, groupData]) => ({
		name: groupName,
		icon: groupData.icon,
		color: groupData.color,
		tasks: taskTypes.filter((task) => groupData.tasks.includes(task.name)),
	}))

	// –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å —Ç–∞–π–º–µ—Ä–∞–º–∏
	const activeTasksWithTimers = getActiveTasksWithTimers()

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ auth –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ò–õ–ò –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
	if (authLoading || (user && profile && pageLoading)) {
		return (
			<AuthGuard>
				<main className="min-h-screen bg-gradient-to-br from-purple-400 via-pink-500 to-red-500 p-4 flex items-center justify-center">
					<PixelCard>
						<div className="p-8 text-center">
							<div className="text-6xl animate-bounce mb-4">üéÆ</div>
							<div className="text-2xl font-bold">{authLoading ? "–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã..." : "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."}</div>
							<div className="text-lg mt-2 opacity-80">
								{authLoading ? "–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É" : "–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å"}
							</div>
							<div className="mt-4">
								<div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-white"></div>
							</div>
						</div>
					</PixelCard>
					<Toaster />
				</main>
			</AuthGuard>
		)
	}

	// –£—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–æ–ª—å–∫–æ JSX, –Ω–µ —Ö—É–∫–æ–≤
	if (needsScheduleSetup) {
		return (
			<AuthGuard>
				<main className="min-h-screen bg-gradient-to-br from-purple-400 via-pink-500 to-red-500 p-4 flex items-center justify-center">
					<ScheduleSelector onScheduleSelect={handleScheduleSelect} loading={false} />
					<Toaster />
				</main>
			</AuthGuard>
		)
	}

	return (
		<AuthGuard>
			<main className="min-h-screen bg-gradient-to-br from-purple-400 via-pink-500 to-red-500 p-4">
				<div className="container mx-auto py-6">
					<Navigation />

					{/* –ò–≥—Ä–æ–≤–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
					<div className="flex items-center justify-between mb-6">
						<div className="text-white">
							<h1 className="text-4xl font-bold">üéÆ –†–∞–±–æ—á–∞—è —Å—Ç–∞–Ω—Ü–∏—è</h1>
							<p className="text-xl">–ò–≥—Ä–æ–∫: {profile?.full_name || "–ó–∞–≥—Ä—É–∑–∫–∞..."}</p>
						</div>
						<div className="flex items-center gap-4">
							<PixelCard className="bg-gradient-to-r from-yellow-200 to-yellow-300">
								<div className="p-3">
									<CoinDisplay coins={playerCoins} animated />
								</div>
							</PixelCard>
							<PixelCard>
								<div className="p-3 flex items-center gap-2 text-lg font-mono">
									<Clock className="h-5 w-5" />
									{currentTime}
								</div>
							</PixelCard>
							<PixelButton onClick={handleSignOut} variant="secondary" size="sm">
								<LogOut className="h-4 w-4 mr-2" />
								–í—ã–π—Ç–∏
							</PixelButton>
						</div>
					</div>

					<div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
						{/* –ü–∞–Ω–µ–ª—å –∑–∞–¥–∞—á */}
						<div className="lg:col-span-3 space-y-6">
							{/* –ü–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á */}
							<ActiveTasksPanel activeTasks={activeTasksWithTimers} onStopTask={handleStopTask} />

							{/* –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã */}
							<PixelCard>
								<div className="p-4 text-center">
									<div className="flex items-center justify-center gap-4">
										<div className="flex items-center gap-2">
											<span className="text-2xl">‚ö°</span>
											<h2 className="text-2xl font-bold">–ö–≤–µ—Å—Ç—ã</h2>
										</div>
										{!localIsWorking && !isWorking && (
											<span className="text-sm bg-red-100 text-red-800 px-3 py-1 rounded-full">–ù–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ</span>
										)}
										{(localIsWorking || isWorking) && (
											<span className="text-sm bg-green-100 text-green-800 px-3 py-1 rounded-full">–ù–∞ —Ä–∞–±–æ—Ç–µ</span>
										)}
										{activeTasks.length > 0 && (
											<span className="text-sm bg-blue-100 text-blue-800 px-3 py-1 rounded-full">
												{activeTasks.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
											</span>
										)}
									</div>
								</div>
							</PixelCard>

							{/* –ì—Ä—É–ø–ø—ã –∑–∞–¥–∞—á */}
							{groupedTasks.map((group) => (
								<TaskGroup
									key={group.name}
									groupName={group.name}
									groupIcon={group.icon}
									groupColor={group.color}
									tasks={group.tasks}
									activeTasks={activeTasks.map((task) => task.id)}
									onStartTask={handleStartTask}
									onStopTask={handleStopTask}
									getTaskTime={(taskId) => {
										const timer = getTaskTimer(taskId)
										return timer?.formatTime()
									}}
								/>
							))}
						</div>

						{/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
						<div className="space-y-6">
							{/* –ü—Ä–æ—Ñ–∏–ª—å –∏ –£—Ä–æ–≤–µ–Ω—å —Ä—è–¥–æ–º */}
							<div className="grid grid-cols-2 gap-3">
								{/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è */}
								<PixelButton onClick={() => router.push("/profile")} className="w-full" variant="success">
									<Trophy className="h-4 w-4 mr-2" />
									–ü—Ä–æ—Ñ–∏–ª—å
								</PixelButton>

								{/* –£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞ */}
								<PixelCard>
									<div className="p-3">
										<div className="flex items-center gap-1 mb-2">
											<span className="text-sm">‚≠ê</span>
											<h3 className="font-bold text-sm">–£—Ä–æ–≤–µ–Ω—å</h3>
										</div>
										<LevelDisplay coins={playerCoins} />
									</div>
								</PixelCard>
							</div>

							{/* –û—Ç–º–µ—Ç–∫–∞ –ø—Ä–∏—Ö–æ–¥–∞/—É—Ö–æ–¥–∞ */}
							<WorkSessionEnhanced onSessionChange={handleWorkSessionChange} />

							{/* –ö–æ–Ω—Ç—Ä–æ–ª—å –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ - —Å—Ä–∞–∑—É –ø–æ–¥ —Ä–∞–±–æ—á–µ–π —Å–º–µ–Ω–æ–π */}
							<BreakControls onBreakStart={handleBreakStart} onBreakEnd={handleBreakEnd} isOnBreak={isOnBreak} />

							{/* –ú–∏–Ω–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
							<StatsPanel />
						</div>
					</div>

					{/* –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è */}
					<CompletionDialog
						isOpen={showCompletionDialog}
						onClose={() => setShowCompletionDialog(false)}
						onSave={handleSaveCompletion}
						taskName={completingTask?.name || ""}
						timeSpent={completingTask?.timer?.formatTime() || ""}
						taskId={completingTask?.id}
					/>

					{/* –ü–æ–ø–∞–ø –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π */}
					<AchievementPopup achievement={newAchievement} onClose={handleAchievementClose} />
				</div>
				<Toaster />
				{/* –ö—Ä—É—Ç–∏–ª–∫–∞ –ø—Ä–∏–∑–æ–≤ */}
				<PrizeWheel isOpen={showPrizeWheel} onClose={handleCloseWheel} onPrizeWon={handlePrizeWon} />
			</main>
		</AuthGuard>
	)
}
