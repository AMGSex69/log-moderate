"use client"

import React from "react"
import { useState, useEffect, createContext, useContext, useRef, useMemo, useCallback } from "react"
import type { User } from "@supabase/supabase-js"
import { authService, type UserProfile } from "@/lib/auth"
import { supabase } from "@/lib/supabase"
import { appCache } from "@/lib/cache"
import { useProfileSync } from "@/lib/profile-sync"

interface AuthContextType {
	user: User | null
	profile: UserProfile | null
	loading: boolean
	error: string | null
	signIn: (email: string, password: string) => Promise<{ error: any }>
	signUp: (email: string, password: string, fullName: string, workSchedule?: string, districtId?: number) => Promise<{ error: any }>
	signOut: () => Promise<void>
	refreshProfile: () => Promise<void>
	updateProfile: (updates: Partial<UserProfile>) => Promise<{ error: any }>
}

const AuthContext = createContext<AuthContextType | undefined>(undefined)

export function useAuth() {
	const context = useContext(AuthContext)
	if (context === undefined) {
		throw new Error("useAuth must be used within an AuthProvider")
	}
	return context
}

export function AuthProvider({ children }: { children: React.ReactNode }) {
	const [user, setUser] = useState<User | null>(null)
	const [profile, setProfile] = useState<UserProfile | null>(null)
	const [loading, setLoading] = useState(true)
	const [error, setError] = useState<string | null>(null)
	const initialized = useRef(false)
	const authStateListenerRef = useRef<any>(null)
	const profileLoadingRef = useRef(false)

	useEffect(() => {
		// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
		if (initialized.current) return
		initialized.current = true

		const initializeAuth = async () => {
			try {
				console.log("üîÑ Initializing auth...")
				setError(null)

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å–Ω–∞—á–∞–ª–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
				const cachedUser = appCache.get("current_user")
				const cachedProfile = appCache.get("user_profile")

				if (cachedUser && cachedProfile) {
					console.log("üíæ Using cached auth data")
					setUser(cachedUser)
					setProfile(cachedProfile)
					setLoading(false)
					console.log("‚úÖ Loaded from cache, loading set to false")
					return
				}

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Supabase
				console.log("‚öôÔ∏è Checking Supabase configuration...")
				const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
				const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

				if (!supabaseUrl || !supabaseKey) {
					console.error("‚ùå Missing Supabase configuration")
					setError("Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.local")
					setLoading(false)
					return
				}

				console.log("‚úÖ Supabase config OK")

				// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
				console.log("üîç Getting current session...")

				const sessionPromise = supabase.auth.getSession()
				const timeoutPromise = new Promise((_, reject) =>
					setTimeout(() => reject(new Error("Session request timeout after 10 seconds")), 10000)
				)

				try {
					const { data: { session }, error: sessionError } = await Promise.race([
						sessionPromise,
						timeoutPromise
					]) as any

					console.log("üìã Session result:", { session: !!session, error: sessionError })

					if (sessionError) {
						console.error("‚ùå Session error:", sessionError)
						setError(sessionError.message)
						setLoading(false)
						return
					}

					if (session?.user) {
						console.log("‚úÖ User found:", session.user.id)
						setUser(session.user)

						// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å retry –ª–æ–≥–∏–∫–æ–π
						const loadProfileWithRetry = async (retries = 3) => {
							// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏
							if (profileLoadingRef.current) {
								console.log("üîÑ Profile already loading, skipping...")
								return
							}

							profileLoadingRef.current = true
							try {
								for (let i = 0; i < retries; i++) {
									try {
										console.log(`üë§ Loading user profile... (attempt ${i + 1}/${retries})`)
										const { profile, error } = await authService.getUserProfile(session.user.id)

										if (error) {
											console.warn(`‚ö†Ô∏è Profile load error (attempt ${i + 1}):`, error)
											if (i === retries - 1) {
												// –ù–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–µ —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
												console.log("üîß Creating fallback profile...")
												const fallbackProfile = {
													id: session.user.id,
													full_name: session.user.user_metadata?.full_name || session.user.email || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
													position: "–°–æ—Ç—Ä—É–¥–Ω–∏–∫",
													is_admin: false,
													role: 'user',
													work_schedule: "5/2",
													work_hours: 9,
													is_online: false,
													created_at: new Date().toISOString(),
													updated_at: new Date().toISOString(),
													office_name: '–†–∞—Å—Å–≤–µ—Ç',
													office_stats: {
														total_employees: 3,
														working_employees: 1,
														total_hours_today: 4.5,
														avg_hours_today: 4.5
													}
												}
												setProfile(fallbackProfile)
												appCache.set("user_profile", fallbackProfile, 5) // –ö–æ—Ä–æ—Ç–∫–∏–π –∫—ç—à –¥–ª—è fallback
												break
											}
											continue
										}

										console.log("üë§ Profile loaded:", !!profile)
										setProfile(profile)

										// –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
										appCache.set("current_user", session.user, 30)
										appCache.set("user_profile", profile, 30)
										console.log("üíæ Auth data cached")
										break
									} catch (profileError) {
										console.error(`‚ùå Profile error (attempt ${i + 1}):`, profileError)
										if (i < retries - 1) {
											// –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
											await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1)))
										} else {
											console.log("‚ö†Ô∏è All profile load attempts failed, user authenticated without profile")
										}
									}
								}
							} finally {
								profileLoadingRef.current = false
							}
						}

						await loadProfileWithRetry()
					} else {
						console.log("üë§ No user session found")
					}
				} catch (timeoutError) {
					console.warn("‚ö†Ô∏è Supabase timeout - activating development mode")

					const mockUser = {
						id: "dev-user-123",
						email: "dev@example.com",
						user_metadata: { full_name: "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫" }
					} as any

					const mockProfile = {
						id: "dev-user-123",
						full_name: "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
						position: "Developer",
						is_admin: true,
						work_schedule: "5/2",
						work_hours: 9,
						is_online: true,
						created_at: new Date().toISOString(),
						updated_at: new Date().toISOString()
					}

					setUser(mockUser)
					setProfile(mockProfile)
					appCache.set("current_user", mockUser, 30)
					appCache.set("user_profile", mockProfile, 30)

					console.log("üõ†Ô∏è Development mode activated - mock user created")
				}
			} catch (error: any) {
				console.error("‚ùå Auth initialization error:", error)
				if (error.message?.includes('timeout')) {
					setError("–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.")
				} else if (error.message && !error.message.includes('timeout')) {
					setError(error.message || "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
				}
			} finally {
				console.log("üèÅ Auth initialization complete - setting loading to false")
				setLoading(false)
				console.log("‚úÖ Auth initialization complete, loading state:", false)
			}
		}

		// –°–æ–∑–¥–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
		let isMounted = true

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
		initializeAuth()

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
		if (!authStateListenerRef.current) {
			console.log("üëÇ Setting up auth state listener")

			const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—Å–µ –µ—â–µ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
				if (!isMounted) return

				console.log("üîÑ Auth state changed:", event, session?.user?.id)
				setError(null)

				if (event === 'SIGNED_OUT') {
					setUser(null)
					setProfile(null)
					appCache.clear()
					setLoading(false)
					return
				}

				if (event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') {
					setUser(session?.user ?? null)
					setLoading(false)

					if (session?.user) {
						// –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
						if (!profileLoadingRef.current) {
							profileLoadingRef.current = true
							authService.getUserProfile(session.user.id)
								.then(({ profile }) => {
									if (isMounted) {
										setProfile(profile)
										appCache.set("current_user", session.user, 30)
										appCache.set("user_profile", profile, 30)
									}
								})
								.catch(error => {
									console.error("‚ùå Profile fetch error:", error)
								})
								.finally(() => {
									profileLoadingRef.current = false
								})
						}
					}
					return
				}

				if (event === 'INITIAL_SESSION') {
					setUser(session?.user ?? null)
					setLoading(false)
					return
				}

				setUser(session?.user ?? null)
				if (!session?.user) {
					setProfile(null)
					appCache.clear()
				}
				setLoading(false)
			})

			authStateListenerRef.current = subscription
		}

		// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
		return () => {
			isMounted = false
			if (authStateListenerRef.current) {
				authStateListenerRef.current.unsubscribe()
				authStateListenerRef.current = null
			}
		}
	}, [])

	const handleSignIn = async (email: string, password: string) => {
		setError(null)
		setLoading(true)
		try {
			const { error } = await authService.signIn(email, password)
			if (error) {
				setError(error.message)
			}
			return { error }
		} finally {
			setLoading(false)
		}
	}

	const handleSignUp = async (email: string, password: string, fullName: string, workSchedule?: string, districtId?: number) => {
		setError(null)
		setLoading(true)
		try {
			const { error } = await authService.signUp(email, password, fullName, workSchedule, districtId)
			if (error) {
				setError(error.message)
			}
			return { error }
		} finally {
			setLoading(false)
		}
	}

	const handleSignOut = async () => {
		setLoading(true)
		try {
			await authService.signOut()
			setUser(null)
			setProfile(null)
			setError(null)
			appCache.clear()
		} catch (error: any) {
			console.error("‚ùå Sign out error:", error)
		} finally {
			setLoading(false)
		}
	}

	const refreshProfile = useCallback(async () => {
		if (user) {
			try {
				console.log("üîÑ [REFRESH] Refreshing profile from database...")

				// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ user_profiles
				const { data: userProfileData, error: userProfileError } = await supabase
					.from("user_profiles")
					.select("*")
					.eq("id", user.id)
					.maybeSingle()

				console.log("üìä [REFRESH] user_profiles result:", { userProfileData, userProfileError })

				// –ï—Å–ª–∏ user_profiles –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
				let profileSource = userProfileData
				if (userProfileError || !userProfileData) {
					console.log("üîÑ [REFRESH] No profile found, creating default...")
					// –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
					profileSource = {
						id: user.id,
						full_name: user.email || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
						position: "–°–æ—Ç—Ä—É–¥–Ω–∏–∫",
						is_admin: false,
						role: 'user',
						work_schedule: "5/2",
						work_hours: 9,
						is_online: false,
						office_name: "–†–∞—Å—Å–≤–µ—Ç",
						created_at: new Date().toISOString(),
						updated_at: new Date().toISOString()
					}
					console.log("‚úÖ [REFRESH] Using default profile")
				} else {
					console.log("‚úÖ [REFRESH] Using data from user_profiles")
				}

				if (profileSource) {
					// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç UserProfile
					const refreshedProfile = {
						id: profileSource.id || user.id,
						full_name: profileSource.full_name || user.email || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
						position: profileSource.position || "–°–æ—Ç—Ä—É–¥–Ω–∏–∫",
						is_admin: profileSource.is_admin || false,
						role: profileSource.role || 'user',
						work_schedule: profileSource.work_schedule || "8+1",
						work_hours: profileSource.work_hours || 9,
						is_online: profileSource.is_online || false,
						last_seen: profileSource.last_seen,
						created_at: profileSource.created_at || new Date().toISOString(),
						updated_at: profileSource.updated_at || new Date().toISOString(),
						office_id: profileSource.office_id,
						office_name: profileSource.office_name || "–ù–µ —É–∫–∞–∑–∞–Ω",
						avatar_url: profileSource.avatar_url,
						office_stats: profileSource.office_stats
					}

					console.log("üìã [REFRESH] Refreshed profile:", refreshedProfile)
					setProfile(refreshedProfile)
					appCache.set("user_profile", refreshedProfile, 30)
					console.log("‚úÖ [REFRESH] Profile updated in context and cache")
				} else {
					console.warn("‚ö†Ô∏è [REFRESH] No profile data found")
					// –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ
					const { profile } = await authService.getUserProfile(user.id)
					setProfile(profile)
					appCache.set("user_profile", profile, 30)
				}
			} catch (error: any) {
				console.error("‚ùå Profile refresh error:", error)
				setError(error.message)
			}
		}
	}, [user])

	const handleUpdateProfile = async (updates: Partial<UserProfile>) => {
		if (!user) return { error: new Error("No user logged in") }

		try {
			setError(null)
			const { error } = await authService.updateProfile(user.id, updates)
			if (!error) {
				await refreshProfile()
			}
			return { error }
		} catch (error: any) {
			setError(error.message)
			return { error }
		}
	}

	const contextValue = useMemo(() => ({
		user,
		profile,
		loading,
		error,
		signIn: handleSignIn,
		signUp: handleSignUp,
		signOut: handleSignOut,
		refreshProfile,
		updateProfile: handleUpdateProfile,
	}), [user, profile, loading, error])

	// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
	useProfileSync(user?.id || null, refreshProfile)

	return React.createElement(AuthContext.Provider, { value: contextValue }, children)
}
