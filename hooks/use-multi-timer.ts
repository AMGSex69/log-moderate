"use client"

import { useState, useEffect, useRef } from "react"
import { supabase } from "@/lib/supabase"
import { authService } from "@/lib/auth"
import { useAuth } from "@/hooks/use-auth"
import { useToast } from "@/hooks/use-toast"

interface ActiveTask {
	id: number
	taskTypeId: number
	taskName: string
	startTime: Date
	elapsedTime: number
	units: number
	isActive: boolean
}

interface Timer {
	startTime: Date
	elapsedTime: number
	isRunning: boolean
}

export function useMultiTimer() {
	const { user } = useAuth()
	const [activeTasks, setActiveTasks] = useState<ActiveTask[]>([])
	const [timers, setTimers] = useState<Map<number, Timer>>(new Map())
	const intervalRefs = useRef<Map<number, NodeJS.Timeout>>(new Map())
	const initializedRef = useRef(false)

	// –û–¢–ö–õ–Æ–ß–ï–ù–û: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	/*
	useEffect(() => {
		if (user && !initializedRef.current) {
			initializedRef.current = true
			restoreActiveSessions()
		}
	}, [user])

	const restoreActiveSessions = async () => {
		if (!user) return

		try {
			console.log("üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏...")

			const { employeeId, error: empError } = await authService.getEmployeeId(user.id)
			if (empError || !employeeId) {
				console.log("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω employee_id –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–π")
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
			const { data: activeSessions, error } = await supabase
				.from("active_sessions")
				.select(`
			 id,
			 task_type_id,
			 started_at,
			 task_types(name)
		  `)
				.eq("employee_id", employeeId)
				.eq("is_active", true)
				.gte("last_heartbeat", new Date(Date.now() - 5 * 60 * 1000).toISOString()) // –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç

			if (error) {
				console.error("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π:", error)
				return
			}

			if (!activeSessions || activeSessions.length === 0) {
				console.log("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
				return
			}

			console.log("‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π:", activeSessions.length)

			// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
			const restoredTasks: ActiveTask[] = activeSessions.map((session: any) => {
				const startTime = new Date(session.started_at)
				const elapsedTime = Math.floor((Date.now() - startTime.getTime()) / 1000)

				return {
					id: session.id,
					taskTypeId: session.task_type_id,
					taskName: session.task_types?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞",
					startTime,
					elapsedTime,
					units: 0,
					isActive: true,
				}
			})

			setActiveTasks(restoredTasks)

			// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
			const newTimers = new Map<number, Timer>()
			restoredTasks.forEach((task) => {
				newTimers.set(task.taskTypeId, {
					startTime: task.startTime,
					elapsedTime: task.elapsedTime,
					isRunning: true,
				})
			})
			setTimers(newTimers)

			console.log("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:", restoredTasks.length)
		} catch (error) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π:", error)
		}
	}
	*/

	const startTask = async (taskTypeId: number, taskName: string) => {
		if (!user) return

		try {
			const { employeeId, error: empError } = await authService.getEmployeeId(user.id)
			if (empError || !employeeId) throw new Error("Employee not found")

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –∑–∞–¥–∞—á–∞
			const existingTask = activeTasks.find((task) => task.taskTypeId === taskTypeId)
			if (existingTask) {
				console.log("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞:", taskName)
				return
			}

			// –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ heartbeat)
			const { data, error } = await supabase
				.from("active_sessions")
				.insert({
					employee_id: employeeId,
					task_type_id: taskTypeId,
					started_at: new Date().toISOString(),
					last_heartbeat: new Date().toISOString(),
				})
				.select()
				.single()

			if (error) throw error

			const newTask: ActiveTask = {
				id: data.id,
				taskTypeId,
				taskName,
				startTime: new Date(),
				elapsedTime: 0,
				units: 0,
				isActive: true,
			}

			setActiveTasks((prev) => [...prev, newTask])

			// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
			const timer: Timer = {
				startTime: new Date(),
				elapsedTime: 0,
				isRunning: true,
			}

			setTimers((prev) => new Map(prev).set(taskTypeId, timer))

			console.log("‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞:", taskName)
		} catch (error) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏:", error)
		}
	}

	const stopTask = async (taskTypeId: number) => {
		try {
			// –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
			const task = activeTasks.find((t) => t.taskTypeId === taskTypeId)
			if (task) {
				await supabase.from("active_sessions").delete().eq("id", task.id)
			}

			// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
			const intervalRef = intervalRefs.current.get(taskTypeId)
			if (intervalRef) {
				clearInterval(intervalRef)
				intervalRefs.current.delete(taskTypeId)
			}

			// –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
			setActiveTasks((prev) => prev.filter((task) => task.taskTypeId !== taskTypeId))
			setTimers((prev) => {
				const newTimers = new Map(prev)
				newTimers.delete(taskTypeId)
				return newTimers
			})

			console.log("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:", taskTypeId)
		} catch (error) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á–∏:", error)
		}
	}

	const updateUnits = (taskTypeId: number, units: number) => {
		setActiveTasks((prev) =>
			prev.map((task) => (task.taskTypeId === taskTypeId ? { ...task, units } : task))
		)
	}

	// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
	useEffect(() => {
		return () => {
			intervalRefs.current.forEach((interval) => clearInterval(interval))
			intervalRefs.current.clear()
		}
	}, [])

	return {
		activeTasks,
		timers,
		startTask,
		stopTask,
		updateUnits,
	}
}
