"use client"

import { useState, useEffect, useRef, useCallback } from "react"
import { supabase } from "@/lib/supabase"
import { authService } from "@/lib/auth"
import { useAuth } from "@/hooks/use-auth"
import { useToast } from "@/hooks/use-toast"

interface ActiveTask {
	id: number
	taskTypeId: number
	taskName: string
	startTime: Date
	elapsedTime: number
	units: number
	isActive: boolean
}

interface Timer {
	startTime: Date
	elapsedTime: number
	isRunning: boolean
	isPaused?: boolean
	pauseStartTime?: Date
	totalPausedTime?: number
}

export function useMultiTimer() {
	const { user } = useAuth()
	const { toast } = useToast()
	const [activeTasks, setActiveTasks] = useState<ActiveTask[]>([])
	const [timers, setTimers] = useState<Map<number, Timer>>(new Map())
	const intervalRefs = useRef<Map<number, NodeJS.Timeout>>(new Map())
	const initializedRef = useRef(false)
	const mainTimerRef = useRef<NodeJS.Timeout | null>(null)
	const activeTasksRef = useRef<ActiveTask[]>([])

	// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º ref —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∑–∞–º—ã–∫–∞–Ω–∏–π
	useEffect(() => {
		activeTasksRef.current = activeTasks
	}, [activeTasks])

	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
	useEffect(() => {
		if (user && !initializedRef.current) {
			initializedRef.current = true
			restoreActiveSessions()
		}
	}, [user])

	// –ì–ª–∞–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á - –ò–°–ü–†–ê–í–õ–ï–ù–û
	useEffect(() => {
		const hasActiveTasks = activeTasks.length > 0

		if (hasActiveTasks) {
			// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
			if (!mainTimerRef.current) {
				mainTimerRef.current = setInterval(() => {
					updateAllTimers()
				}, 1000) // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
			}
		} else {
			// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
			if (mainTimerRef.current) {
				clearInterval(mainTimerRef.current)
				mainTimerRef.current = null
			}
		}

		return () => {
			if (mainTimerRef.current) {
				clearInterval(mainTimerRef.current)
				mainTimerRef.current = null
			}
		}
	}, [activeTasks.length]) // –¢–æ–ª—å–∫–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –¥–ª–∏–Ω—ã –º–∞—Å—Å–∏–≤–∞

	// –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç activeTasks, –∏—Å–ø–æ–ª—å–∑—É–µ–º ref
	const updateAllTimers = useCallback(() => {
		const now = Date.now()
		const currentTasks = activeTasksRef.current

		// –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä—ã –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		let updatedTimers: Map<number, Timer> | null = null

		setTimers((prevTimers) => {
			const newTimers = new Map(prevTimers)

			currentTasks.forEach((task) => {
				if (task.isActive) {
					const timer = prevTimers.get(task.taskTypeId)
					if (!timer) return

					// –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –Ω–∞ –ø–∞—É–∑–µ, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
					if (timer.isPaused) {
						newTimers.set(task.taskTypeId, {
							...timer,
							isRunning: false
						})
					} else {
						// –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º –ø–∞—É–∑
						const totalElapsed = Math.floor((now - task.startTime.getTime()) / 1000)
						const totalPausedTime = timer.totalPausedTime || 0
						const effectiveElapsed = Math.max(0, totalElapsed - totalPausedTime)

						newTimers.set(task.taskTypeId, {
							...timer,
							elapsedTime: effectiveElapsed,
							isRunning: true,
							isPaused: false,
						})
					}
				}
			})

			updatedTimers = newTimers
			return newTimers
		})

		// –û–±–Ω–æ–≤–ª—è–µ–º elapsed time –≤ –∑–∞–¥–∞—á–∞—Ö —Å —É—á–µ—Ç–æ–º –ø–∞—É–∑
		setActiveTasks((currentTasks) => {
			return currentTasks.map((task) => {
				const currentTimer = updatedTimers?.get(task.taskTypeId)
				if (!currentTimer) return task

				if (currentTimer.isPaused) {
					return task // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –µ—Å–ª–∏ –Ω–∞ –ø–∞—É–∑–µ
				}

				// –í—ã—á–∏—Å–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º –ø–∞—É–∑
				const totalElapsed = Math.floor((now - task.startTime.getTime()) / 1000)
				const totalPausedTime = currentTimer.totalPausedTime || 0
				const effectiveElapsed = Math.max(0, totalElapsed - totalPausedTime)

				return {
					...task,
					elapsedTime: effectiveElapsed,
				}
			})
		})
	}, []) // –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–º—ã–∫–∞–Ω–∏—è

	const restoreActiveSessions = async () => {
		if (!user) return

		try {
			const { employeeId, error: empError } = await authService.getEmployeeId(user.id)
			if (empError || !employeeId) {
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
			const { data: activeSessions, error } = await supabase
				.from("active_sessions")
				.select(`
					id,
					task_type_id,
					started_at,
					last_heartbeat,
					current_units,
					task_types(name)
				`)
				.eq("employee_id", employeeId)
				.eq("is_active", true)
				.gte("last_heartbeat", new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString()) // –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞

			if (error) {
				console.error("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π:", error)
				return
			}

			if (!activeSessions || activeSessions.length === 0) {
				return
			}

			// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
			const restoredTasks: ActiveTask[] = activeSessions.map((session: any) => {
				const startTime = new Date(session.started_at)
				const elapsedTime = Math.floor((Date.now() - startTime.getTime()) / 1000)

				return {
					id: session.id,
					taskTypeId: session.task_type_id,
					taskName: session.task_types?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞",
					startTime,
					elapsedTime,
					units: session.current_units || 0, // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü
					isActive: true,
				}
			})

			// –í–ê–ñ–ù–û: —Å–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏
			setActiveTasks(restoredTasks)

			// –ó–∞—Ç–µ–º –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
			const newTimers = new Map<number, Timer>()
			restoredTasks.forEach((task) => {
				newTimers.set(task.taskTypeId, {
					startTime: task.startTime,
					elapsedTime: task.elapsedTime,
					isRunning: true,
				})
			})
			setTimers(newTimers)

			if (restoredTasks.length > 0) {
				toast({
					title: "üîÑ –¢–∞–π–º–µ—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã",
					description: `–ù–∞–π–¥–µ–Ω–æ ${restoredTasks.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á`,
				})
			}
		} catch (error) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π:", error)
		}
	}

	const startTask = async (taskTypeId: number, taskName: string) => {
		if (!user) return

		try {
			const { employeeId, error: empError } = await authService.getEmployeeId(user.id)
			if (empError || !employeeId) throw new Error("Employee not found")

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –∑–∞–¥–∞—á–∞
			const existingTask = activeTasks.find((task) => task.taskTypeId === taskTypeId)
			if (existingTask) {
				toast({
					title: "–ó–∞–¥–∞—á–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞",
					description: taskName,
					variant: "destructive",
				})
				return false
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (–º–∞–∫—Å–∏–º—É–º 5)
			if (activeTasks.length >= 5) {
				toast({
					title: "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç",
					description: "–ú–∞–∫—Å–∏–º—É–º 5 –∑–∞–¥–∞—á –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ",
					variant: "destructive",
				})
				return false
			}

			const now = new Date()

			// –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
			const { data, error } = await supabase
				.from("active_sessions")
				.insert({
					employee_id: employeeId,
					task_type_id: taskTypeId,
					started_at: now.toISOString(),
					last_heartbeat: now.toISOString(),
					is_active: true,
				})
				.select()
				.single()

			if (error) throw error

			const newTask: ActiveTask = {
				id: data.id,
				taskTypeId,
				taskName,
				startTime: now,
				elapsedTime: 0,
				units: 0,
				isActive: true,
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
			setActiveTasks((prev) => {
				const updated = [...prev, newTask]
				return updated
			})

			// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
			const timer: Timer = {
				startTime: now,
				elapsedTime: 0,
				isRunning: true,
			}

			setTimers((prev) => {
				const updated = new Map(prev).set(taskTypeId, timer)
				return updated
			})

			toast({
				title: "‚è±Ô∏è –ó–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞",
				description: taskName,
			})

			return true
		} catch (error) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏:", error)
			toast({
				title: "–û—à–∏–±–∫–∞",
				description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É",
				variant: "destructive",
			})
			return false
		}
	}

	const stopTask = async (taskTypeId: number) => {
		try {
			// –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
			const task = activeTasks.find((t) => t.taskTypeId === taskTypeId)
			if (task) {
				await supabase.from("active_sessions").delete().eq("id", task.id)
			}

			// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
			const intervalRef = intervalRefs.current.get(taskTypeId)
			if (intervalRef) {
				clearInterval(intervalRef)
				intervalRefs.current.delete(taskTypeId)
			}

			// –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
			setActiveTasks((prev) => {
				const updated = prev.filter((task) => task.taskTypeId !== taskTypeId)
				return updated
			})

			setTimers((prev) => {
				const newTimers = new Map(prev)
				newTimers.delete(taskTypeId)
				return newTimers
			})
		} catch (error) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á–∏:", error)
		}
	}

	const updateUnits = async (taskTypeId: number, units: number) => {
		// –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		setActiveTasks((prev) =>
			prev.map((task) => (task.taskTypeId === taskTypeId ? { ...task, units } : task))
		)

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		try {
			const task = activeTasks.find((t) => t.taskTypeId === taskTypeId)
			if (task && task.id) {
				await supabase
					.from("active_sessions")
					.update({ current_units: units })
					.eq("id", task.id)
			}
		} catch (error) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –µ–¥–∏–Ω–∏—Ü –≤ –ë–î:", error)
		}
	}

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
	const getFormattedTime = (taskTypeId: number): string => {
		const timer = timers.get(taskTypeId)
		if (!timer) return "00:00"

		const totalSeconds = timer.elapsedTime
		const hours = Math.floor(totalSeconds / 3600)
		const minutes = Math.floor((totalSeconds % 3600) / 60)
		const seconds = totalSeconds % 60

		if (hours > 0) {
			return `${hours.toString().padStart(2, "0")}:${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`
		}
		return `${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`
	}

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
	const getMinutes = (taskTypeId: number): number => {
		const timer = timers.get(taskTypeId)
		if (!timer) return 0
		return Math.ceil(timer.elapsedTime / 60)
	}

	// –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á–∏
	const pauseTask = (taskTypeId: number) => {
		setTimers((prev) => {
			const timer = prev.get(taskTypeId)
			if (!timer || timer.isPaused) return prev

			const newTimers = new Map(prev)
			newTimers.set(taskTypeId, {
				...timer,
				isPaused: true,
				isRunning: false,
				pauseStartTime: new Date()
			})
			return newTimers
		})
	}

	// –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
	const resumeTask = (taskTypeId: number) => {
		setTimers((prev) => {
			const timer = prev.get(taskTypeId)
			if (!timer || !timer.isPaused || !timer.pauseStartTime) return prev

			// –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –ø–∞—É–∑—ã
			const pauseDuration = Math.floor((Date.now() - timer.pauseStartTime.getTime()) / 1000)
			const totalPausedTime = (timer.totalPausedTime || 0) + pauseDuration

			const newTimers = new Map(prev)
			newTimers.set(taskTypeId, {
				...timer,
				isPaused: false,
				isRunning: true,
				pauseStartTime: undefined,
				totalPausedTime: totalPausedTime
			})
			return newTimers
		})
	}

	// –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –∑–∞–¥–∞—á
	const pauseAllTasks = () => {
		setTimers((prev) => {
			const newTimers = new Map()
			prev.forEach((timer, taskTypeId) => {
				if (!timer.isPaused) {
					newTimers.set(taskTypeId, {
						...timer,
						isPaused: true,
						isRunning: false,
						pauseStartTime: new Date()
					})
				} else {
					newTimers.set(taskTypeId, timer)
				}
			})
			return newTimers
		})
	}

	// –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
	const resumeAllTasks = () => {
		setTimers((prev) => {
			const newTimers = new Map()
			prev.forEach((timer, taskTypeId) => {
				if (timer.isPaused && timer.pauseStartTime) {
					// –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –ø–∞—É–∑—ã
					const pauseDuration = Math.floor((Date.now() - timer.pauseStartTime.getTime()) / 1000)
					const totalPausedTime = (timer.totalPausedTime || 0) + pauseDuration

					newTimers.set(taskTypeId, {
						...timer,
						isPaused: false,
						isRunning: true,
						pauseStartTime: undefined,
						totalPausedTime: totalPausedTime
					})
				} else {
					newTimers.set(taskTypeId, timer)
				}
			})
			return newTimers
		})
	}

	// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º heartbeat –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	useEffect(() => {
		const currentTasks = activeTasksRef.current
		if (currentTasks.length === 0) return

		const heartbeatInterval = setInterval(async () => {
			if (!user) return

			try {
				const { employeeId } = await authService.getEmployeeId(user.id)
				if (!employeeId) return

				const currentActiveTasks = activeTasksRef.current
				const activeTaskIds = currentActiveTasks.map(task => task.id)
				if (activeTaskIds.length > 0) {
					await supabase
						.from("active_sessions")
						.update({ last_heartbeat: new Date().toISOString() })
						.in("id", activeTaskIds)
				}
			} catch (error) {
				console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è heartbeat:", error)
			}
		}, 30000) // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

		return () => {
			clearInterval(heartbeatInterval)
		}
	}, [activeTasks.length, user]) // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç –¥–ª–∏–Ω—ã –º–∞—Å—Å–∏–≤–∞

	// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
	useEffect(() => {
		return () => {
			intervalRefs.current.forEach((interval) => clearInterval(interval))
			intervalRefs.current.clear()

			if (mainTimerRef.current) {
				clearInterval(mainTimerRef.current)
			}
		}
	}, [])

	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ - –£–ë–ò–†–ê–ï–ú, –ß–¢–û–ë–´ –ù–ï –í–´–ó–´–í–ê–¢–¨ –õ–ò–®–ù–ò–ï –†–ï–ù–î–ï–†–´
	useEffect(() => {
	}, [activeTasks.length, timers.size])

	return {
		activeTasks,
		timers,
		startTask,
		stopTask,
		updateUnits,
		getFormattedTime,
		getMinutes,
		restoreActiveSessions,
		pauseTask,
		resumeTask,
		pauseAllTasks,
		resumeAllTasks,
	}
}
