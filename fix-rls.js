const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://ixqjqjqjqjqjqjqjqjqj.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Iml4cWpxanFqcWpxanFqcWpxanFqIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczNDM0NzE5MSwiZXhwIjoyMDQ5OTIzMTkxfQ.Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8';

const supabase = createClient(supabaseUrl, supabaseKey);

async function fixRLS() {
	console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è employees...');

	try {
		// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏
		console.log('1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ RLS –ø–æ–ª–∏—Ç–∏–∫–∏...');
		const { data: policies, error: policiesError } = await supabase
			.rpc('exec_sql', {
				sql: `SELECT policyname, cmd, permissive, roles FROM pg_policies WHERE tablename = 'employees';`
			});

		if (policiesError) {
			console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª–∏—Ç–∏–∫:', policiesError);
		} else {
			console.log('–¢–µ–∫—É—â–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏:', policies);
		}

		// 2. –û—Ç–∫–ª—é—á–∞–µ–º RLS –≤—Ä–µ–º–µ–Ω–Ω–æ
		console.log('2. –û—Ç–∫–ª—é—á–∞–µ–º RLS...');
		const { error: disableError } = await supabase
			.rpc('exec_sql', {
				sql: 'ALTER TABLE employees DISABLE ROW LEVEL SECURITY;'
			});

		if (disableError) {
			console.log('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è RLS:', disableError);
		} else {
			console.log('‚úÖ RLS –æ—Ç–∫–ª—é—á–µ–Ω');
		}

		// 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –±–µ–∑ RLS
		console.log('3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –±–µ–∑ RLS...');
		const { data: testData, error: testError } = await supabase
			.from('employees')
			.select(`
                id,
                full_name,
                user_id,
                is_online,
                position,
                is_active,
                work_hours,
                offices(name)
            `)
			.eq('offices.name', '–†–∞—Å—Å–≤–µ—Ç')
			.eq('is_active', true);

		if (testError) {
			console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', testError);
		} else {
			console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', testData?.length || 0);
			if (testData && testData.length > 0) {
				console.log('–ü–µ—Ä–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫:', testData[0]);
			}
		}

		// 4. –í–∫–ª—é—á–∞–µ–º RLS –æ–±—Ä–∞—Ç–Ω–æ
		console.log('4. –í–∫–ª—é—á–∞–µ–º RLS –æ–±—Ä–∞—Ç–Ω–æ...');
		const { error: enableError } = await supabase
			.rpc('exec_sql', {
				sql: 'ALTER TABLE employees ENABLE ROW LEVEL SECURITY;'
			});

		if (enableError) {
			console.log('–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è RLS:', enableError);
		} else {
			console.log('‚úÖ RLS –≤–∫–ª—é—á–µ–Ω');
		}

		// 5. –°–æ–∑–¥–∞–µ–º —Ä–∞–∑—Ä–µ—à–∞—é—â—É—é –ø–æ–ª–∏—Ç–∏–∫—É
		console.log('5. –°–æ–∑–¥–∞–µ–º —Ä–∞–∑—Ä–µ—à–∞—é—â—É—é –ø–æ–ª–∏—Ç–∏–∫—É...');
		const { error: policyError } = await supabase
			.rpc('exec_sql', {
				sql: `
                    DROP POLICY IF EXISTS "employees_read_all" ON employees;
                    CREATE POLICY "employees_read_all" ON employees
                        FOR SELECT 
                        USING (true);
                `
			});

		if (policyError) {
			console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏:', policyError);
		} else {
			console.log('‚úÖ –ü–æ–ª–∏—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∞');
		}

		// 6. –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
		console.log('6. –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å –Ω–æ–≤–æ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π...');
		const { data: finalData, error: finalError } = await supabase
			.from('employees')
			.select(`
                id,
                full_name,
                user_id,
                is_online,
                position,
                is_active,
                work_hours,
                offices(name)
            `)
			.eq('offices.name', '–†–∞—Å—Å–≤–µ—Ç')
			.eq('is_active', true);

		if (finalError) {
			console.log('‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:', finalError);
		} else {
			console.log('‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –Ω–∞–π–¥–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', finalData?.length || 0);
			if (finalData && finalData.length > 0) {
				console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:');
				finalData.forEach((emp, i) => {
					console.log(`${i + 1}. ${emp.full_name} - ${emp.position} (${emp.work_hours}—á)`);
				});
			}
		}

	} catch (error) {
		console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
	}
}

fixRLS(); 