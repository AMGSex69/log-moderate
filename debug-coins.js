// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–æ–Ω–µ—Ç –∏ —É—Ä–æ–≤–Ω–µ–π –≤ Task Logger
// –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

console.log("üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –º–æ–Ω–µ—Ç –∏ —É—Ä–æ–≤–Ω–µ–π...");

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase
async function debugCoinsCalculation() {
	try {
		// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		console.log("üë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
		const { data: { user }, error: userError } = await supabase.auth.getUser();

		if (userError || !user) {
			console.error("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:", userError);
			return;
		}

		console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:", { id: user.id, email: user.email });

		// 2. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		console.log("üìã –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
		const { data: profile, error: profileError } = await supabase
			.from("user_profiles")
			.select("*")
			.eq("id", user.id)
			.single();

		if (profileError) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:", profileError);
			return;
		}

		console.log("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", profile);

		if (!profile.employee_id) {
			console.warn("‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç employee_id!");
			return;
		}

		// 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º task_logs –¥–ª—è —ç—Ç–æ–≥–æ employee_id
		console.log(`üîç –ò—â–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è employee_id: ${profile.employee_id}...`);
		const { data: taskLogs, error: logsError } = await supabase
			.from("task_logs")
			.select(`
                id,
                employee_id,
                task_type_id,
                units_completed,
                time_spent_minutes,
                work_date,
                task_types!inner(name)
            `)
			.eq("employee_id", profile.employee_id);

		if (logsError) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á:", logsError);
			return;
		}

		console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: ${taskLogs?.length || 0}`);

		if (!taskLogs || taskLogs.length === 0) {
			console.warn("‚ö†Ô∏è –ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
			console.log("üîç –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∑–∞–¥–∞—á–∏ —Å –¥—Ä—É–≥–∏–º–∏ employee_id...");

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
			const { data: allLogs, error: allLogsError } = await supabase
				.from("task_logs")
				.select("employee_id, COUNT(*)")
				.group("employee_id");

			if (!allLogsError && allLogs) {
				console.log("üìä –í—Å–µ employee_id –≤ task_logs:", allLogs);
			}

			return;
		}

		// 4. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã
		console.log("üí∞ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã...");
		let totalCoins = 0;
		const taskBreakdown = [];

		// –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞–≥—Ä–∞–¥ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
		const TASK_REWARDS = {
			'–ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –û–°–°': 15,
			'–û–±–∑–≤–æ–Ω—ã –ø–æ —Ä–∏—Å–æ–≤–∫–µ': 10,
			'–û—Ç—á–µ—Ç—ã —Ñ–∏–∑–∏–∫–∞–º (+–ø–æ—á—Ç–∞)': 12,
			'–ü—Ä–æ—Ç–æ–∫–æ–ª—ã –û–°–°': 25,
			'–í–Ω–µ—Å–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π –ú–ñ–ò (–∫–æ–ª-–≤–æ –±–ª–∞–Ω–∫–æ–≤)': 5,
			'–û–±—Ö–æ–¥—ã': 25,
			// –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞—á–∏...
		};

		taskLogs.forEach(log => {
			const taskName = log.task_types.name;
			const coinsPerUnit = TASK_REWARDS[taskName] || 5; // –±–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞
			const taskCoins = log.units_completed * coinsPerUnit;
			totalCoins += taskCoins;

			taskBreakdown.push({
				taskName,
				units: log.units_completed,
				coinsPerUnit,
				totalCoins: taskCoins,
				date: log.work_date
			});
		});

		console.log("üí∞ –ò—Ç–æ–≥–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã:", totalCoins);
		console.log("üìä –†–∞–∑–±–∏–≤–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º:", taskBreakdown);

		// 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
		console.log("üñ•Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏...");

		// –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –º–æ–Ω–µ—Ç–∞–º–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
		const coinElements = document.querySelectorAll('[class*="coin"], [class*="Coin"]');
		console.log("ü™ô –ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –º–æ–Ω–µ—Ç–∞–º–∏:", coinElements);

		coinElements.forEach((el, index) => {
			console.log(`–≠–ª–µ–º–µ–Ω—Ç ${index + 1}:`, el.textContent, el);
		});

		// 6. –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
		console.log("üìã –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:");
		console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${profile.full_name} (employee_id: ${profile.employee_id})`);
		console.log(`üìä –ó–∞–¥–∞—á –≤ –±–∞–∑–µ: ${taskLogs.length}`);
		console.log(`üí∞ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã: ${totalCoins}`);
		console.log(`üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á: ${new Set(taskLogs.map(log => log.task_types.name)).size}`);

		return {
			user,
			profile,
			taskLogs,
			totalCoins,
			taskBreakdown
		};

	} catch (error) {
		console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:", error);
	}
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
debugCoinsCalculation().then(result => {
	if (result) {
		console.log("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
		window.debugResult = result; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
	}
}); 