const { createClient } = require('@supabase/supabase-js');

// –ò—Å–ø–æ–ª—å–∑—É–µ–º anon key –≤–º–µ—Å—Ç–æ service key
const supabaseUrl = 'https://ixqjqjqjqjqjqjqjqjqj.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Iml4cWpxanFqcWpxanFqcWpxanFqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzQzNDcxOTEsImV4cCI6MjA0OTkyMzE5MX0.Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function testEmployeesAccess() {
	console.log('üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ employees —Å anon key...');

	try {
		// 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ employees
		console.log('1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ employees...');
		const { data: employees, error: employeesError } = await supabase
			.from('employees')
			.select('*')
			.limit(5);

		if (employeesError) {
			console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ employees:', employeesError);
		} else {
			console.log('‚úÖ –î–æ—Å—Ç—É–ø –∫ employees —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:', employees?.length || 0);
		}

		// 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å JOIN –∫–∞–∫ –≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
		console.log('2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å JOIN...');
		const { data: joinData, error: joinError } = await supabase
			.from('employees')
			.select(`
                id,
                full_name,
                user_id,
                is_online,
                position,
                is_active,
                work_hours,
                offices(name)
            `)
			.eq('is_active', true)
			.limit(5);

		if (joinError) {
			console.log('‚ùå –û—à–∏–±–∫–∞ JOIN –∑–∞–ø—Ä–æ—Å–∞:', joinError);
		} else {
			console.log('‚úÖ JOIN –∑–∞–ø—Ä–æ—Å —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:', joinData?.length || 0);
			if (joinData && joinData.length > 0) {
				console.log('–ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å:', joinData[0]);
			}
		}

		// 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –æ—Ñ–∏—Å—É
		console.log('3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –æ—Ñ–∏—Å—É "–†–∞—Å—Å–≤–µ—Ç"...');
		const { data: officeData, error: officeError } = await supabase
			.from('employees')
			.select(`
                id,
                full_name,
                user_id,
                is_online,
                position,
                is_active,
                work_hours,
                offices(name)
            `)
			.eq('offices.name', '–†–∞—Å—Å–≤–µ—Ç')
			.eq('is_active', true);

		if (officeError) {
			console.log('‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –æ—Ñ–∏—Å—É:', officeError);
		} else {
			console.log('‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ –æ—Ñ–∏—Å—É —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:', officeData?.length || 0);
			if (officeData && officeData.length > 0) {
				console.log('–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –æ—Ñ–∏—Å–∞ "–†–∞—Å—Å–≤–µ—Ç":');
				officeData.forEach((emp, i) => {
					console.log(`${i + 1}. ${emp.full_name} - ${emp.position}`);
				});
			}
		}

		// 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º offices –æ—Ç–¥–µ–ª—å–Ω–æ
		console.log('4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ offices...');
		const { data: offices, error: officesError } = await supabase
			.from('offices')
			.select('*');

		if (officesError) {
			console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ offices:', officesError);
		} else {
			console.log('‚úÖ –î–æ—Å—Ç—É–ø –∫ offices —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:', offices?.length || 0);
			const rassveet = offices?.find(o => o.name === '–†–∞—Å—Å–≤–µ—Ç');
			if (rassveet) {
				console.log('–û—Ñ–∏—Å "–†–∞—Å—Å–≤–µ—Ç" –Ω–∞–π–¥–µ–Ω:', rassveet);
			}
		}

	} catch (error) {
		console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
	}
}

testEmployeesAccess(); 